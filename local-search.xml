<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Abaqus案例之管道爆炸</title>
    <link href="/2025/02/15/049%20Abaqus%E6%A1%88%E4%BE%8B%E4%B9%8B%E7%AE%A1%E9%81%93%E7%BC%BA%E9%99%B7%E5%BC%80%E8%A3%82/"/>
    <url>/2025/02/15/049%20Abaqus%E6%A1%88%E4%BE%8B%E4%B9%8B%E7%AE%A1%E9%81%93%E7%BC%BA%E9%99%B7%E5%BC%80%E8%A3%82/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/15 晚上</p>          </div><h2 id="完整管道">1、完整管道</h2><a class="btn" href=""  title="视频教程" target="_blank">https://www.bilibili.com/video/BV1uP411g7Xu/?spm_id_from=333.337.search-card.all.click&vd_source=33b50a4dd201d7564e6e63d321809ce9</a><h3 id="部件">1.1 部件</h3><p>基本参数</p><ul><li>管道厚度：6.3mm</li><li>长度：2.1m</li><li>直径：450mm</li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215194206.png"></p></div><h3 id="材料">1.2 材料</h3><ul><li>密度：<spanclass="math inline">\(7800kg/m^{3}=7.8e^{-9}t/m^{3}\)</span></li><li>杨氏模量：<spanclass="math inline">\(2.1×10^{11}N·m^{-2}=2.1×10^{5}N·mm^{-2}\)</span></li><li>泊松比：0.3</li><li>塑性 755 0 809 0.01 829 0.02 842 0.1 895 0.15 922 0.4 953 1 11004</li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215194446.png"></p></div><h3 id="分析步">1.3 分析步</h3><ul><li>计算类型：动力显性</li><li>时间长度：10s</li><li>自定义质量缩放</li></ul><p>质量缩放</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215195901.png"></p></div><p>场输出选择<code>STATUS</code>和<code>DMICRT</code></p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215200036.png"></p></div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215200134.png"></p></div><h3 id="载荷">1.4 载荷</h3><ul><li>管道两端面全固定</li><li>内壁面压力20MPa</li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215200820.png"></p></div><h3 id="网格">1.5 网格</h3><p>全尺寸50mm</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215200809.png"></p></div><h2 id="内腐蚀管道">2、内腐蚀管道</h2><h2 id="外腐蚀管道">3、外腐蚀管道</h2>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Abaqus</category>
      
      <category>案例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>Abaqus</tag>
      
      <tag>案例</tag>
      
      <tag>管道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abaqus模拟之勾股拉伸件</title>
    <link href="/2025/02/15/048%20Abaqus%E6%A1%88%E4%BE%8B%E4%B9%8B%E5%8B%BE%E8%82%A1%E6%8B%89%E4%BC%B8%E4%BB%B6/"/>
    <url>/2025/02/15/048%20Abaqus%E6%A1%88%E4%BE%8B%E4%B9%8B%E5%8B%BE%E8%82%A1%E6%8B%89%E4%BC%B8%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/15 下午</p>          </div><h2 id="创建部件">1、创建部件</h2><p>创建构造：过两点的斜线</p><blockquote><p>“过两点的斜线”指的是在建模过程中通过定义两个特定点来创建一条直线。这条线可以用于构建几何体、划分区域或进行加载和边界条件的设置。通过指定这两个点，可以清晰地确定线段的起始和终止位置，以便于后续的分析和仿真。</p></blockquote><ol type="1"><li><p>创建与x、y轴重合的两条线，便于之后的镜像。</p></li><li><p>创建点</p></li></ol><ul><li>(6.25,0)</li><li>(6.25,50)</li><li>(36.25,50)</li><li>(12.5,0)</li><li>(12.5,50)</li><li>(12.5,100)</li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164215.png"></p></div><p>完整草图</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164321.png"></p></div><p>深度设置为1.5</p><ol start="3" type="1"><li>分割拉伸件</li></ol><p>目的：便于施加边界条件和网格加密</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164540.png"></p></div><p>完成效果</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164652.png"></p></div><h2 id="材料属性">2、材料属性</h2><p>Al材料属性</p><blockquote><p>使用mm单位制</p></blockquote><ul><li>密度：2.7e-9</li><li>弹性：<ul><li>杨氏模量：70000</li><li>泊松比：0.3</li></ul></li><li>塑性<ul><li>屈服应力-塑性应变</li><li>150-0</li><li>245-0.7</li></ul></li><li>JC损伤<ul><li>d1：-0.77</li><li>d2：1.45</li><li>d3：-0.47</li><li>d4：0</li><li>d5：1.6</li><li>损伤演化：损伤位移0.02</li></ul></li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164719.png"></p></div><p>创建均质平面</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164748.png"></p></div><p>全部赋予部件，并装配</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164815.png"></p></div><h2 id="分析步">3、分析步</h2><p>时间长度0.1</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215164943.png"></p></div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215165040.png"></p></div><h2 id="施加载荷">4、施加载荷</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215165140.png"></p></div><p>位移</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215165207.png"></p></div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215165235.png"></p></div><h2 id="网格">5、网格</h2><p>网格加密</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215165511.png"></p></div><p>指派单元类型为：八结点线性六面体单元</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215165548.png"></p></div><h2 id="提交作业后处理">6、提交作业后处理</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250215170331.png"></p></div><div class="note note-success">            <p>参考： 1.https://www.bilibili.com/video/BV1hbpeehEwX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=33b50a4dd201d7564e6e63d321809ce9</p>          </div><div class="note note-success">            <p>完成</p>          </div>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Abaqus</category>
      
      <category>案例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>Abaqus</tag>
      
      <tag>案例</tag>
      
      <tag>拉伸件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批量重命名代码</title>
    <link href="/2025/02/14/047%20%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/02/14/047%20%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/14 晚上</p>          </div><p>运行示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python batch-rename.py -i A:/script/new -o new1 -n <span class="hljs-built_in">test</span> -p back -f 1<br></code></pre></td></tr></table></figure><ul><li>-i ：图片文件夹命名</li><li>-o ：输出文件夹名称</li><li>-n ：图片基础名称，默认为“图片”</li><li>-p ：后缀位置，可选front/back</li><li>-f ：序号因子</li></ul><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> argparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_args</span>():<br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&#x27;-i&#x27;</span>, <span class="hljs-string">&#x27;--image_directory&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;.\img&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-o&#x27;</span>, <span class="hljs-string">&#x27;--out_image_directory&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;img_new&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-n&#x27;</span>, <span class="hljs-string">&#x27;--name&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;图片&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;--position&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;front&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-f&#x27;</span>, <span class="hljs-string">&#x27;--factor&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>, default=<span class="hljs-number">1</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-l&#x27;</span>, <span class="hljs-string">&#x27;--link_symbol&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;_&#x27;</span>)<br>    <span class="hljs-comment"># 添加其他命令行参数</span><br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><span class="hljs-comment"># 自定义排序函数：提取文件名中的数字并按数字大小排序</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, filename)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group())<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 获取命令行参数</span><br>    args = get_args()<br>    image_directory = args.image_directory<br>    out_image_directory = args.out_image_directory<br>    name = args.name<br>    position = args.position<br>    factor = args.factor<br>    link_symbol = args.link_symbol<br><br>    <span class="hljs-comment"># 获取文件夹路径</span><br>    ul_directory = <span class="hljs-string">&#x27;/&#x27;</span>.join(image_directory.split(<span class="hljs-string">&#x27;/&#x27;</span>)[:-<span class="hljs-number">1</span>])<br>    new_out_image_directory = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;ul_directory&#125;</span>/<span class="hljs-subst">&#123;out_image_directory&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(new_out_image_directory):<br>        os.makedirs(new_out_image_directory)<br><br>    <span class="hljs-comment"># 获取img文件夹内的所有文件</span><br>    files = os.listdir(image_directory)<br><br>    <span class="hljs-comment"># 按照文件名中的数字排序</span><br>    files_sorted = <span class="hljs-built_in">sorted</span>(files, key=extract_number)<br><br>    new_name = <span class="hljs-string">&#x27;图片&#x27;</span><br>    <span class="hljs-comment"># 遍历文件并重命名</span><br>    <span class="hljs-keyword">for</span> index, filename <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(files_sorted):<br>        <span class="hljs-keyword">if</span> position == <span class="hljs-string">&#x27;front&#x27;</span>:<br>            new_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span><span class="hljs-subst">&#123;link_symbol&#125;</span><span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(index *factor)&#125;</span>.jpg&#x27;</span><br>        <span class="hljs-keyword">if</span> position == <span class="hljs-string">&#x27;back&#x27;</span>:<br>            new_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(index *factor)&#125;</span><span class="hljs-subst">&#123;link_symbol&#125;</span><span class="hljs-subst">&#123;name&#125;</span>.jpg&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            new_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span><span class="hljs-subst">&#123;link_symbol&#125;</span><span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(index *factor)&#125;</span>.jpg&#x27;</span>  <span class="hljs-comment"># 你可以根据需要修改文件名格式</span><br>        <br>        <span class="hljs-comment"># 获取文件的完整路径</span><br>        old_file = os.path.join(image_directory, filename)<br>        new_file = os.path.join(new_out_image_directory, new_name)<br>        <br>        <span class="hljs-comment"># 重命名文件</span><br>        os.rename(old_file, new_file)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Renamed: <span class="hljs-subst">&#123;filename&#125;</span> -&gt; <span class="hljs-subst">&#123;new_name&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 删除原文件夹</span><br>    <span class="hljs-keyword">try</span>:<br>        os.rmdir(image_directory)<br>    <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;e.strerror&#125;</span>&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All files have been renamed.&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>完成</p>          </div>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>工具</tag>
      
      <tag>批量重命名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abaqus模拟之应用梁单元做强度分析实例</title>
    <link href="/2025/02/13/046%20Abaqus%E6%A8%A1%E6%8B%9F%E4%B9%8B%E5%BA%94%E7%94%A8%E6%A2%81%E5%8D%95%E5%85%83%E5%81%9A%E5%BC%BA%E5%BA%A6%E5%88%86%E6%9E%90%E5%AE%9E%E4%BE%8B/"/>
    <url>/2025/02/13/046%20Abaqus%E6%A8%A1%E6%8B%9F%E4%B9%8B%E5%BA%94%E7%94%A8%E6%A2%81%E5%8D%95%E5%85%83%E5%81%9A%E5%BC%BA%E5%BA%A6%E5%88%86%E6%9E%90%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/13 下午</p>          </div><a class="btn" href="https://www.bilibili.com/video/BV1SK4y147Z8?spm_id_from=333.788.videopod.episodes&vd_source=33b50a4dd201d7564e6e63d321809ce9&p=12"  title="案例视频" target="_blank">案例视频</a><h2 id="案例条件">1、案例条件</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213150823.png"></p></div><div class="note note-info">            <p>问题分析</p>          </div><p>此单元应使用梁单元，降低建模以及计算复杂度。</p><p>梁的截面</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213151329.png"></p></div><h2 id="创建模型">2、创建模型</h2><p>模型选择三维线，更改大致尺寸为10（本次案例采用m单位制）</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213151512.png"></p></div><p>可以先绘制一个矩形然后删除</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213151755.png"></p></div><h2 id="创建材料及剖面">3、创建材料及剖面</h2><p>这里可创建剖面</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213152328.png"></p></div><h2 id="创建截面并赋予截面">4、创建截面并赋予截面</h2><p>这里会自动识别</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213152521.png"></p></div><h2 id="定义梁的方向并装配固定">5、定义梁的方向并装配固定</h2><p>需要按住Shitf进行加选</p><p>这一步没太看懂什么意思</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213153029.png"></p></div><blockquote><p>显示梁的结构剖面</p></blockquote><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213153143.png"></p></div><h2 id="创建分析步">6、创建分析步</h2><p>打开几何非线性</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213153254.png"></p></div><h2 id="施加载荷">7、施加载荷</h2><p>固定和集中力</p><blockquote><p>需要按住Shitf进行加选</p></blockquote><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213153758.png"></p></div><h2 id="划分网格并提交计算">8、划分网格并提交计算</h2><p>选择部件</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213153956.png"></p></div><h2 id="后处理">9、后处理</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213154643.png"></p></div><p>查看位移值为0.0158，对比计算的为0.0154</p><div class="note note-success">            <p>完成</p>          </div>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Abaqus</category>
      
      <category>案例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>Abaqus</tag>
      
      <tag>案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mathtype在word中不显示问题</title>
    <link href="/2025/02/12/045%20mathtype%E5%9C%A8word%E4%B8%AD%E6%98%BE%E7%A4%BA/"/>
    <url>/2025/02/12/045%20mathtype%E5%9C%A8word%E4%B8%AD%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/12 下午</p>          </div><div class="note note-warning">            <p>安装好的mathtype在word导航栏中不显示</p>          </div><p>定位mathtype安装目录，复制这3个文件到<code>C:\Users\**\AppData\Roaming\Microsoft\Word\STARTUP</code></p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212162700.png"></p></div><p>重新打开word即可。</p><p>如果还想将mathtype添加到ppt中，需要打开加载项，转到加载项</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212163056.png"></p></div><p>添加插件即可</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212163107.png"></p></div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212163136.png"></p></div><p>如果不知道如何找mathtype和word安装位置，可以在搜索框搜索，然后右键打开文件位置</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212163423.png"></p></div><div class="note note-success">            <p>完成</p>          </div>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科研</tag>
      
      <tag>mathtype</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zotero实现标注自动打标签</title>
    <link href="/2025/02/12/044%20zotero%E5%AE%9E%E7%8E%B0%E6%A0%87%E6%B3%A8%E8%87%AA%E5%8A%A8%E6%89%93%E6%A0%87%E7%AD%BE/"/>
    <url>/2025/02/12/044%20zotero%E5%AE%9E%E7%8E%B0%E6%A0%87%E6%B3%A8%E8%87%AA%E5%8A%A8%E6%89%93%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/12 上午</p>          </div><p>目的：根据标签定位到标注</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212110313.png"></p></div><p>首先下载安装zotero软件以及<code>zotero-actions-tags</code>插件</p><p>设置插件，新建动作，新建注释时触发，并自定义脚本，粘贴下属代码</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212105727.png"></p></div><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注释：根据注释颜色更新标签（移除旧标签并添加新标签）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 通过注释颜色自动更新标签，包括移除旧标签并添加新标签</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> appwcn windingwind</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@link</span> https://github.com/windingwind/zotero-actions-tags/discussions/339</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 定义颜色与标签的映射（请更换成自己的颜色和标签）</span><br><span class="hljs-keyword">const</span> tags = &#123;<br>    <span class="hljs-string">&quot;#ffd400&quot;</span>: <span class="hljs-string">&quot;结论&quot;</span>,<br>    <span class="hljs-string">&quot;#0033ff&quot;</span>: <span class="hljs-string">&quot;摘录&quot;</span>,<br>    <span class="hljs-string">&quot;#ff4349&quot;</span>: <span class="hljs-string">&quot;原因&quot;</span><br>&#125;;<br><br><br><span class="hljs-keyword">const</span> allTags = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(tags);<br><br><br><span class="hljs-keyword">if</span> (!item) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No item provided.&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!item.<span class="hljs-title function_">isAnnotation</span>() || !item.<span class="hljs-property">annotationColor</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This item is not an annotation or has no color.&quot;</span>;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> annotationColor = item.<span class="hljs-property">annotationColor</span>.<span class="hljs-title function_">toLowerCase</span>();<br><span class="hljs-keyword">const</span> newTag = tags[annotationColor];<br><br><br><span class="hljs-keyword">const</span> title = item.<span class="hljs-title function_">getField</span>(<span class="hljs-string">&#x27;title&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> existingTags = item.<span class="hljs-title function_">getTags</span>().<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">tag</span> =&gt;</span> tag.<span class="hljs-property">tag</span>); <br><span class="hljs-keyword">let</span> removedTags = [];<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> tag <span class="hljs-keyword">of</span> existingTags) &#123;<br>    <span class="hljs-keyword">if</span> (allTags.<span class="hljs-title function_">includes</span>(tag)) &#123;<br>        item.<span class="hljs-title function_">removeTag</span>(tag);<br>        removedTags.<span class="hljs-title function_">push</span>(tag);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (newTag) &#123;<br>    item.<span class="hljs-title function_">addTag</span>(newTag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`Title: &quot;<span class="hljs-subst">$&#123;title&#125;</span>&quot; | Removed: [<span class="hljs-subst">$&#123;removedTags.join(<span class="hljs-string">&quot;, &quot;</span>)&#125;</span>] | Added: <span class="hljs-subst">$&#123;newTag&#125;</span>`</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (removedTags.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`Title: &quot;<span class="hljs-subst">$&#123;title&#125;</span>&quot; | Removed: [<span class="hljs-subst">$&#123;removedTags.join(<span class="hljs-string">&quot;, &quot;</span>)&#125;</span>] | No new tag added.`</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`Title: &quot;<span class="hljs-subst">$&#123;title&#125;</span>&quot; | No matching tag for color: <span class="hljs-subst">$&#123;annotationColor&#125;</span>.`</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>根据自己的style更改颜色与标签的对应关系。</p><p><code>Shitf + P</code>打开style设置查看颜色对应关系，并复制到代码中</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212110110.png"></p></div><p>效果</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212110213.png"></p></div><div class="note note-success">            <p>完成</p>          </div>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科研</tag>
      
      <tag>zotero</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科研配色</title>
    <link href="/2025/02/12/043%20%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE/"/>
    <url>/2025/02/12/043%20%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/12 上午</p>          </div><h2 id="绘图样式">绘图样式</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212083935.png"></p></div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250212084458.png"></p></div>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科研</tag>
      
      <tag>绘图</tag>
      
      <tag>配色</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abaqus模拟之裂纹扩展</title>
    <link href="/2025/02/11/042%20Abaqus%E6%A8%A1%E6%8B%9F%E4%B9%8B%E8%A3%82%E7%BA%B9%E6%89%A9%E5%B1%95/"/>
    <url>/2025/02/11/042%20Abaqus%E6%A8%A1%E6%8B%9F%E4%B9%8B%E8%A3%82%E7%BA%B9%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/11 晚上</p>          </div><div class="note note-info">            <p>案例需求</p>          </div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211203759.png"></p></div><h2 id="创建铁板">1、创建铁板</h2><p>在<code>Part</code>界面创建一个<code>40x40x5</code>的铁板。</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211203656.png"></p></div><h2 id="创建裂纹">2、创建裂纹</h2><p>需要将绘制一个<code>平面</code>嵌入到铁板中完成裂纹的创建</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211204047.png"></p></div><p>创建成功</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211204204.png"></p></div><h2 id="创建材料">3、创建材料</h2><ul><li>弹性<ul><li>杨氏模量：206000</li><li>泊松比：0.3</li></ul></li><li>塑性<ul><li>许用应力：1000</li><li>塑性应力：0</li></ul></li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211205424.png"></p></div><ul><li>损伤<ul><li>类型：Maxps【最大主应变】</li><li>最大主应变损伤250</li></ul></li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211205556.png"></p></div><ul><li>添加子选项：损伤演变<ul><li>破坏位移：0.01</li></ul></li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211205639.png"></p></div><h2 id="创建截面">4、创建截面</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211210002.png"></p></div><p>赋予给part-1</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211210047.png"></p></div><h2 id="装配">5、装配</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211210525.png"></p></div><h2 id="创建分析步">6、创建分析步</h2><p>打开几何非线性性更容易收敛</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211210758.png"></p></div><h2 id="相互作用">7、相互作用</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211211137.png"></p></div><p>拾取位置</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211211243.png"></p></div><h2 id="场输出设置">8、场输出设置</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211211521.png"></p></div><p>主要是勾选这两个</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211211853.png"></p></div><p>输出100次</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211212029.png"></p></div><h2 id="网格">9、网格</h2><p>只需要给铁板绘制网格即可，裂纹面不需要绘制。</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211212159.png"></p></div><p>划分网格</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211212306.png"></p></div><p>网格属性</p><ul><li>勾选沙漏控制</li><li>单元删除</li><li>指定最大下降</li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211212451.png"></p></div><h2 id="添加约束条件">10、添加约束条件</h2><p>底端固定</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211212725.png"></p></div><p>顶端向上拉120MPa</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211212915.png"></p></div><h2 id="创建作业并提交计算">11、创建作业并提交计算</h2><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211213244.png"></p></div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250211215558.png"></p></div>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Abaqus</category>
      
      <category>案例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>Abaqus</tag>
      
      <tag>裂纹扩展</tag>
      
      <tag>案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文献写作词句</title>
    <link href="/2025/02/11/041%20%E6%96%87%E7%8C%AE%E5%86%99%E4%BD%9C%E8%AF%8D%E5%8F%A5/"/>
    <url>/2025/02/11/041%20%E6%96%87%E7%8C%AE%E5%86%99%E4%BD%9C%E8%AF%8D%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/11 上午</p>          </div><h2 id="section">2025-02-11</h2><div class="note note-info">            <p>原文： 【<strong>This knowledge plays a vital role in process andchemical safety as well as in fuel design</strong>】</p><p>翻译：<em>这些知识在工艺和化学安全以及燃料设计中起着至关重要的作用</em></p><p>写作建议：<span class="label label-primary">起着关键作用</span> <spanclass="label label-info">3并列</span></p>          </div>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科研</tag>
      
      <tag>写作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拥有自己的Deepseek大模型</title>
    <link href="/2025/02/10/040%20%E7%A1%85%E5%9F%BA%E6%B5%81%E5%8A%A8%E9%85%8D%E7%BD%AEDeepseek%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/02/10/040%20%E7%A1%85%E5%9F%BA%E6%B5%81%E5%8A%A8%E9%85%8D%E7%BD%AEDeepseek%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/10 上午</p>          </div><h2 id="打开硅基流动官网注册账号">1、打开硅基流动官网注册账号</h2><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250210095231.png"></p></div><a class="btn" href="https://siliconflow.cn/zh-cn/"  title="硅基流动官网" target="_blank">硅基流动官网</a><blockquote><p>硅基流动专为大模型微调与托管打造的一站式服务平台。通过该平台，用户可以快速、无缝地将自定义模型部署为服务，并根据自己上传的数据进行模型微调。</p></blockquote><p>填写邀请码<code>NShCQzWq</code>，这样的话双方均能获得<code>2000w token</code></p><h2id="下载客户端cherry-studio部署">2、下载客户端<code>Cherry studio</code>部署</h2><a class="btn" href="https://docs.cherry-ai.com/cherrystudio/download"  title="Cherry studio download" target="_blank">Cherry studio download</a><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250210095741.png"></p></div><h2 id="获取api密钥">3、获取api密钥</h2><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250210095840.png"></p></div><p>粘贴入<code>Cherry studio</code></p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250210095942.png"></p></div><p>点击检查，选择<code>deepseek-ai/DeepSeek-R1</code>模型</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250210100040.png"></p></div><h2 id="开始聊天">4、开始聊天</h2><p>在聊天窗口可切换模型，目前<code>deepseek-ai/DeepSeek-R1</code>有深度思考功能，但速度略慢，<code>deepseek-ai/DeepSeek-V3</code>速度较快。</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250210100315.png"></p></div><div class="note note-success">            <p>完成</p>          </div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
      <tag>Deepseek</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vscode基于aliyun配置Picgo</title>
    <link href="/2025/02/09/039%20Vscode%E9%85%8D%E7%BD%AEPicgo/"/>
    <url>/2025/02/09/039%20Vscode%E9%85%8D%E7%BD%AEPicgo/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/09 晚上</p>          </div><p>步骤</p><ol type="1"><li>在vscode扩展商店中下载<code>picgo</code>插件</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209221048-2025-02-09.png"></p></div><ol start="2" type="1"><li>点击插件设置，填写必须的信息</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209221146-2025-02-09.png"></p></div><ol start="3" type="1"><li>先将上传图床切换成阿里云图床</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209221252-2025-02-09.png"></p></div><ol start="4" type="1"><li>创建Bucket</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209221357-2025-02-09.png"></p></div><ol start="5" type="1"><li>填写名称，点击创建。</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209221451-2025-02-09.png"></p></div><ol start="6" type="1"><li>进入Bucket，修改读写权限为<code>公共权限</code></li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209221734-2025-02-09.png"></p></div><ol start="7" type="1"><li>在Bucket中创建文件夹，不创建也可，我这里创建一个vscode文件夹</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209221713-2025-02-09.png"></p></div><ol start="8" type="1"><li>获取存储空间名称及Bucket域名，记录为param1、param2、param3</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209222501-2025-02-09.png"></p></div><ol start="9" type="1"><li>获取访问apikey及秘钥，记录为param4、param4</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209222618-2025-02-09.png"></p></div><ol start="10" type="1"><li>将信息填写到vscode插件中</li></ol><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209222739-2025-02-09.png"></p></div><blockquote><p>！！！切记这里填写<code>Custom Url</code>时需在前面加<code>https://</code></p></blockquote><div class="note note-info">            <p>配置完成</p>          </div><p>可以使用snipaste软件或者qq截图软件截图复制到剪贴板，然后再vscode中点击快键键<code>Ctrl+Alt+U</code>粘贴入笔记中</p><p>附上上传的3中方式及快捷键，用的最多的就是截图上传。</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209223514-2025-02-09.png"></p></div><div class="note note-warning">            <p>注意事项</p>          </div><p>我这里想插入到笔记中后以html格式插入方便修改图片大小，所以将返回格式写成了这种<code>&lt;div style="width: 60%; margin: auto"&gt;\n  &lt;img src="$&#123;url&#125;"&gt;\n&lt;/div&gt;</code>，其中<code>\n</code>代表换行符，如果你不喜欢这种可以使用markdown原本的格式<code>![$&#123;uploadedName&#125;]($&#123;url&#125;)</code></p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209222902-2025-02-09.png"></p></div><p>呈现的效果</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250209223108-2025-02-09.png"></p></div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Picgo</tag>
      
      <tag>Vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abaqus学习笔记</title>
    <link href="/2025/02/09/038%20Abaqus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/09/038%20Abaqus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/10 下午</p>          </div><h2 id="基本介绍">1、基本介绍</h2><a class="btn" href="https://www.bilibili.com/video/BV1j64y1s7Qp?spm_id_from=333.788.videopod.episodes&vd_source=33b50a4dd201d7564e6e63d321809ce9&p=2"  title="学习视频" target="_blank">学习视频</a><h3 id="abaqus的基本功能">1.1 Abaqus的基本功能</h3><ol type="1"><li>计算结构的力学性能——&gt;结构场：静力学动力学（线性非线性）冲击断裂|复材等</li><li>计算结构的热力学性能——&gt;温度场+结构场：稳态、瞬态、线性、非线性</li><li>计算流体的动力学性能——&gt;流场：流速、压力、温度、稳态、瞬态</li><li>计算结构的电磁场性能——&gt;电场/磁场：电感、电容、磁通量、涡流等</li><li>计算结构的NVH性——&gt;结构场+声场：声压、声功率等</li><li>计算耦合场性能——&gt;热结构耦合、热流耦合、热电耦合、流固耦合</li><li>计算结构的优化——&gt;参数优化、非参数优化</li></ol><h3 id="文件系统">1.2 文件系统</h3><ol type="1"><li><strong>数据库文件</strong><ol type="1"><li>模型数据库（.cas）：在Abaqus/CAE中直接打开，包含几个模型、网格、载荷信息及分析任务等；</li><li>结果数据库文件（.odb）：可在Abaqus/CAE中直接打开，也可输入到CAE文件中作为不见或模型，包含在<code>分析步模块</code>中定义的场变量和历史变量输出结果，可以由可视化模块打开。</li></ol></li><li><strong>输入文件</strong><ol type="1"><li><strong>inp文件</strong>：文本文件，可在作业(Job)模块中提交任务时或单击分析作业管理器中的WriteInput按钮在工作目录中生成。Inp文件可以输入模型，也可以由ABAQUSCommand直接运行，inp文件输入的模型只包含有限元模型而无几何模型；</li><li><strong>pes文件</strong>：参数更改后重新的inp文件；</li><li><strong>Par文件</strong>：参数更改后重写的以参数形式运行的inp文件。</li></ol></li><li><strong>日志文件</strong>：Log文件：文本文件，运行ABAQUS的日志。</li><li><strong>数据文件</strong>：Dat文件：文本文件，记录数据和参数检查、单元质量检查等信息，包含预处理inp文件产生的错误和警告信息。包含用户定义的ABAQUS/standard输入数据，ABAQUS/Explicit的结果不会写入其中。</li><li><strong>信息文件</strong><ol type="1"><li><strong>MSG文件</strong>：记录计算过程中的平衡迭代次数、参数设置、计算时间、错误与警告信息等；</li><li><strong>Ipm文件</strong>：气动ABAQUS、CAE分析时开始写入，记录从ABAQUS/Standard或ABAQUS/Explicit到ABAQUS、CAE的过程日志；</li><li><strong>Prt文件</strong>：模型的部件或装配信息；</li><li><strong>Pac文件</strong>：模型信息，仅用于ABAQUS/Explicit。</li></ol></li><li><strong>状态文件</strong><ol type="1"><li><strong>Sta文件</strong>：文本文件，包含分析过程信息；</li><li><strong>Abq文件</strong>：仅用于ABAQUS/Explicit，记录分析、继续和恢复命令；</li><li><strong>Stt文件</strong>：运行数据检查时产生的文件；</li><li><strong>Psr文件</strong>：文本文件，参数化分析要求的输入结果；</li><li><strong>Sel文件</strong>：用于结果选择，仅用于ABAQUS/Explicit。</li></ol></li><li><strong>模型文件</strong>：MDL文件：ABAQUS/Standard与ABAQUS/Explicit中运行数据产生的文件。</li><li><strong>保存命令的文件</strong><ol type="1"><li><strong>Jnl文件</strong>：文本文件，包含于复制已存储的模型数据库的ABAQUS/CAE命令</li><li><strong>Rpy文件</strong>：记录运行一次ABAQUS/CAE所所运用的所有命令</li><li><strong>Rec文件</strong>：包含用于恢复内存中模型数据库的ABAQUS/CAE命令</li></ol></li><li><strong>重启动文件</strong>：Res文件：使用step功能模块进行定义</li><li><strong>脚本文件</strong>：Psf文件：用户定义参数化研究时需要创建的文件</li><li><strong>临时文件</strong><ol type="1"><li><strong>Ods文件</strong>：记录长输出变量的临时运算结果，运行后自动删除</li><li><strong>lck文件</strong>：用于阻止并发写入输出数据库，关闭输出数据库时自动删除</li></ol></li></ol><blockquote><p>在Part导入模块时尽量不要导入igs文件，igs只会包含表面信息。</p></blockquote><h3 id="模块介绍">1.3 模块介绍</h3><ol type="1"><li><strong>Part</strong>：进行零部件建模(3D、2D、轴对称)、模型编辑及修复(去除烂面、抽取中面、模型切割等)</li><li><strong>Property</strong>；创建材料以及截面，完成属性的指派</li><li><strong>Assembly</strong>：组件装配体用于后续分析</li><li><strong>Step</strong>：创建分析步及定义输出</li><li><strong>Interaction</strong>：创建相互作用，包括接触、耦合、弹簧单元、质量单元、焊点等</li><li><strong>Load</strong>：施加载荷、约束以及模型初始条件</li><li><strong>Mesh</strong>：进行网格划分以及单元类型设定</li><li><strong>Optinizatio</strong>n：创建优化任务</li><li><strong>Job</strong>：创建作业以及求解</li><li><strong>Visualization</strong>：可视化后处理</li><li><strong>Sketch</strong>：创建草图，可用于零部件建模</li></ol><h3 id="单位制问题">1.4 单位制问题</h3><p>最常用的单位又<code>mm-T-s</code>和<code>m-kg-s</code>两种</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250210165813.png"></p></div><h3 id="操作技巧">1.5 操作技巧</h3><ol type="1"><li><code>ctrl+shift+中键</code>：移动</li><li><code>ctrl+shift+左键</code>：旋转</li><li><code>ctrl+shift+右键</code>：缩放</li></ol><h2 id="part模块">2、Part模块</h2><a class="btn" href="https://www.bilibili.com/video/BV1j64y1s7Qp?spm_id_from=333.788.videopod.episodes&vd_source=33b50a4dd201d7564e6e63d321809ce9&p=3"  title="学习视频" target="_blank">学习视频</a><p>选择面或者线时：要按住<code>Alt</code>键</p><h2 id="属性模块">3、属性模块</h2><a class="btn" href="https://www.bilibili.com/video/BV1F7NbeXEtq/?spm_id_from=333.337.search-card.all.click&vd_source=33b50a4dd201d7564e6e63d321809ce9"  title="ABAQUS 属性模块详细教程" target="_blank">ABAQUS 属性模块详细教程</a><p>属性界面功能</p><ol type="1"><li>设置材料特性</li><li>设计界面特性</li><li>定义弹簧、阻尼器和实体表面壳等</li></ol><p>材料属性三步曲</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213142620.png"></p></div><blockquote><p>一定要注意单位问题</p></blockquote><h3 id="创建材料">3.1 创建材料</h3><p>属性获取</p><ul><li>论文</li><li>力学性能试验</li><li>《有限元常用材料参数手册》</li><li>https://www.matweb.com/</li></ul><p>可在导入的材料库中双击添加</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213145331.png"></p></div><h3 id="创建截面">3.2 创建截面</h3><p>abaqus不能将材料直接赋予给模型，需要先创建包含材料属性的截面，再将截面属性分配给模型区域。</p><div class="note note-info">            <p>常用截面类型</p>          </div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213145659.png"></p></div><ul><li>实体：用于定义实体的截面特性，一般选用的类型为均质实体；</li><li>壳：用于定义壳体的截面特性，常用类型为均质和膜等；</li><li>梁：用于定义梁的截面特性，包括梁和桁架，在创建梁的截面特性前，需要先定义梁的横截面形状和尺寸。</li></ul><blockquote><p>注意：对于均质壳截面，实际可以把厚度显示出来，正常显示的位置为中间层，在装配时要考虑壳的厚度。</p></blockquote><h3 id="指定截面">3.3 指定截面</h3><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250213150230.png"></p></div><h2 id="装配">4、装配</h2><h2 id="分析步">5、分析步</h2><h3 id="分析步的类型及特点">5.1 分析步的类型及特点</h3><ol type="1"><li>静力通用<ol type="1"><li>模拟换那么加载下的相应</li><li>不考虑惯性和阻尼效应[^1]</li><li>重力等简单载荷</li></ol></li><li>动力隐式<ol type="1"><li>模拟动态载荷下的响应</li><li>复杂集合材料行为的高度非线性问题，如接触和塑性变形</li><li>汽车碰撞、金属成型</li></ol></li><li>动力显式<ol type="1"><li>模拟快速动态事件</li><li>材料和集合非线性问题复杂变形和接触问题</li><li>高速冲击、爆炸</li></ol></li></ol><h4 id="静力通用">5.1.1 静力通用</h4><p>此设置中的<strong>时间长度并非实际物理意义上的时间长度</strong>，类似于份的概念，比如这里有1份</p><p>若模拟过程中需要有大变形，则需<strong>打开几何非线性</strong></p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250216153023-2025-02-16.png"></p></div><p>图中设置的增量含义：</p><ul><li>最大步数为100：如果在迭代过程中迭代步达到100还没有收敛就会报错，提示用户模型的收敛性太差了。</li><li>增量不步初始大小，表示模拟会先试用初始步进行迭代，如果没有收敛会使用二分法逐渐减半，直到达到最小还没有收敛就会报错。</li></ul><p>在指派网格单元类型时，需要使用<code>隐式算法</code></p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250216153620-2025-02-16.png"></p></div><blockquote><p>动力隐式分析步与静力通用分析步设置时间长度、最大步数、增量以及单元格类型指派含义相同，但会默认打开几何非线性</p></blockquote><h4 id="动力显式">5.1.2 动力显式</h4><p>此设置中<strong>时间长度具有实际物理意义</strong>，比如说一个爆炸行为在0.01s完成，这里的时间步长就要设置为0.01s。</p><p>增量是通过软件在计算过程中会自动调整，一般可不设置。</p><p>在动力显式算法中有个重要概念为<code>质量缩放</code></p><ul><li><strong>含义</strong>：缩放密度改变计算时间</li><li><strong>目的</strong>：提高计算效率</li><li><strong>类型</strong><ul><li>按系数质量缩放：若设置为100，质量就会增大100倍，<spanclass="math inline">\(\sqrt{100}=10\)</span>倍的时间缩放。若我们不知道模型的质量缩放系数在多少合适，只知道在0.1s内就算完啦，可以使用目标时间质量缩放。</li><li>按目标时间质量缩放：若设置为<spanclass="math inline">\(1e^{-5}\)</span>，即增量步小于这个值时，质量会增大</li></ul></li></ul><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250216154845-2025-02-16.png"></p></div><p>在指派网格单元类型时需要选择<code>Explicit</code>显式算法，保证算法的统一</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250216155046-2025-02-16.png"></p></div><h3 id="几何非线性">5.2 几何非线性</h3><ol type="1"><li>线性：线性摄动分析步适合用于小变形问题。通过线性化处理来简化计算过程。</li><li>非线性：几何非线性分析步考虑大变形效应，适用于材料或结构产生大变形</li></ol><h3 id="模拟设置">5.3 模拟设置</h3><ol type="1"><li>选择分析步</li><li>设置时间增量</li><li>质量缩放（针对于动力显式算法）</li><li>选择单元类型</li></ol><h2 id="载荷">6、载荷</h2><h3 id="幅值曲线">6.1 幅值曲线</h3><p>在载荷施加中共有11个幅值曲线，实际加载力/位移=<code>load</code>(载荷)*<code>amplitude</code>(幅值)，<code>step time</code>对应每个分析步时间，<code>total time</code>对应总时间。</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220083328.png"></p></div><h4 id="ramp">6.1.1 Ramp</h4><p>默认为从0时刻幅值为0线性插值到最后时刻幅值为1</p><h4 id="表格幅值曲线tabular">6.1.2 表格幅值曲线：(tabular)</h4><p>表格幅值曲线根据用户输入每个时刻的幅值大小，线性插值。</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220083812.png"></p></div><h4 id="等间距幅值曲线equally-spaced">6.1.3 等间距幅值曲线：(Equallyspaced)</h4><p>等间距幅值曲线需要给出一个固定时间间隔，在时间间隔内需要给出初始时刻及其幅值大小。然后进行线性插值。</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220083927.png"></p></div><h4 id="周期幅值曲线periodic傅里叶级数">6.1.4周期幅值曲线：(Periodic)（傅里叶级数）</h4><p>定义如下：</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084314.png"></p></div><p>正弦</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084156.png"></p></div><p>余弦</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084215.png"></p></div><p>混合</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084225.png"></p></div><h4 id="调制幅值曲线modulated">6.1.5 调制幅值曲线：(Modulated)</h4><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084352.png"></p></div><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084421.png"></p></div><h4 id="衰减幅值曲线decay">6.1.6 衰减幅值曲线：(Decay)</h4><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084443.png"></p></div><h4 id="依赖于解幅值曲线solution-dependent">6.1.7依赖于解幅值曲线：(Solution dependent)</h4><p>数据由初始值、最小值和最大值组成。振幅从初始值开始，然后根据解的进度进行修改，但需根据最小值和最大值进行修改。最大值通常是用于结束分析的控制机制。该方法用于超塑成型分析的蠕变应变速率控制。</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084553.png"></p></div><h4 id="平滑分析步幅值曲线smooth-step">6.1.8 平滑分析步幅值曲线(Smoothstep)</h4><p>用于定义旨在从一个幅度值平滑地上升或下降到另一个幅度值。该定义不能用于在一组数据点之间进行平滑插值</p><div style="width: 80%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/vscode/20250220084628.png"></p></div><h4 id="激励器幅值曲线actuator">6.1.9 激励器幅值曲线：(Actuator)</h4><p>激励器振幅的当前值可以在任何给定时间从与逻辑建模程序的共同仿真导入（请参阅关于共同仿真）。激励器振幅定义上指定的名称用作执行器名称，用于共同仿真目的。因此，在给定时间，每个激励器都与一个实数（振幅的当前值）关联。与任何振幅定义一样，用户指定的名称可以与任何可以参考振幅的Abaqus功能结合使用。</p><h4 id="谱幅值曲线spectrum">6.1.10 谱幅值曲线：(Spectrum)</h4><p>多断幅值，以及幅值的一阶二阶导数的变化情况</p><h4 id="用户幅值曲线user">6.1.11 用户幅值曲线：（User）</h4><p>用户幅值曲线即自行编写UAMP或者VUAMP子程序来定义。且给出变量数。</p><h4 id="psd定义幅值曲线psd-definition">6.1.12 PSD定义幅值曲线:（PSDDefinition）</h4><p>在随机响应分析步骤中，使用PSD定义方法定义随机负载的频率依赖性。选择功率可直接以功率单位定义频率功能。选择“分贝”以分贝为单位定义频率函数。如果将使用频率函数以g为单位定义基本运动，请选择“重力”（基本运动）。如果选择这些单位，则必须定义重力加速度。如果选择了分贝单位，请为参考功率输入一个值。如果选择了重力单位，请输入参考重力值。</p><p>在数据表中，输入或导入该函数的数据值：</p><p>（1）函数的实部和虚部，（以分贝为单位或单位每频率）</p><p>（2）频率，周期/时间或频段号（对于分贝单位）。</p><p>另外：切换上在外部用户子程序指定数据，你可以提供PSD的用户子程序来定义幅值曲线。</p><h2 id="参考">参考</h2><p>[^1]任何振动系统在振动中，由于外界作用（如流体阻力、摩擦力等）和/或系统本身固有的原因引起的振动幅度逐渐下降的特性，以及此一特性的量化表征。</p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Abaqus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>学习笔记</tag>
      
      <tag>Abaqus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust学习笔记</title>
    <link href="/2025/02/08/037%20Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/08/037%20Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 晚上</p>          </div><h1 id="安装与配置">1、安装与配置</h1><h2 id="安装">1.1 安装</h2><p><ahref="https://www.rust-lang.org/zh-CN/learn/get-started">官网下载</a></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028185911269.png"alt="image-20241028185911269" /><figcaption aria-hidden="true">image-20241028185911269</figcaption></figure><p>双击打开会弹出命令行窗口，直接回车即可。</p><p>查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup --version<br></code></pre></td></tr></table></figure><p>查看rust版本环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup show<br></code></pre></td></tr></table></figure><p>安装生产版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup install nightly<br></code></pre></td></tr></table></figure><p>切换版本环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup default nightly<br>or<br>rustup default stable<br></code></pre></td></tr></table></figure><h2 id="编译命令">1.2 编译命令</h2><p>文件编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustc 被编译文件名 -o 输出文件名<br>rustc main.rs -o hello<br></code></pre></td></tr></table></figure><h1 id="包管理">2、包管理</h1><h2 id="包管理工具cargo">2.1 包管理工具<code>Cargo</code></h2><p><strong><u>创建项目</u></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo new project_name<br>cargo new --lib project_lib_name<br></code></pre></td></tr></table></figure><p><strong><u>构建项目</u></strong></p><p>会出现一个名为<code>target</code>文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>cargo build --release  这个性能较好<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028191914203.png"alt="image-20241028191914203" /><figcaption aria-hidden="true">image-20241028191914203</figcaption></figure><p><strong><u>检测</u></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo check<br></code></pre></td></tr></table></figure><p><strong><u>运行/测试</u></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo run<br>cargo <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><strong><u>项目结构</u></strong></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028190911111.png"alt="image-20241028190911111" /><figcaption aria-hidden="true">image-20241028190911111</figcaption></figure><h2 id="cargo.toml文件">2.2 Cargo.toml文件</h2><ul><li>package<ul><li>设置版本名</li><li>版本等</li></ul></li><li>dependencies<ul><li>设置依赖</li><li>[build-dependencies]列出了在构建项目时需要的依赖项</li><li>[dev-dependencies]列出了只在开发时需要的依赖项</li></ul></li></ul><h2 id="加载库">2.3 加载库</h2><p>填写依赖项后保存会自动加载依赖项</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028192529489.png"alt="image-20241028192529489" /><figcaption aria-hidden="true">image-20241028192529489</figcaption></figure><p>推荐使用<code>cargo-edit</code></p><p>安装<code>cargo-edit</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo install cargo-edit<br></code></pre></td></tr></table></figure><p>添加库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add dependency_name<br></code></pre></td></tr></table></figure><p>安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add dependency_name@1.2.3<br></code></pre></td></tr></table></figure><p>添加开发时用的依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add --dev dev_dependency_name<br></code></pre></td></tr></table></figure><p>添加构建时用的依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add --build build_dependency_name<br></code></pre></td></tr></table></figure><p>删除库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo <span class="hljs-built_in">rm</span> dependency_name<br></code></pre></td></tr></table></figure><h2 id="设置国内源">2.4 设置国内源</h2><p>推荐使用<code>rsproxy</code></p><p>在<code>C:\Users\23984\.cargo\.config</code></p><p>但是我没有找到</p><h1 id="基本类型">3、基本类型</h1><h2 id="变量与不可变性">3.1 变量与不可变性</h2><ol type="1"><li>使用<code>let</code>声明变量</li><li>后置类型定义</li><li>变量使用蛇形命名法，枚举和结构体命名使用帕斯卡命名法</li><li>强制类型转换<code>Casting a Value to a Different Type</code></li><li>使用<code>mut</code>关键词将变量置为可变</li><li></li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028194646626.png"alt="image-20241028194646626" /><figcaption aria-hidden="true">image-20241028194646626</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028194723176.png"alt="image-20241028194723176" /><figcaption aria-hidden="true">image-20241028194723176</figcaption></figure><h2 id="常量与静态变量">3.2 常量与静态变量</h2><p><strong><u>常量</u></strong></p><ol type="1"><li>常量的值在编译时已知，必须指定类型与值</li><li>与C不同，Rust的const常量值被直接嵌入到生成的底层机器代码中，而不是简单字符替换</li><li>常量名与静态变量名必须全部大写，单词之间加下划线</li><li>常来那个的作用域是块级作用域，只在声明他们的作用域内可见</li></ol><p><strong><u>static静态变量</u></strong></p><ol type="1"><li>在运行时分配内存</li><li>并不是不可变的，可使用unsafe修改</li><li>静态变量的生命周期为整个程序的运行时间</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028200046092.png"alt="image-20241028200046092" /><figcaption aria-hidden="true">image-20241028200046092</figcaption></figure><h2 id="基本数据类型">3.3 基本数据类型</h2><ul><li><code>Integer types</code> ： 默认推断为<code>i32</code><ul><li>i8、i16、i32、i64、i128</li></ul></li><li><code>Unsigned Integer types</code><ul><li>u8、u16、u32、u64、u128</li></ul></li><li>platform-specific integer type（由平台决定）<ul><li>usize</li><li>isize</li></ul></li><li>Float Types<ul><li>f32与f64</li><li>尽量用f64</li></ul></li><li>Boolean Values<ul><li>true</li><li>false</li></ul></li><li>Character Types<ul><li>Rust支持Unicode字符</li><li>表示char类型使用单引号</li></ul></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">u32</span>::MAX);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">u32</span>::MIN);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">usize</span>::MAX);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">usize</span>::MIN);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;isize is &#123;&#125; bytes&quot;</span>,std::mem::size_of::&lt;<span class="hljs-type">isize</span>&gt;());<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028200813404.png"alt="image-20241028200813404" /><figcaption aria-hidden="true">image-20241028200813404</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028200822258.png"alt="image-20241028200822258" /><figcaption aria-hidden="true">image-20241028200822258</figcaption></figure><p>该2.4了</p><p>https://www.bilibili.com/video/BV15y421h7j7?spm_id_from=333.788.videopod.episodes&amp;vd_source=33b50a4dd201d7564e6e63d321809ce9&amp;p=7</p><h2 id="元祖和数组">3.4 元祖和数组</h2><p>相同点：</p><ul><li>都是复合类型Compound Types，而Vec和Map都是集合类型CollectionTypes</li><li>元组和数组长度都是固定的</li></ul><p>不同点：</p><ul><li>Tuples：不同类型的数据类型</li><li>Arrays：同一类型的数据类型</li></ul><p><u><strong>数组：</strong></u></p><ul><li><p>创建方式</p><ul><li><p><code>[a,b,c]</code></p></li><li><p><code>[value;size]</code></p></li></ul></li><li><p>获取元素<code>arr[index]</code></p></li><li><p>获取长度<code>arr.len()</code></p></li></ul><p><strong><u>元组：</u></strong></p><ul><li>获取数据：tup.index</li><li>没有len()</li><li>默认返回值<code>Emoty Tuple()</code></li></ul><blockquote><ul><li>元组和数组都是可以直接打印的；<code>println!("&#123;:?&#125;",arr);</code></li><li>赋值默认都是<code>copy</code>操作；</li></ul></blockquote><p>string赋值时是<code>move</code>操作，会转移所有权，不能再打印。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241029191648931.png"alt="image-20241029191648931" /><figcaption aria-hidden="true">image-20241029191648931</figcaption></figure><h1 id="ownership与结构体枚举">4、Ownership与结构体、枚举</h1><h2 id="rust的内存管理模型">4.1 Rust的内存管理模型</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241029191949573.png"alt="image-20241029191949573" /><figcaption aria-hidden="true">image-20241029191949573</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241029192441011.png"alt="image-20241029192441011" /><figcaption aria-hidden="true">image-20241029192441011</figcaption></figure><p><strong><u>1、所有权系统</u></strong></p><ul><li>每个值都有一个与之关联的变量，该变量是该值的所有者</li><li>同一时间只能有一个所有者</li><li>当所有者离开作用域时，它拥有的值将被丢弃</li></ul><p><strong><u>2、RAII原则</u></strong></p><p>资源获取即初始化原则。当对象被创建时，它会获取必要的资源，并在生命周期结束时释放这些资源。</p><blockquote><p>https://blog.csdn.net/CrystalLawson/article/details/138190719</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习基础</title>
    <link href="/2025/02/08/036%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E5%90%B4%E6%81%A9%E8%BE%BE%EF%BC%89/"/>
    <url>/2025/02/08/036%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E5%90%B4%E6%81%A9%E8%BE%BE%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 晚上</p>          </div><span class="label label-primary">梯度下降</span><span class="label label-info">线性回归</span><span class="label label-warning">学习率</span><hr /><a class="btn" href="https://github.com/kaieye/2022-Machine-Learning-Specialization"  title="Github资料" target="_blank">Github资料</a><h2 id="机器学习分类">1、机器学习分类</h2><p>分为监督学习和无监督学习</p><h3 id="监督学习">1.1 监督学习</h3><ul><li>定义：在给定的数据集中学习出一个函数，当输入新的x时，能够预测输出结果y。</li><li>两种主要类型：回归和分类</li><li>学习技术：逻辑回归、线性回归、决策树和神经网络。</li></ul><h3 id="无监督学习">1.2 无监督学习</h3><ul><li>无监督学习算法会使用未标记的数据进行训练。</li><li>无监督学习可用于将新闻文章分类</li><li>学习技术：集群、关联规则学习、概率密度和降维</li></ul><h3 id="区别">1.3 区别</h3><ul><li>监督学习是一种目的明确的训练方式，你知道得到的是什么；而<strong>无监督学习则是没有明确目的的训练方式，你无法提前知道结果是什么</strong>。</li><li>监督学习由于目标明确，所以可以衡量效果；而<strong>无监督学习几乎无法量化效果如何</strong>。</li></ul><div class="note note-info">            <ol type="1"><li><ahref="https://aws.amazon.com/cn/compare/the-difference-between-machine-learning-supervised-and-unsupervised/">有监督学习和无监督学习有什么区别</a></li><li><ahref="https://easyai.tech/ai-definition/unsupervised-learning/">无监督学习– Unsupervised learning | UL</a></li></ol>          </div><h2 id="线性回归">2、线性回归</h2><h3 id="定义">2.1 定义</h3><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161210625.png"></p></div><p>任何预测数字之间的监督学习模型都可被称作回归问题。线性回归时回归模型中的一个用例。模型可以有无限可能的输出。</p><p>Training : Data used to train the model</p><ul><li>x : 输入</li><li>y : 输出</li><li>m : 训练集的数量</li><li>(x,y) : 单个训练样本</li><li>$ (x<sup>{i},y</sup>{i}) $ : 第i个训练样本fs</li><li><span class="math inline">\(\hat{y}\)</span> : 预测值</li><li>f : 函数模型</li><li><span class="math inline">\(\hat{y}-y\)</span> : error</li></ul><blockquote><p>另一种机器学习类别是分类，分类问题时预测类别或者离散类别，如预测图片是猫还是狗。在分类问题中，只有少量可能的输出。</p></blockquote><h3 id="损失函数">2.2 损失函数</h3><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161303796.png"></p></div><p>模型 <span class="math display">\[f_{w,b}(x)=wx+b\]</span> 参数为w和b <span class="math display">\[J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}\bigl(f_{w,b}\bigl(x^{(i)}\bigr)-y^{(i)}\bigr)^{2}\]</span></p><blockquote><p><span class="math inline">\(J(w,b)\)</span>最小化</p></blockquote><p>为方便举例，假设只有一个参数w。如图所示，当参数w为1时，J(w)时是最小的</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161301562.png"></p></div><p>如果参数有w和b则</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161303421.png"></p></div><p>或者</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161307927.png"></p></div><p>完整对应关系</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161309467.png"></p></div><h2 id="梯度下降">3、梯度下降</h2><p>有时我们的损失值J并不是规则的，如图所示，存在诸多小峰和低谷。机器学习的目标就是找到最低点，如何快速找到最低点至关重要。</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161313907.png"></p></div><p>假设你站在一个山坡上，如何找到最快的下坡路线？即朝哪个方向迈出一步？每走一步都要再次确认下一步往哪迈。</p><blockquote><p>实现梯度下降</p></blockquote><p><span class="math display">\[w=w-\alpha\frac\partial{\partial w}J(w,b)\]</span></p><p><span class="math display">\[b=b-\alpha\frac\partial{\partial b}J(w,b)\]</span></p><p>学习率<spanclass="math inline">\(\alpha\)</span>决定下坡的步数大小</p><blockquote><p>对于某个特定步的两个量(w,b)的更新，<spanclass="math inline">\(\frac\partial{\partialw}J(w,b)\)</span>要一致。</p></blockquote><p><span class="math display">\[tmp_w = w-\alpha\frac\partial{\partial w}J(w,b)\]</span></p><p><span class="math display">\[tmp_b = b-\alpha\frac\partial{\partial b}J(w,b)\]</span></p><p><span class="math display">\[w = tmp_w\]</span></p><p><span class="math display">\[b = tmp_b\]</span></p><p><strong>直观理解梯度下降</strong></p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185034.png"></p></div><h3 id="学习率">3.1 学习率</h3><p>学习率的值至关重要，太小和太大会产生什么影响呢？</p><ul><li>太小学习很慢</li><li>太大可能会离最小值越来越远，导致发散</li></ul><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185505.png"></p></div><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185512.png"></p></div><p>固定的学习率，下降的步长会越来越小，因为导数在变小</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185832.png"></p></div><h3 id="线性回归中的梯度下降">3.2 线性回归中的梯度下降</h3><p><span class="math display">\[f_{w,b}(x)=wx+b\]</span></p><p><span class="math display">\[J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-y^{(i)})^{2}\]</span></p><p><span class="math display">\[w=w-\alpha\frac{\partial}{\partial w}J(w,b)\]</span></p><p><span class="math display">\[b=b-\alpha\frac{\partial}{\partial b}J(w,b)\]</span></p><p>而</p><p><span class="math display">\[\frac{\partial}{\partial w}J(w,b) =\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}\big(x^{(i)}\big)-y^{(i)})x^{(i)}\]</span></p><p><span class="math display">\[\frac{\partial}{\partial w}J(w,b) =\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}\big(x^{(i)}\big)-y^{(i)})\]</span></p><p>则</p><p><span class="math display">\[w=w-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-y^{(i)}) x^{(i)}\]</span></p><p><span class="math display">\[b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-y^{(i)})\]</span></p><blockquote><p>梯度下降只能找到局部最小值，而不能找到全局最小值。对于凸函数只有一个最小值，梯度下降是适用的</p></blockquote><h2 id="多元线性回归">4、多元线性回归</h2><p>多元线性回归模型中有多个特征值。比如房间的价格Y不止与面积X1有关，还与地段X2、房间数X3等有关。此时的X实际为一个向量[X1,X2,X3]。此时模型可以定义为</p><p><span class="math display">\[f_{\overrightarrow{w},b}(\overrightarrow{X})=w_{1}X_{1}+w_{2}X_{2}+w_{3}X_{3}+b\]</span></p><p><span class="math display">\[\overrightarrow{w} = [X1,X2,X3]\]</span></p><p><span class="math display">\[f_{\overrightarrow{w},b}(\overrightarrow{X})=\overrightarrow{w}\cdot\overrightarrow{X}+ b\]</span></p><p><strong>向量化</strong></p><p><spanclass="math display">\[f=w[0]*x[0]+w[1]*x[1]+w[2]*x[2]+b\]</span>代码表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,n):<br>  f = f + w[j] * x[j]<br>f = f + b<br><br>// 也可以使用numpy，这种方式计算效率高，因为numpy可以并行计算<br>f = np.dot(w,x) + b<br></code></pre></td></tr></table></figure><p><strong>向量中的梯度算法</strong></p><a class="btn" href="https://www.bilibili.com/video/BV1Bq421A74G?p=24&vd_source=33b50a4dd201d7564e6e63d321809ce9"  title="视频讲解" target="_blank">视频讲解</a><p>多个特征值</p><p><span class="math display">\[\begin{align*} \text{repeat}&amp;\text{ until convergence:} \; \lbrace\newline\;&amp; w_j = w_j -  \alpha \frac{\partial J(\mathbf{w},b)}{\partial w_j}\tag{5}  \; &amp; \text{for j = 0..n-1}\newline&amp;b\ \ = b -  \alpha \frac{\partial J(\mathbf{w},b)}{\partial b} \newline \rbrace\end{align*}\]</span></p><p><span class="math display">\[\frac{\partial J(\mathbf{w},b)}{\partialw_j}=\frac{1}{m}\sum_{i=0}^{m-1}(f_{\mathbf{w},b}(\mathbf{x}^{(i)})-y^{(i)})x_j^{(i)}\]</span></p><p><span class="math display">\[\frac{\partial J(\mathbf{w},b)}{\partialb}=\frac{1}{m}\sum_{i=0}^{m-1}(f_{\mathbf{w},b}(\mathbf{x}^{(i)})-y^{(i)})\]</span></p><h3 id="梯度下降特征放缩">4.1 梯度下降:特征放缩</h3><p>如果两个特征值在量级上相差较大，如房间数和面积，房间数一般在1<sub>5，而面积在100</sub>150，这时绘制出的w1和w2的J(w,b)呈现椭圆形，在梯度下降时会来回反弹。最有利的方式是将特征值进行放缩，使得两个特征值在相同量级。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240924084546.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><h3 id="如何缩放">4.2 如何缩放</h3><p><strong>最值归一化</strong></p><p>除以特征值取值的最大值，数据会映射到0~1之间。 <spanclass="math display">\[x_{scale}=\frac{x-x_{min}}{x_{max}-x_{min}}\]</span>最值归一化只适用于有明显边间的情况。</p><p><strong>均值归一化</strong></p><p><span class="math display">\[x_{scale}=\frac{x-\mu}S\]</span>其中<span class="math inline">\(x\)</span>为要归一化的值，<spanclass="math inline">\(x_{scale}\)</span>为归一化之后的值。<spanclass="math inline">\(\mu\)</span> 为样本的平均值，<spanclass="math inline">\(S\)</span>为样本的标准差。</p><p><strong>均值方差归一化</strong></p><p><span class="math display">\[Y_i=\sigma\cdot X_i+\mu \]</span>其中，X为标准正态分布中的元素，<spanclass="math inline">\(\mu\)</span>为平均值，<spanclass="math inline">\(\sigma\)</span>为标准差。</p><h3 id="学习曲线">4.3 学习曲线</h3><p>可以判断何时停止训练特定模拟</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240927140525.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><h3 id="学习率选择">4.4 学习率选择</h3><p>一个小的学习率，J应该是持续减小的。在选择学习率时，可从小的开始，每次增加10倍改变，如0.001、0.01、0.1、1、10...</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>大模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>吴恩达</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI生成代码</title>
    <link href="/2025/02/08/035%20AI%E9%97%AE%E7%AD%94%E5%BD%A2%E5%BC%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/02/08/035%20AI%E9%97%AE%E7%AD%94%E5%BD%A2%E5%BC%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 晚上</p>          </div><h2 id="ai问答形式生成代码">AI问答形式生成代码</h2><p>今天无意间在b站看到一位up主用AI写代码的过程，无比惊讶，不需要会前端，就能使用问答的形式生成好看的前端页面。我也亲自体验了一下。</p><p>https://v0.dev/chat/</p><p>这是我使用这个网站生成的前端页面，但是每天有限制次数，<u>一定要谨慎使用，想好了问题再问。</u></p><h2 id="预览">预览</h2><p>https://v0.dev/chat/GvO3hYBppbW</p><h2 id="问答生成">问答生成</h2><p>有样学样，首先给他生成网站的目的及类型。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> want <span class="hljs-selector-tag">to</span> make an app for university applicants. <span class="hljs-selector-tag">To</span> learn about major. <span class="hljs-selector-tag">I</span> want <span class="hljs-selector-tag">to</span> <span class="hljs-attribute">display</span> <span class="hljs-selector-tag">a</span> list of major, and their coresponging subject, and comparisons between majors. Now generate the major list page.<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143611587.png"alt="image-20241123143611587" />​</p><p>但显示的内容过于多，而不是自己想要的，我想要在主页面能呈现更多的专业</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">but </span>make it more concise, <span class="hljs-keyword">because </span>there are <span class="hljs-keyword">bundreds </span>of majors i want to <span class="hljs-keyword">display </span>in the home page<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143748042.png"alt="image-20241123143748042" />​</p><p>它还贴心的加上了搜索功能，但是我想着美化一下，添加一个主题颜色</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-keyword">use</span> clean <span class="hljs-built_in">color</span> themes<br></code></pre></td></tr></table></figure><p>但是单词打错了，<code>clear</code>写成了<code>clean</code>，它把所有颜色删除了。当时我没意识到，只是让它在搜索栏右侧添加一个筛选按钮，可以筛选分类。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">add </span>a category <span class="hljs-keyword">button </span><span class="hljs-built_in">at</span> search <span class="hljs-keyword">box </span>right, I can choose <span class="hljs-keyword">different </span>category<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144043521.png"alt="image-20241123144043521" />​</p><p>还是不甘心，加点颜色主题吧</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-keyword">use</span> gradient <span class="hljs-built_in">color</span> theme<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144129571.png"alt="image-20241123144129571" />​</p><p>但这个紫色系不是我想要的，想要个蓝色系的。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">use gradient <span class="hljs-keyword">color</span> theme <span class="hljs-keyword">about</span> blue<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144236324.png"alt="image-20241123144236324" />​</p><p>生成一个详情页面</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">generate</span> a <span class="hljs-keyword">new</span> page <span class="hljs-keyword">for</span> major detail, <span class="hljs-keyword">this</span> page should contain subjects related to <span class="hljs-number">10</span> majors.<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144410492.png"alt="image-20241123144410492" />​</p><p>这个页面有些简单，增加一下问答功能</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">detail page should have comment <span class="hljs-keyword">and</span> question / answer seciotn <span class="hljs-keyword">below</span><br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144451374.png"alt="image-20241123144451374" />​</p><p>但是推荐的专业里面推荐的是大分类，想改成大分类中的小分类</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The recommended major is <span class="hljs-keyword">the</span> minor major <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> larger category <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> detail page<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144604904.png"alt="image-20241123144604904" />​</p><p>生成专业对比页面</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">generate a new page about major <span class="hljs-built_in">compare</span>. Side-<span class="hljs-keyword">by-side </span><span class="hljs-built_in">compare</span> <span class="hljs-number">2</span> major majors interm of suject to study, related <span class="hljs-keyword">jobs, </span><span class="hljs-keyword">and </span>more. <span class="hljs-keyword">be </span>creative.<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144639352.png"alt="image-20241123144639352" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144650053.png"alt="image-20241123144650053" />​</p><p>还想优化一下，但是今日的生成次数用尽了。总之这个网站对我的冲击还是比较大的。一时间让我感觉自己之前学的东西都白费了，自己一天写的网站，它使用几分钟就能搞定，而且还美观。不得不惊叹目前AI发展的速度，自己还是要掌握一些核心技能，不然免不了被淘汰。</p><h2 id="全部页面">全部页面</h2><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143233687.png"alt="image-20241123143233687" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143249198.png"alt="image-20241123143249198" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143259159.png"alt="image-20241123143259159" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143337907.png"alt="image-20241123143337907" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143346607.png"alt="image-20241123143346607" />​</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI代码生成</tag>
      
      <tag>大模型</tag>
      
      <tag>v0.chat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在powershell上禁止运行脚本</title>
    <link href="/2025/02/08/034%20Powershell%E9%99%90%E5%88%B6/"/>
    <url>/2025/02/08/034%20Powershell%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 下午</p>          </div><p>在使用<code>tabby</code>运行<code>PowerShell</code>时，输入命令行<code>hexo s</code>出现如下报错</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/picgo/image-20250208144105189.png"alt="image-20250208144105189" /><figcaption aria-hidden="true">image-20250208144105189</figcaption></figure><p><strong>分析原因</strong></p><p><code>PowerShell</code>执行策略是<code>Restricted</code>。<code>Restricted</code> 执行策略不允许任何脚本运行。</p><p>查看执行策略<code>get-executionpolicy</code></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/picgo/image-20250208143829255.png"alt="image-20250208143829255" /><figcaption aria-hidden="true">image-20250208143829255</figcaption></figure><p><strong>解决方法</strong></p><p>管理员身份打开<code>PowerShell</code> 输入<code>set-executionpolicy remotesigned</code>更改执行策略</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/picgo/image-20250208143928799.png"alt="image-20250208143928799" /><figcaption aria-hidden="true">image-20250208143928799</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>powershell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Spalart-Allmaras Turbulence Model</title>
    <link href="/2024/07/30/033%20%E6%B9%8D%E6%B5%81%E6%A8%A1%E5%9E%8B%E4%B9%8BSpalart-Allmaras/"/>
    <url>/2024/07/30/033%20%E6%B9%8D%E6%B5%81%E6%A8%A1%E5%9E%8B%E4%B9%8BSpalart-Allmaras/</url>
    
    <content type="html"><![CDATA[<h1 id="历史发展">1、历史发展</h1><p>流体动力学中描述流体在外力作用下流动的主要控制方程是<strong>纳维-斯托克斯方程</strong>。这些方程的强大之处在于它们能够描述作用在流体上的任何力的影响以及由此产生的流动行为。然而，<em>它们不能针对每个系统或流量情况以封闭形式求解。</em></p><p>由于最早 1973 年提出的 ke 模型无法准确预测逆压力梯度 adverse pressuregradient 下的边界层运动，Spalart-Allmaras Model（1994）、（1998）以及（1994）分别被提出。</p><p>在物理学中，Spalart-Allmaras模型是一种单方程模型，可求解运动涡流湍流粘度的模拟输运方程。在其原始形式中，该模型实际上是一个低雷诺数模型，需要正确解析边界层的粘度影响区域（y+~1个网格）。它没有针对一般工业流动进行标定，对于一些自由剪切流，尤其是平面和圆形射流，确实会产生较大的误差。此外，不能依靠它来预测均匀、各向同性湍流的衰减。</p><h1 id="基本形式">2、基本形式</h1><p><spanclass="math display">\[\tau_{ij}=2\mu_t\left(S_{ij}-\frac{1}{3}\frac{\partialu_k}{\partial x_k}\delta_{ij}\right)-\frac{2}{3}\rhok\delta_{ij}\]</span></p><p>Spalart-Allmaras 湍流模型遵循一个描述运动粘度类变量（称为Spalart-Allmaras 变量）的动态方程：</p><p><span class="math display">\[\frac{\partial\bar{v}}{\partialt}+u_{j}\frac{\partial\bar{v}}{\partialx_{j}}=C_{b,1}(1-f_{t,2})\hat{S}\bar{v}-[c_{w,1}f_{w}-\frac{c_{b,1}}{\kappa^{2}}f_{t,2}](\frac{\bar{v}}{d})^{2}+\frac{1}{\sigma}[\frac{\partial}{\partialx_{j}}((v+\bar{v})\frac{\partial\bar{v}}{\partialx_{j}})+c_{b,2}\frac{\partial\bar{v}}{\partialx_{i}}\frac{\partial\bar{v}}{\partial x_{i}}]\]</span></p><p>该方程的目标是确定湍流涡流粘度，其由以下公式确定：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194639.png" /></p><p>在这些方程中，分子运动粘度为 𝜈 = μ/⍴，流体密度为 ⍴，μ是流体的分子动力粘度。模型中的其他参数以场点到最近壁 d的距离和涡度大小给出</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194722.png" /></p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194738.png" /></p><p>以下定义：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194758.png" /></p><p>从上面的定义中可以看出几个常量。这些常量定义如下：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194819.png" /></p><p>由于所考虑的系统以墙为界，因此沿着墙的表面有一个固定边界条件。其他边界条件可能会施加在系统的其他地方，尽管这些边界条件是否会干扰解决远离壁本身的涡流可能值得怀疑。最后，我们对远场Spalart-Allmaras 变量有以下条件：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194845.png" /></p><p>优点：</p><ol type="1"><li>降维可以降低问题的复杂性和整体模拟时间。</li><li>无需使用沿湍流的剪切层的局部厚度来计算长度尺度。</li><li>对于具有<strong>任意压力梯度</strong>的边界层流很有用。</li><li>稳健；对于低雷诺数 k - ε模型不收敛甚至发散的相对粗糙的网格，它可以给出合理的结果</li></ol><p>缺点：</p><ol type="1"><li>不适用于涉及喷射状自由剪切区域的应用</li><li></li></ol><h1 id="用途">3、用途</h1><h1 id="注意事项">4、注意事项</h1><p>参考：</p><ol type="1"><li>https://resources.system-analysis.cadence.com/blog/msa2024-what-is-the-spalart-allmaras-turbulence-model</li><li>https://www.cfd-online.com/Wiki/Spalart-Allmaras_model</li><li>https://www.youtube.com/watch?v=Xivc0EIGFQw</li><li>https://zhuanlan.zhihu.com/p/408434524</li></ol>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
      <tag>学习笔记</tag>
      
      <tag>湍流模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python自动执行fluent</title>
    <link href="/2024/07/30/032%20Python%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8Cfluent/"/>
    <url>/2024/07/30/032%20Python%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8Cfluent/</url>
    
    <content type="html"><![CDATA[<h1 id="tui-命令">TUI 命令</h1><p>TUI 命令包括 Fluent 中的全部设置，见上一篇 Fluent TUI 命令。</p><p>最重要的是要包含推出程序命令，即<code>exit ok</code></p><p>全部 TUI 命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs tui">; 1、读取网格文件<br>rc fluent.msh<br>mesh/check<br>mesh/quality<br><br><br>display mesh-outline<br><br>; 2、勾选瞬态<br>/define/models/unsteady-2nd-order yes<br><br>; 3、设置重力加速度<br>/define/operating-conditions/gravity yes 0 -9.81 0<br><br>; 4、开启能量方程<br>/define/models/energy y y y<br><br>; 5、湍流模型<br>/define/models/viscous/spalart-allmaras y<br><br>; 6、新增混合气体<br>/define/models/species/species-transport y hydrogen-air<br>/define/materials/change-create hydrogen-air hydrogen-air y 2 h2 air 0 0 n n n n n n<br><br>; 7、管道材料及土壤材料<br>/define/materials/copy/solid/steel<br>/define/materials/change-create aluminum soil y constant 2650 y constant 789 y constant 2.9 y<br><br>; 8、设置边界条件<br>/define/boundary-conditions/fluid solid fluid no no no no no  0 no 0 no 0 no  0 no 0 no 0 no no no no yes no no 1 no 0 no 0 no  0 no 1 no 0 yes no 245000000000 no 245000000000 no 245000000000 no no 502000 no 502000 no 502000 0 0 no 0.43 constant 1 yes no no no<br><br>/define/boundary-conditions/zone-type inlet pressure-inlet<br>/define/boundary-conditions/set/pressure-inlet inlet () p0 no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () supersonic/initial-gauge-pressure no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () ke-spec no no no yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () turb-hydraulic-diam 0.01 q<br>/define/boundary-conditions/set/pressure-inlet inlet () t0 no 288.15 q<br>/define/boundary-conditions/set/pressure-inlet inlet () species-in-mole-fractions yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () mf no 1 q<br><br>/define/boundary-conditions/set/pressure-outlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 () t0 no 288.15 q<br><br>/define/boundary-conditions wall pipe 0 no 0 yes steel no no 0 no no no no no 0 no 0.5 yes no 1<br>/define/boundary-conditions wall ground 0 no 0 yes soil no no 0 no no no no no 0 no 0.5 yes no 1<br><br>; 9、创建并设置监测点和面<br>surf point-surf point-1 0 0.4 0 q<br>surf point-surf point-2 0 0.5 0 q<br>surf point-surf point-3 2 0.4 0 q<br><br>/solve/report-definitions add report1 surface-vertexavg field molef-h2 surface-names point-1 () q<br><br>/surface/plane plane1 0 0 0 0 1 0 0 0 1<br><br>; 10、初始化<br>/solve/initialize/set-defaults/ temperature 288.15<br>/solve/initialize/set-defaults/ pressure 0<br>/solve/initialize/set-defaults/ species-0 0<br><br>/solve/initialize initialize-flow ok<br>; 显示一下contour<br>;/display/contour molef-h2 0 1<br><br><br>; 11、设置保存格式及频率<br>; 设置数据保存内容<br>/file/data-file-options molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q<br>; 保存tecplot文件<br>/file/transient-export/tecplot  C:/Users/23984/Desktop/tui_test/tecplot1 ground inlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 pipe () molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q tecplot1 10 time-step<br><br>; 12、创建contour并保存动画<br>/display/objects/create contour &quot;contour-1&quot; filled yes field molef-h2 surfaces-list plane1 () q<br>/solve/animate/objects/create &quot;animation-1&quot; animate-on contour-1 storage-dir C:\Users\23984\Desktop\tui_test frequency-of &quot;Time Step&quot; q<br><br>; 13、设置迭代参数<br>/solve/set/max-iterations-per-time-step 50<br>/solve/set/time-step 1<br>/solve/set/number-of-time-steps 1000<br>/file/write-case/setting1.cas<br><br>; 14、开始计算<br>/solve/dual-time-iterate 1 2<br><br>exit ok<br></code></pre></td></tr></table></figure><h1 id="python-代码">Python 代码</h1><p>含注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 获取python文件运行的目录文件夹</span><br>path, filename = os.path.split(os.path.abspath(__file__))<br><br><span class="hljs-comment"># 定义fluent.exe的目录</span><br>fluent_path = <span class="hljs-string">&quot;D:\\ANSYS18\\ANSYS Inc\\v180\\fluent\\ntbin\\win64&quot;</span><br><br><span class="hljs-comment"># 定义要运行的命令</span><br>command_list = []<br>command_list.append(<span class="hljs-string">f&#x27;&quot;<span class="hljs-subst">&#123;fluent_path&#125;</span>\\fluent.exe&quot; 3ddp -t4 -i jou1.jou&#x27;</span>)<br>command_list.append(<span class="hljs-string">f&#x27;&quot;<span class="hljs-subst">&#123;fluent_path&#125;</span>\\fluent.exe&quot; 3ddp -t4 -i jou2.jou&#x27;</span>)<br><br>time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 定义fluent程序循环</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_fluent</span>(<span class="hljs-params">command,path</span>):<br>    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, shell=<span class="hljs-literal">True</span>, universal_newlines=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 持续监控输出，如果检测到程序结束就往下执行</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        output = process.stdout.readline()<br>        <span class="hljs-keyword">if</span> output == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> process.poll() <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> output:<br>            <span class="hljs-built_in">print</span>(output.strip())<br>    rc = process.poll()<br><br>count = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,count):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;开始循环第<span class="hljs-subst">&#123;i&#125;</span>个&quot;</span>)<br>  run_fluent(command_list[i],path)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;i&#125;</span>个循环结束&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序结束&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>这里如果想使用 python算一些变量，然后传入程序中自动执行，这里提供一种方法，就是修改 tui文件（.jou）内的内容。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
      <tag>Python</tag>
      
      <tag>学习笔记</tag>
      
      <tag>TUI</tag>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TUI命令</title>
    <link href="/2024/07/27/031%20Fleunt%20Tui%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/07/27/031%20Fleunt%20Tui%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="tui-命令基本认识">1、TUI 命令基本认识</h1><p>Fluent 中的 Tui 命令能使 Fluent自动化操作，包括文件设置、案例读取、参数设置等功能。</p><h1 id="基本操作">2、基本操作</h1><p>在 Fluent 中的命令行可进行 tui 命令操作</p><ul><li>回车可查看命令提示；</li><li>q：返回上一级</li></ul><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240727213342.png" /></p><h1 id="案例">3、案例</h1><p>案例中包含注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs jou">; 1、读取网格文件<br>rc fluent.msh<br>mesh/check<br>mesh/quality<br><br><br>display mesh-outline<br><br>; 2、勾选瞬态<br>/define/models/unsteady-2nd-order yes<br><br>; 3、设置重力加速度<br>/define/operating-conditions/gravity yes 0 -9.81 0<br><br>; 4、开启能量方程<br>/define/models/energy y y y<br><br>; 5、湍流模型<br>/define/models/viscous/spalart-allmaras y<br><br>; 6、新增混合气体<br>/define/models/species/species-transport y hydrogen-air<br>/define/materials/change-create hydrogen-air hydrogen-air y 2 h2 air 0 0 n n n n n n<br><br>; 7、管道材料及土壤材料<br>/define/materials/copy/solid/steel<br>/define/materials/change-create aluminum soil y constant 2650 y constant 789 y constant 2.9 y<br><br>; 8、设置边界条件<br>/define/boundary-conditions/fluid solid fluid no no no no no  0 no 0 no 0 no  0 no 0 no 0 no no no no yes no no 1 no 0 no 0 no  0 no 1 no 0 yes no 245000000000 no 245000000000 no 245000000000 no no 502000 no 502000 no 502000 0 0 no 0.43 constant 1 yes no no no<br><br>/define/boundary-conditions/zone-type inlet pressure-inlet<br>/define/boundary-conditions/set/pressure-inlet inlet () p0 no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () supersonic/initial-gauge-pressure no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () ke-spec no no no yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () turb-hydraulic-diam 0.01 q<br>/define/boundary-conditions/set/pressure-inlet inlet () t0 no 288.15 q<br>/define/boundary-conditions/set/pressure-inlet inlet () species-in-mole-fractions yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () mf no 1 q<br><br>/define/boundary-conditions/set/pressure-outlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 () t0 no 288.15 q<br><br>/define/boundary-conditions wall pipe 0 no 0 yes steel no no 0 no no no no no 0 no 0.5 yes no 1<br>/define/boundary-conditions wall ground 0 no 0 yes soil no no 0 no no no no no 0 no 0.5 yes no 1<br><br>; 9、创建并设置监测点和面<br>surf point-surf point-1 0 0.4 0 q<br>surf point-surf point-2 0 0.5 0 q<br>surf point-surf point-3 2 0.4 0 q<br><br>/solve/report-definitions add report1 surface-vertexavg field molef-h2 surface-names point-1 () q<br><br>/surface/plane plane1 0 0 0 0 1 0 0 0 1<br><br>; 10、初始化<br>/solve/initialize/set-defaults/ temperature 288.15<br>/solve/initialize/set-defaults/ pressure 0<br>/solve/initialize/set-defaults/ species-0 0<br><br>/solve/initialize initialize-flow ok<br>; 显示一下contour<br>;/display/contour molef-h2 0 1<br><br><br>; 11、设置保存格式及频率<br>; 设置数据保存内容<br>/file/data-file-options molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q<br>; 保存tecplot文件<br>/file/transient-export/tecplot  C:/Users/23984/Desktop/tui_test/tecplot1 ground inlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 pipe () molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q tecplot1 10 time-step<br><br>; 12、创建contour并保存动画<br>/display/objects/create contour &quot;contour-1&quot; filled yes field molef-h2 surfaces-list plane1 () q<br>/solve/animate/objects/create &quot;animation-1&quot; animate-on contour-1 storage-dir C:\Users\23984\Desktop\tui_test frequency-of &quot;Time Step&quot; q<br><br>; 13、设置迭代参数<br>/solve/set/max-iterations-per-time-step 50<br>/solve/set/time-step 1<br>/solve/set/number-of-time-steps 1000<br>/file/write-case/setting.cas<br><br>; 14、开始计算<br>/solve/dual-time-iterate 1000 20<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
      <tag>学习笔记</tag>
      
      <tag>TUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>库朗数</title>
    <link href="/2024/07/26/030%20%E5%BA%93%E6%9C%97%E6%95%B0/"/>
    <url>/2024/07/26/030%20%E5%BA%93%E6%9C%97%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="时间步长的确定">时间步长的确定</h1><p>https://blog.csdn.net/staywithmoon/article/details/124253642</p><p>https://blog.csdn.net/weixin_45560646/article/details/126922667</p><p>https://www.youtube.com/watch?v=WBWY46ynRk0</p><h2 id="库朗数">1、库朗数</h2><h3 id="基本概念">1.1 基本概念</h3><p>库朗数是用来衡量数值计算稳定性的一个物理量，也被称为<code>CFL</code>数、<code>CFL</code>准则。</p><p><span class="math display">\[Courant=\frac{u\Delta t}{\Deltax}\]</span></p><p>u 为流体速度；Δt 为时间步长；Δx 为网格尺寸；</p><blockquote><p><code>u*Δt</code>表示流体在 Δt时间内流动的距离，除以网格尺寸，则表示流体在一个时间步长内流过了多少个网格。</p></blockquote><p>一般取值在<strong>1~10</strong>之间比较合适，当然要根据实际情况，如收敛性比较差，可适当降低这个数值。收敛性比较好，收敛速度慢，可适当增加库朗数。Fluent帮助文档认为对于大多数问题，库朗数设置为 1 能够满足要求。</p><p>实际上，Fluent 很多案例的库朗数都是50，这主要是选择了隐式算法的原因</p><h3 id="库朗数的设置">1.2 <strong>库朗数的设置</strong></h3><ul><li>显示格式 Explicit Formulation：默认是 1，对于 2维问题可适当增加库朗数，但不要超过2.0。如果设置没有问题，但是计算发散了，或者残差上升得非常快，就必须降低Courant number，可能需要降低到 0.5，甚至0.1。但如果收敛性很好，就可以增加 Courant number。</li><li>隐式格式 Implicit Formulation：默认库朗数为 5.0。通常可以 增加到10、20、100 甚至更高。与显示一样可根据收敛情况进行更改。</li></ul><blockquote><p>对于隐式非定常格式：对于不可压流动，在每个时间步内，不可压解必须迭代直至收敛。</p><p>对于显式非定常格式：每一个迭代就是一个时间步</p></blockquote><p>每个时间步内结果没有得到收敛，则很有可能你所得到的结果是不真实的</p><h3 id="库朗数推荐">1.3 库朗数推荐</h3><ul><li>Large Eddy Simulation(0.5-1)</li><li>Free Surface Flows(&lt;1)</li><li>Compressible Flows(depends on speed of sound)</li><li>Turbomachinery(&lt;80)</li><li>Explicit Time Stepping(&lt;1)</li></ul>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
      <tag>学习笔记</tag>
      
      <tag>库朗数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DPM颗粒模型</title>
    <link href="/2024/07/26/029%20Fluent%20DPM%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/07/26/029%20Fluent%20DPM%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记">1 学习笔记</h1><h2 id="fluent-颗粒流">0、Fluent 颗粒流</h2><p>Fluent 有 3 种颗粒模拟方法</p><ol type="1"><li>欧拉颗粒流（双流体模型）：把颗粒当做连续介质处理，优点是计算量小，但需要更多的相互作用模型，比如阻力等，多用于流化床。</li><li>DPM 模型（离散相模型）：DPM模型之间不考虑碰撞也不考虑体积空间，适用于流体占主导作用的，颗粒占比不超过10%。模拟一般灰尘、气溶胶等小颗粒的运动，也经常配合化学反应。</li><li>DDPM 模型（稠密离散相模型）：DDPM 是 Dense Discrete Phase Model的缩写，是专门用来模拟例如流化床这种稠密颗粒流的模型，可以理解为简化了的DEM。他和 DPM的区别就是考虑了<strong>体积分数</strong>，是有孔隙率的，后处理中能够查看颗粒所占的体积分数，在相间相互作用力也可以考虑颗粒之间的碰撞，但是对于碰撞的计算是进行了模化的，不是用软球模型计算真实的碰撞过程，颗粒间的碰撞产生的力是根据KTGF 下颗粒的 stress tensori 计算得到。</li><li>DEM 离散元模型：可考虑颗粒的真实碰撞，可采用弹性 弹性阻尼 赫兹赫兹阻尼碰撞模型，一般 DDPM+DEM 一起使用</li></ol><h2 id="耦合">1、耦合</h2><ol type="1"><li>单向耦合</li><li>双向耦合</li></ol><h3 id="单向耦合">1.1 单向耦合</h3><p>单向耦合：离散相对连续相影响很小无需设置相间耦合.</p><p>单向耦合问题：只要在加入离散相粒子前计算连续相流场直至收敛，然后打开离散相模型，加入离散相粒子，无需迭代计算因为已经计算收敛流场稳定了.</p><p>连续相（也就是流场）计算可以是 steady（定常/稳态流场）也可以是unsteady（非定常/瞬态/transient）。这两种连续相的流场中离散相计算都可以用非耦合粒子计算。</p><p>单相耦合计算不考虑离散相对连续相的影响，离散相的动量、质量、温度等信息不会反馈给流场，因为流场事先已经计算收敛了，不能变了，当开DPM 时候，就是通过流场的信息计算 DPM 了，简单说是流场产生 DPM场的概念。</p><h3 id="双向耦合">1.2 双向耦合</h3><p>耦合计算的步骤：</p><ol type="1"><li>求解连续相流场（在引入离散相之前））</li><li>通过计算每个离散相注入的粒子轨迹来引入离散相。</li><li>使用先前粒子计算期间确定的动量、热量和质量的相间交换，重新计算连续相流。</li><li>重新计算修改的连续相流场中的离散相轨迹。</li><li>重复前两个步骤，直到获得收敛解，其中连续相流场和离散相颗粒轨迹在每次附加计算中都保持不变。</li></ol><h2 id="dpm-边界条件">2、DPM 边界条件</h2><ol type="1"><li>escape 逃逸：颗粒离开流体域</li><li>trap：被捕获吸收</li><li>reflect：反弹，一般用于壁面上，需要指定反射系数</li><li>wall jet：壁面射流，颗粒触碰壁面后会分成更小的颗粒继续流动</li><li>wall film：需要打开壁面液膜模型，与 wall jet 相似</li><li>reinject：当颗粒达到某个计算域边界时，将粒子重新引入域。</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291658664.png"alt="image-20230829165815567" /><figcaption aria-hidden="true">image-20230829165815567</figcaption></figure><h2 id="粒子方向">3、粒子方向</h2><p>Inject Using Face NormalDirection：开启这个选项后，粒子在入射时的速度方向将与面法向一致，这样就无需定义颗粒在x、y、z 三个方向的速度分量，只需要定义速度值； <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202309020913147.png"alt="image.png" /></p><h2 id="粒子射入类型">4、粒子射入类型</h2><p>https://zhuanlan.zhihu.com/p/532180420 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202309020914955.png"alt="image.png" /></p><h2 id="颗粒碰撞">5、颗粒碰撞</h2><p>https://zhuanlan.zhihu.com/p/621078742</p><h2 id="颗粒其他作用">6、颗粒其他作用</h2><h1 id="案例颗粒搅拌">2 案例：颗粒搅拌</h1><h2 id="重力项">1、重力项</h2><h2 id="离散相模型">2、离散相模型</h2><p>打开【交互】-【与连续相的交互】</p><ul><li>每次流动迭代更新 DPM 源项：意思是每 10个流动迭代更新一下颗粒的数量变化，这个都给他勾选上，颗粒破碎，被壁面捕获，更改质量流量都会使数量发生变化。</li><li>DPM 迭代间隔：连续相每次迭代 10步，开始进行离散相的计算。（不收敛可调小）</li><li>颗粒时时间步大小：如为 0.001s 代表颗粒相每 0.001s追踪一次，但是，在开始计算阶段，粒子一边释放一边追踪，释放完成后也在追踪。（不收敛可调小）</li><li>最大步数和步长因子：Max number of steps 和 Specify LengthScale，每一次轨迹跟踪的最大积分时间步数和积分长度标尺，都是为了确定积分时间步长∆t。选择 Specify Length Scale选项以确定积分时间步长时，积分时间步长约等于所给的长度尺度（LengthScale）除以颗粒相对于连续相的速度大小。而积分步数约等于颗粒时间步长（ParticleTime Step Size）除以积分时间步长，但以 Max Number of Steps为限（因此：积分时间步长 ∆t&lt;颗粒时间步长 Particle Time StepSize∆tp）。所以，如 Max Number of Steps不够大，则未到颗粒时间步长就结束一个颗粒时间步，并转入下一个颗粒时间步，因而颗粒终了状态报告为incomplete。</li></ul><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291040314.png"alt="image-20230829104022213" /><figcaption aria-hidden="true">image-20230829104022213</figcaption></figure><p>设置喷射源</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291041115.png"alt="image-20230829104130041" /><figcaption aria-hidden="true">image-20230829104130041</figcaption></figure><h2 id="追踪颗粒轨迹">3、追踪颗粒轨迹</h2><p>创建颗粒轨迹</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291541393.png"alt="image-20230829154138243" /><figcaption aria-hidden="true">image-20230829154138243</figcaption></figure><p>创建颗粒场景并保存</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291542031.png"alt="image-20230829154239921" /><figcaption aria-hidden="true">image-20230829154239921</figcaption></figure><p>创建解决方案动画</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291543657.png"alt="image-20230829154309557" /><figcaption aria-hidden="true">image-20230829154309557</figcaption></figure><h2 id="导出颗粒数据">4、导出颗粒数据</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291543784.png"alt="image-20230829154336663" /><figcaption aria-hidden="true">image-20230829154336663</figcaption></figure><h1 id="喷头模拟">3 喷头模拟</h1><h2 id="碳酸氢钠性质">碳酸氢钠性质</h2><p>密度：2.16 g/mL 直径：在 0.1-10mm 之间</p><h2 id="section">20230829</h2><p>使用之前的网格，只有喷嘴和场域，出口 5MPa 和出口 2MPa 都发散。想到昨天尝试的将出口都改为压力出口（包括计算域的edge）计算较好，今天再试一下，但还是发散。使用昨天的设置再跑一边，只不过加入离散相。但是昨天加入了 VOF模型，现在关闭了。 <strong>成功设置</strong> 1、瞬态 2、能量 3、标准k-e，标准壁面 4、离散相模型： <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291913883.png"alt="image.png" /> 直径 0.0001，温度 300K，停止时间 1e-5，总流量 100000<imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291913817.png"alt="image.png" /> 5、材料 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291914553.png"alt="image.png" /> 6、边界条件 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291915645.png"alt="image.png" /> 压力进口（ecapse） <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291916777.png"alt="image.png" /> 压力出口 edge（reflect） <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291916237.png"alt="image.png" /> <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291917062.png"alt="image.png" /> 7、方法 PISO 方法 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291917948.png"alt="image.png" /> 8、残差 1e-06 9、步长 时间步长 0.01 时间步数 100</p><h2 id="section-1">20230905</h2><p>截止今日，在雪研师姐电脑上已经模拟完成渐扩喷头 2MPa 和5MPa，在自己电脑上渐扩喷头（带孔）2MPa，步长 1e-6，共 1000步。但是模拟出的粒子速度太大，现在想要使用 udf改变压力边界条件，呈现一个递减的趋势，气体使用真实气体状态方程进行模拟，密度基求解器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_x,thread,index)<br>&#123;<br>real y,v0,h0;<br>real x[ND_ND];<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;  <span class="hljs-comment">// 获取当前模拟的时间</span><br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &gt;=<span class="hljs-number">0</span> &amp;&amp; flow_time &lt;= <span class="hljs-number">0.05</span> )<br>F_PROFILE(f,thread,index) = <span class="hljs-number">2000000</span> - <span class="hljs-number">40000000</span> * flow_time;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,index) = <span class="hljs-number">0</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><p>为了能使粒子喷出后分散均匀，共设计 6种喷头结构，分别为渐扩喷头、渐扩喷头（带孔）、拉法尔喷头、拉法尔喷头（带孔）、蘑菇喷头和蘑菇喷头（带孔）。喷嘴尺寸：</p><p>喷嘴网格：</p><h3 id="空气">空气</h3><p>使用高压空气作为驱动气充入喷粉罐中，空气携带粒子以 2MPa 和 5MPa的压力喷出。压力以 40MPa/s 速度衰减，在 50ms 时衰减为 0。使用理想气体，密度变化。</p><h3 id="粒子">粒子</h3><p>抑爆剂粒子选用 NaHCO3 粒子，密度为 2.16g/cm³，比热为 2170J/(kg K)粒子的直径分布在 1~100um 范围内，平均直径为 50um，共 10 种粒子大小。粒子总质量 100g，在 50ms 内喷完。即产生速率为 2kg/s。（假设阀门 50ms打开） 粒子速度为 0.1m/s 从壁面出来 双向耦合，考虑粒子的碰撞</p><h3 id="求解器设置">求解器设置：</h3><p>因喷出速度较大，求解器选用密度基。</p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
      <tag>学习笔记</tag>
      
      <tag>DPM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习入门</title>
    <link href="/2024/06/30/028%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    <url>/2024/06/30/028%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基本配置">基本配置</h1><p><ahref="https://github.com/baiqinglun/pytorch_learning.git">github</a></p><p><ahref="https://www.bilibili.com/video/BV1Z8411R7PH/?spm_id_from=333.788&amp;vd_source=33b50a4dd201d7564e6e63d321809ce9">学习视频地址</a></p><h2 id="环境配置">环境配置</h2><ol type="1"><li>在 anaconda中新建虚拟环境<code>conda create -n Pytorch python=3.9</code></li><li>激活虚拟环境并安装 numpy、matplotlib、pandas 库</li><li>在终端命令行输入：<code>nvidia-smi</code>查看 CUNDA 版本，在安装pytorch 时需要注意版本：CONDA &gt; conda</li></ol><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301747100.png" /></p><h2 id="更改-jupyter-默认打开目录">更改 jupyter 默认打开目录</h2><ol type="1"><li>首先使用以下命令生成 jupyter配置文件，生成的文件一般在<code>C:\Users\用户名\.jupyter</code>文件夹内</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jupyter notebook --generate-config<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><p>查找该文件中的<code>c.NotebookApp.notebook_dir</code>更改为<code>c.NotebookApp.notebook_dir = 'F:\Jupyter'</code>并保存，此时默认路径就更改为<code>'F:\Jupyter'</code></p></li><li><p>修改 jupyter快捷方式的打开方式，删除后面的环境变量，至此修改成功。</p></li></ol><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301822505.png" /></p><h2 id="将-conda-虚拟环境关联至-jupyter">将 conda 虚拟环境关联至jupyter</h2><p>安装 ipykernel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate pytorch<br>pip install ipykernel<br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m ipykernel install --user --name=pytorch<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301827885.png" /></p><h2 id="测试-conda-是否可用">测试 conda 是否可用</h2><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301828813.png" /></p><h1 id="dnn-基本原理">2、DNN 基本原理</h1><p>主要可分为以下 4 个步骤：</p><ol type="1"><li>划分数据集</li><li>训练网络</li><li>测试网络</li><li>使用网络</li></ol><h2 id="划分数据集">2.1 划分数据集</h2><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301841002.png" /></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301841606.png"alt="神经网络的结构" /><figcaption aria-hidden="true">神经网络的结构</figcaption></figure><p>考虑到 Python 列表、NumPy 数组以及 PyTorch张量都是从索引[0]开始，再加之输入层没有内部参数（权重 ω 与偏置b），所以习惯将输入层称之为第 0 层。</p><h2 id="训练网络">2.2 训练网络</h2><p>神经网络的训练过程，就是经过很多次前向传播与反向传播的轮回，最终不断调整其内部参数（权重ω 与偏置 b），以拟合任意复杂函数的过程。内部参数一开始是随机的（如Xavier 初始值、He 初始值），最终会不断优化到最佳。</p><p>习惯把内部参数称为参数，外部参数称为超参数。</p><p>（1）前向传播</p><p>将单个样本的 3个输入特征送入神经网络的输入层后，神经网络会逐层计算到输出层，最终得到神经网络预测的3 个输出特征。</p><p>该神经元节点的计算过程为<spanclass="math inline">\(y=\omega_1x_1+\omega_2x_2+\omega_3x_3+b\)</span>。你可以理解为，每一根线就是一个权重 ω，每一个神经元节点也都有它自己的偏置b。当然，每个神经元节点在计算完后，由于这个方程是线性的，因此必须在外面套一个非线性的函数：<spanclass="math inline">\(y=\sigma\left(\omega_1x_1+\omega_2x_2+\omega_3x_3+b\right)\)</span>，σ 被称为激活函数。<strong>如果你不套非线性函数，那么即使 10层的网络，也可以用 1 层就拟合出同样的方程。</strong></p><p>（2）反向传播</p><p>经过前向传播，网络会根据当前的内部参数计算出输出特征的预测值。为计算预测值与真实值之间的差距，需要一个损失函数。</p><p>损失函数计算好后，逐层退回求梯度。即看每一个内部参数是变大还是变小，才会使得损失函数变小。这样就达到了优化内部参数的目的。</p><p>关键参数：外部参数叫学习率。学习率越大，内部参数的优化越快，但过大的学习率可能会使损失函数越过最低点，并在谷底反复横跳。</p><p>（3）batch_size</p><p>前向传播与反向传播一次时，有三种情况：</p><ul><li>批量梯度下降（Batch GradientDescent，BGD），把所有样本一次性输入进网络，这种方式计算量开销很大，速度也很慢。</li><li>随机梯度下降（Stochastic GradientDescent，SGD），每次只把一个样本输入进网络，每计算一个样本就更新参数。这种方式虽然速度比较快，但是收敛性能差，可能会在最优点附近震荡，两次参数的更新也有可能抵消。</li><li>小批量梯度下降（Mini-Batch GradientDecent，MBGD）是为了中和上面二者而生，这种办法把样本划分为若干个批，按批来更新参数。</li></ul><blockquote><p>PyTorch 只支持批量与小批量</p></blockquote><p>（4）epochs</p><p>1 个 epoch 就是指全部样本进行 1 次前向传播与反向传播。</p><p>假设有 10240 个训练样本，batch_size 是 1024，epochs 是 5。那么：</p><ul><li>全部样本将进行 5 次前向传播与反向传播；</li><li>1 个 epoch，将发生 10 次（10240x1024）前向传播与反向传播；</li><li>一共发生 50 次（105）前向传播和反向传播。</li></ul><h2 id="测试网络">2.3 测试网络</h2><p>目的：防止过拟合。过拟合：网络优化好的内部参数支队本训练样本有效。</p><p>测试集时，只需要一次前向传播。</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301948453.png" /></p><h2 id="使用网络">2.4 使用网络</h2><p>直接将样本进行 1 次前向传播。</p><h1 id="dnn-的实现">3、DNN 的实现</h1><h2 id="制作数据集">3.1 制作数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 展示高清图</span><br><span class="hljs-keyword">from</span> matplotlib_inline <span class="hljs-keyword">import</span> backend_inline<br>backend_inline.set_matplotlib_formats(<span class="hljs-string">&#x27;svg&#x27;</span>)<br><br>X1 = torch.rand(<span class="hljs-number">10000</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 输入特征1</span><br>X2 = torch.rand(<span class="hljs-number">10000</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 输入特征2</span><br>X3 = torch.rand(<span class="hljs-number">10000</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 输入特征3</span><br><br>Y1 = ( (X1+X2+X3)&lt;<span class="hljs-number">1</span> ).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># 输出特征1</span><br>Y2 = ( (<span class="hljs-number">1</span>&lt;(X1+X2+X3)) &amp; ((X1+X2+X3)&lt;<span class="hljs-number">2</span>) ).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># 输出特征2</span><br>Y3 = ( (X1+X2+X3)&gt;<span class="hljs-number">2</span> ).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># 输出特征3</span><br>Data = torch.cat([X1,X2,X3,Y1,Y2,Y3],axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 整合数据集</span><br>Data = Data.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 把数据集搬到GPU 上</span><br><br><span class="hljs-comment"># 划分训练集与测试集</span><br>train_size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(Data) * <span class="hljs-number">0.7</span>) <span class="hljs-comment"># 训练集的样本数量</span><br>test_size = <span class="hljs-built_in">len</span>(Data) - train_size <span class="hljs-comment"># 测试集的样本数量</span><br>Data = Data[torch.randperm( Data.size(<span class="hljs-number">0</span>)) , : ] <span class="hljs-comment"># 打乱样本的顺序</span><br>train_Data = Data[ : train_size , : ] <span class="hljs-comment"># 训练集样本</span><br>test_Data = Data[ train_size : , : ] <span class="hljs-comment"># 测试集样本</span><br>train_Data.shape, test_Data.shape<br></code></pre></td></tr></table></figure><h2 id="搭建神经网络">3.2 搭建神经网络</h2><p>通常以 nn.Module作为父类，自己的神经网络可直接继承父类的方法和属性。</p><p>在定义神经网络时通常需要包含 2个方法，<code>__init__</code>和<code>forward</code></p><ul><li><code>__init__</code>：用于构建自己的神经网络</li><li><code>forward</code>：用于输入数据进行向前传播</li></ul><p><strong>（1）搭建神经网络结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>            nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第1 层：全连接层</span><br>            nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第2 层：全连接层</span><br>            nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第3 层：全连接层</span><br>            nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># 第4 层：全连接层</span><br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br></code></pre></td></tr></table></figure><p><strong>代码解析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), nn.ReLU()<br></code></pre></td></tr></table></figure><ul><li>表示一个隐藏层，第一个隐藏层为线性层，搜嘎会给你一个神经元节点数是3，这层节点数是 5</li><li>后面的<code>nn.ReLU()</code>表示一个激活函数</li></ul><p><strong>代码解析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第1 层：全连接层</span><br>nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第2 层：全连接层</span><br>nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第3 层：全连接层</span><br>nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># 第4 层：全连接层</span><br></code></pre></td></tr></table></figure><p>第二层的第一个数要和第一层的第二个数对应</p><p><strong>（2）创建神经网络</strong></p><p>创建 model 实例，并将其转移掉 gpu 上</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302117031.png" /></p><ul><li>每个隐藏层都有一个激活函数。</li><li>各层的神经元节点数位 3 5 5 5 3</li></ul><blockquote><p>输入层的神经元数量必须与每个样本的输入特征数量一致，输出层的神经数量必须与每个样本的输出特征数量一致。</p></blockquote><h2 id="网络的内部参数">3.3 网络的内部参数</h2><p>权重与偏置</p><p>查看网络内部参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> name,param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;参数:<span class="hljs-subst">&#123;name&#125;</span>\n形状:<span class="hljs-subst">&#123;param.shape&#125;</span>\n数值:<span class="hljs-subst">&#123;param&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302123628.png" /></p><ul><li>net.0.weight 权重形状为[5,3]，5 表示自己的节点数，3表示前一层的节点数</li><li><code>device='cuda:0'</code>表示在 gpu 上</li><li><code>requires_grad=True</code>表示打开梯度计算功能</li></ul><h2 id="网络外部参数">3.4 网络外部参数</h2><p>又叫超参数。</p><ul><li>搭建网络时的超参数：网络的层数、各隐藏层节点数、各节点激活函数、内部参数的初始值等。</li><li>训练网络时的超参数：损失函数、学习率、优化算法、batch_size、epochs等。</li></ul><p><strong>（1）激活函数</strong></p><p>引入非线性因素，从而使神经网络能够学习和表达更加复杂的函数关系。</p><p><ahref="https://pytorch.org/docs/2.3/nn.html#non-linear-activations-weighted-sum-nonlinearity">官网</a></p><p>https://cloud.tencent.com/developer/article/1797190</p><p><strong>（2）损失函数</strong></p><p>计算神经网络每次迭代的前向计算结果与真实值的差距，从而指导下一步的训练向正确的方向进行。</p><p><a href="https://pytorch.org/docs/2.3/optim.html">官网</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 损失函数的选择</span><br>loss_fn = nn.MSELoss()<br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.01</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)<br></code></pre></td></tr></table></figure><h2 id="训练网路">3.5 训练网路</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">1000</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-comment"># 给训练集划分输入与输出</span><br>X = train_Data[ : , :<span class="hljs-number">3</span> ] <span class="hljs-comment"># 前3 列为输入特征</span><br>Y = train_Data[ : , -<span class="hljs-number">3</span>: ] <span class="hljs-comment"># 后3 列为输出特征</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    loss = loss_fn(Pred, Y) <span class="hljs-comment"># 计算损失函数</span><br>    losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>    optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>    loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>    optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(epochs), losses)<br>plt.ylabel(<span class="hljs-string">&#x27;loss&#x27;</span>), plt.xlabel(<span class="hljs-string">&#x27;epoch&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302139653.png" /></p><h2 id="测试神网络">3.6 测试神网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试网络</span><br><span class="hljs-comment"># 给测试集划分输入与输出</span><br>X = test_Data[:, :<span class="hljs-number">3</span>] <span class="hljs-comment"># 前3 列为输入特征</span><br>Y = test_Data[:, -<span class="hljs-number">3</span>:] <span class="hljs-comment"># 后3 列为输出特征</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    Pred[:,torch.argmax(Pred, axis=<span class="hljs-number">1</span>)] = <span class="hljs-number">1</span><br>    Pred[Pred!=<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>    correct = torch.<span class="hljs-built_in">sum</span>( (Pred == Y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) ) <span class="hljs-comment"># 预测正确的样本</span><br>    total = Y.size(<span class="hljs-number">0</span>) <span class="hljs-comment"># 全部的样本数量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="保存与导入网络">3.7 保存与导入网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存网络</span><br>torch.save(model,<span class="hljs-string">&#x27;model.pth&#x27;</span>)<br><br><span class="hljs-comment"># 导入网络</span><br>new_model =torch.load(<span class="hljs-string">&#x27;model.pth&#x27;</span>)<br><br><span class="hljs-comment"># 测试新网络</span><br><span class="hljs-comment"># 给测试集划分输入与输出</span><br>X = test_Data[:, :<span class="hljs-number">3</span>] <span class="hljs-comment"># 前3 列为输入特征</span><br>Y = test_Data[:, -<span class="hljs-number">3</span>:] <span class="hljs-comment"># 后3 列为输出特征</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    Pred = new_model(X) <span class="hljs-comment"># 用新模型进行一次前向传播</span><br>    Pred[:,torch.argmax(Pred, axis=<span class="hljs-number">1</span>)] = <span class="hljs-number">1</span><br>    Pred[Pred!=<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>    correct = torch.<span class="hljs-built_in">sum</span>( (Pred == Y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) ) <span class="hljs-comment"># 预测正确的样本</span><br>    total = Y.size(<span class="hljs-number">0</span>) <span class="hljs-comment"># 全部的样本数量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="批量梯度下降案例代码">4、批量梯度下降案例代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 展示高清图</span><br><span class="hljs-keyword">from</span> matplotlib_inline <span class="hljs-keyword">import</span> backend_inline<br>backend_inline.set_matplotlib_formats(<span class="hljs-string">&#x27;svg&#x27;</span>)<br><br><span class="hljs-comment"># 准备数据集</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;Data.csv&#x27;</span>, index_col=<span class="hljs-number">0</span>) <span class="hljs-comment"># 导入数据</span><br>arr = df.values <span class="hljs-comment"># Pandas 对象退化为NumPy 数组</span><br>arr = arr.astype(np.float32) <span class="hljs-comment"># 转为float32 类型数组</span><br>ts = torch.tensor(arr) <span class="hljs-comment"># 数组转为张量</span><br>ts = ts.to(<span class="hljs-string">&#x27;cuda&#x27;</span>) <span class="hljs-comment"># 把训练集搬到cuda 上</span><br><br><span class="hljs-comment"># 划分训练集与测试集</span><br>train_size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(ts) * <span class="hljs-number">0.7</span>) <span class="hljs-comment"># 训练集的样本数量</span><br>test_size = <span class="hljs-built_in">len</span>(ts) - train_size <span class="hljs-comment"># 测试集的样本数量</span><br>ts = ts[ torch.randperm( ts.size(<span class="hljs-number">0</span>) ) , : ] <span class="hljs-comment"># 打乱样本的顺序</span><br>train_Data = ts[ : train_size , : ] <span class="hljs-comment"># 训练集样本</span><br>test_Data = ts[ train_size : , : ] <span class="hljs-comment"># 测试集样本</span><br><br><span class="hljs-comment"># 创建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">32</span>), nn.Sigmoid(), <span class="hljs-comment"># 第1 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">32</span>, <span class="hljs-number">8</span>), nn.Sigmoid(), <span class="hljs-comment"># 第2 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>), nn.Sigmoid(), <span class="hljs-comment"># 第3 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), nn.Sigmoid() <span class="hljs-comment"># 第4 层：全连接层</span><br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br><br>model = DNN().to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 创建子类的实例，并搬到GPU 上</span><br><br><span class="hljs-comment"># 损失函数的选择</span><br>loss_fn = nn.BCELoss(reduction=<span class="hljs-string">&#x27;mean&#x27;</span>)<br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.005</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">5000</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-comment"># 给训练集划分输入与输出</span><br>X = train_Data[ : , : -<span class="hljs-number">1</span> ] <span class="hljs-comment"># 前8 列为输入特征</span><br>Y = train_Data[ : , -<span class="hljs-number">1</span> ].reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment"># 后1 列为输出特征</span><br><span class="hljs-comment"># 此处的.reshape((-1,1))将一阶张量升级为二阶张量</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    loss = loss_fn(Pred, Y) <span class="hljs-comment"># 计算损失函数</span><br>    losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>    optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>    loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>    optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(epochs), losses)<br>plt.ylabel(<span class="hljs-string">&#x27;loss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;epoch&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 测试网络</span><br><span class="hljs-comment"># 给测试集划分输入与输出</span><br>X = test_Data[ : , : -<span class="hljs-number">1</span> ] <span class="hljs-comment"># 前8 列为输入特征</span><br>Y = test_Data[ : , -<span class="hljs-number">1</span> ].reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment"># 后1 列为输出特征</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    Pred[Pred&gt;=<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>    Pred[Pred&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>    correct = torch.<span class="hljs-built_in">sum</span>( (Pred == Y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) ) <span class="hljs-comment"># 预测正确的样本</span><br>    total = Y.size(<span class="hljs-number">0</span>) <span class="hljs-comment"># 全部的样本数量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="小批量梯度下降">5、小批量梯度下降</h1><p>在使用小批量梯度下降时，必须使用 3 个 PyTorch内置的实用工具（utils）：</p><ul><li>DataSet 用于封装数据集；</li><li>DataLoader 用于加载数据不同的批次；</li><li>random_split 用于划分训练集与测试集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> random_split<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>%matplotlib inline<br><br><span class="hljs-comment"># 展示高清图</span><br><span class="hljs-keyword">from</span> matplotlib_inline <span class="hljs-keyword">import</span> backend_inline<br>backend_inline.set_matplotlib_formats(<span class="hljs-string">&#x27;svg&#x27;</span>)<br><br><span class="hljs-comment"># 制作数据集</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>): <span class="hljs-comment"># 继承Dataset 类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filepath</span>):<br>        df = pd.read_csv(filepath, index_col=<span class="hljs-number">0</span>) <span class="hljs-comment"># 导入数据</span><br>        arr = df.values <span class="hljs-comment"># 对象退化为数组</span><br>        arr = arr.astype(np.float32) <span class="hljs-comment"># 转为float32 类型数组</span><br>        ts = torch.tensor(arr) <span class="hljs-comment"># 数组转为张量</span><br>        ts = ts.to(<span class="hljs-string">&#x27;cuda&#x27;</span>) <span class="hljs-comment"># 把训练集搬到cuda 上</span><br>        self.X = ts[ : , : -<span class="hljs-number">1</span> ] <span class="hljs-comment"># 前8 列为输入特征</span><br>        self.Y = ts[ : , -<span class="hljs-number">1</span> ].reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment"># 后1 列为输出特征</span><br>        self.<span class="hljs-built_in">len</span> = ts.shape[<span class="hljs-number">0</span>] <span class="hljs-comment"># 样本的总数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">return</span> self.X[index], self.Y[index]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br><br><span class="hljs-comment"># 划分训练集与测试集</span><br>Data = MyData(<span class="hljs-string">&#x27;Data.csv&#x27;</span>)<br>train_size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(Data) * <span class="hljs-number">0.7</span>) <span class="hljs-comment"># 训练集的样本数量</span><br>test_size = <span class="hljs-built_in">len</span>(Data) - train_size <span class="hljs-comment"># 测试集的样本数量</span><br>train_Data, test_Data = random_split(Data, [train_size, test_size])<br><br><span class="hljs-comment"># 批次加载器</span><br>train_loader = DataLoader(dataset=train_Data, shuffle=<span class="hljs-literal">True</span>, batch_size=<span class="hljs-number">128</span>) <span class="hljs-comment"># shuffle洗牌</span><br>test_loader = DataLoader(dataset=test_Data, shuffle=<span class="hljs-literal">False</span>, batch_size=<span class="hljs-number">64</span>) <span class="hljs-comment"># 测试集就不需要洗牌了</span><br><br><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">32</span>), nn.Sigmoid(), <span class="hljs-comment"># 第1 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">32</span>, <span class="hljs-number">8</span>), nn.Sigmoid(), <span class="hljs-comment"># 第2 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>), nn.Sigmoid(), <span class="hljs-comment"># 第3 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), nn.Sigmoid() <span class="hljs-comment"># 第4 层：全连接层</span><br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br><br>model = DNN().to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 创建子类的实例，并搬到GPU 上</span><br>model <span class="hljs-comment"># 查看该实例的各层</span><br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.005</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">500</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> train_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        loss = loss_fn(Pred, y) <span class="hljs-comment"># 计算损失函数</span><br>        losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>        loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>        optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(losses)), losses)<br>plt.show()<br><br><span class="hljs-comment"># 测试网络</span><br>correct = <span class="hljs-number">0</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> test_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        Pred[Pred&gt;=<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>        Pred[Pred&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>        correct += torch.<span class="hljs-built_in">sum</span>( (Pred == y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) )<br>        total += y.size(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><p>小批量时针对局部进行向前向后，所以出来的损失函数不是梯度下降的。</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302207424.png" /></p><h1 id="手写数字识别">6、手写数字识别</h1><p>手写数字识别数据集（MNIST）是机器学习领域的标准数据集</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302208601.png" /></p><ul><li>输入：一副图像</li><li>输出：一个与图像中对应的数字（0 至 9之间的一个整数，不是独热编码）</li></ul><blockquote><p>我们不用手动将输出转换为独热编码，PyTorch会在整个过程中自动将数据集的输出转换为独热编码.只有在最后测试网络时，我们对比测试集的预测输出与真实输出时，才需要注意一下。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms <span class="hljs-comment"># 需要使用pip install安装一下</span><br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>%matplotlib inline<br></code></pre></td></tr></table></figure><p>下载时需要开启全局代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 制作数据集</span><br><span class="hljs-comment"># 数据集转换参数</span><br>transform = transforms.Compose([<br>    transforms.ToTensor(),<br>    transforms.Normalize(<span class="hljs-number">0.1307</span>, <span class="hljs-number">0.3081</span>)<br>])<br><br><span class="hljs-comment"># 下载训练集与测试集</span><br>train_Data = datasets.MNIST(<br>    root = <span class="hljs-string">&#x27;F:\Jupyter\pytorch\dataset\mnist&#x27;</span>, <span class="hljs-comment"># 下载路径</span><br>    train = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 是train 集</span><br>    download = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 如果该路径没有该数据集，就下载</span><br>    transform = transform <span class="hljs-comment"># 数据集转换参数</span><br>)<br><br>test_Data = datasets.MNIST(<br>    root = <span class="hljs-string">&#x27;F:\Jupyter\pytorch\dataset\mnist&#x27;</span>, <span class="hljs-comment"># 下载路径</span><br>    train = <span class="hljs-literal">False</span>, <span class="hljs-comment"># 是test 集</span><br>    download = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 如果该路径没有该数据集，就下载</span><br>    transform = transform <span class="hljs-comment"># 数据集转换参数</span><br>)<br><br><span class="hljs-comment"># 批次加载器</span><br>train_loader = DataLoader(train_Data, shuffle=<span class="hljs-literal">True</span>, batch_size=<span class="hljs-number">64</span>)<br>test_loader = DataLoader(test_Data, shuffle=<span class="hljs-literal">False</span>, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">每个样本的输入都是形状为2828的二维数组，那么对于 DNN 来说，输入层的神经元节点就要有28x28 = 784个；输出层使用独热编码，需要 10 个节点。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>        nn.Flatten(), <span class="hljs-comment"># 把图像铺平成一维</span><br>        nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">512</span>), nn.ReLU(), <span class="hljs-comment"># 第1 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">256</span>), nn.ReLU(), <span class="hljs-comment"># 第2 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">128</span>), nn.ReLU(), <span class="hljs-comment"># 第3 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>), nn.ReLU(), <span class="hljs-comment"># 第4 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>) <span class="hljs-comment"># 第5 层：全连接层</span><br>    )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br><br>model = DNN().to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 创建子类的实例，并搬到GPU 上</span><br>model <span class="hljs-comment"># 查看该实例的各层</span><br><br><span class="hljs-comment"># 损失函数的选择</span><br>loss_fn = nn.CrossEntropyLoss() <span class="hljs-comment"># 自带softmax 激活函数</span><br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.01</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.SGD(<br>    model.parameters(),<br>    lr = learning_rate,<br>    momentum = <span class="hljs-number">0.5</span><br>)<br><br><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">5</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> train_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        x, y = x.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>), y.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        loss = loss_fn(Pred, y) <span class="hljs-comment"># 计算损失函数</span><br>        losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>        loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>        optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(losses)), losses)<br>plt.show()<br><br><span class="hljs-comment"># 测试网络</span><br>correct = <span class="hljs-number">0</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> test_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        x, y = x.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>), y.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        _, predicted = torch.<span class="hljs-built_in">max</span>(Pred.data, dim=<span class="hljs-number">1</span>)<br>        correct += torch.<span class="hljs-built_in">sum</span>( (predicted == y) )<br>        total += y.size(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302232034.png" /></p><p>测试集精准度: 97.06999969482422 %</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>大模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>学习笔记</tag>
      
      <tag>python</tag>
      
      <tag>深度学习</tag>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ICEM常遇问题</title>
    <link href="/2024/06/29/025%20ICEM%E5%B8%B8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2024/06/29/025%20ICEM%E5%B8%B8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="d-网格不闭合">2D 网格不闭合</h2><blockquote><p>Mesh has uncovered edges. ANSYS Fluent needs a complete boundary(lines in 2D) or it will give a variety of errors and not read in themesh! If this was 2D Hexa, perhaps your edges are not associated withperimeter curves</p></blockquote><p>原因是线和线之间可能没有关联</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202302161539612.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>ICEM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>ICEM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nest学习笔记</title>
    <link href="/2024/06/29/024%20Nest%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/29/024%20Nest%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一起步">一、起步</h1><h2 id="项目创建">1.1 项目创建</h2><p>安装脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm i -g @nestjs/cli<br></code></pre></td></tr></table></figure><p>创建新项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest new project-name<br></code></pre></td></tr></table></figure><h2 id="项目文件">1.2 项目文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">src<br> ├── app.controller.spec.ts<br> ├── app.controller.ts<br> ├── app.module.ts<br> ├── app.service.ts<br> └── main.ts<br></code></pre></td></tr></table></figure><p>含义</p><table><thead><tr><th>文件名</th><th>含义</th></tr></thead><tbody><tr><td>app.controller.ts</td><td>带有单个路由的基本控制器示例。</td></tr><tr><td>app.controller.spec.ts</td><td>对于基本控制器的单元测试样例</td></tr><tr><td>app.module.ts</td><td>应用程序的根模块。</td></tr><tr><td>app.service.ts</td><td>带有单个方法的基本服务</td></tr><tr><td>main.ts</td><td>应用程序入口文件。它使用 <code>NestFactory</code> 用来创建 Nest应用实例。</td></tr></tbody></table><h2 id="启动项目">1.3 启动项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> demo1<br>yarn run start<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113144220518.png"alt="image-20230113144220518" /><figcaption aria-hidden="true">image-20230113144220518</figcaption></figure><p>热启动项目（实时更新）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn start:dev<br></code></pre></td></tr></table></figure><h2 id="主文件">1.4 主文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/core&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.module&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><p>要创建一个 Nest 应用实例，我们使用了 <code>NestFactory</code>核心类。<code>NestFactory</code>暴露了一些静态方法用于创建应用实例。</p><p><code>create()</code> 方法返回一个实现 <code>INestApplication</code>接口的对象。该对象提供了一组可用的方法，我们会在后面的章节中对这些方法进行详细描述。在上面的 <code>main.ts</code> 示例中，我们只是启动 HTTP服务，让应用程序等待 HTTP 请求。</p><h2 id="创建-moudle">1.5 创建 Moudle</h2><h3 id="手动创建">1.5.1 手动创建</h3><p>src/auth/auth.moudle.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>导入到 app 中</p><p>src/app.module.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth/auth.module&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">AuthModule</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="命令行创建">1.5.2 命令行创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">nest g module user<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113165522565.png"alt="image-20230113165522565" /><figcaption aria-hidden="true">image-20230113165522565</figcaption></figure><h2 id="创建完整模块">1.6 创建完整模块</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113170716951.png"alt="image-20230113170716951" /><figcaption aria-hidden="true">image-20230113170716951</figcaption></figure><p>controller 关注于请求的逻辑</p><p>service 关注具体实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/auth/auth.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthContriller</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.controller&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.service&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthContriller</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/auth/auth.controller.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.service&quot;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&quot;auth&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthContriller</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> authService: AuthService</span>) &#123;&#125;<br><br>  <span class="hljs-comment">// Post auth/signup</span><br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&quot;signup&quot;</span>)<br>  <span class="hljs-title function_">signup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">signup</span>();<br>  &#125;<br><br>  <span class="hljs-comment">// Post auth/signin</span><br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&quot;signin&quot;</span>)<br>  <span class="hljs-title function_">signin</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">signin</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/auth/auth.service.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>  <span class="hljs-title function_">signup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;This is a signup page!&quot;</span> &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">signin</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;This is a signin page!&quot;</span> &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二基本概念">二、基本概念</h1><h2 id="控制器">2.1 控制器</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113144733598.png"alt="image-20230113144733598" /><figcaption aria-hidden="true">image-20230113144733598</figcaption></figure><p>目的：接受应用的特定请求；</p><p>控制器与路由：通常一个控制器含多个请求，不同的路由执行不同的操纵；</p><p>创建控制器：使用类和<code>装饰器</code>；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest g controller cats<br></code></pre></td></tr></table></figure><h3 id="路由">2.1.1 路由</h3><p>在下面的例子中，我们使用 <code>@Controller()</code>装饰器定义一个基本的控制器。</p><p>可选 路由路径前缀设置为 <code>custom</code>。在<code>@Controller()</code>装饰器中使用路径前缀可以使我们轻松地对一组相关的路由进行分组，并最大程度地减少重复代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// app.controller.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.service&quot;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&quot;/custom&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> appService: AppService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&quot;/eye&quot;</span>)<br>  <span class="hljs-title function_">getEye</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是眼睛&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&quot;/mouse&quot;</span>)<br>  <span class="hljs-title function_">getMouse</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是嘴巴&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113145438467.png"alt="image-20230113145438467" /><figcaption aria-hidden="true">image-20230113145438467</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113145600949.png"alt="image-20230113145600949" /><figcaption aria-hidden="true">image-20230113145600949</figcaption></figure><blockquote><p>这里案例来说应该返回状态码加数据，而网页中直接显示了数据，原因是 nest有两种操作响应。</p><p>标准：使用这个内置方法，当请求处理程序返回一个<code>JavaScript</code> 对象或数组时，它将自动序列化为<code>JSON</code>。但是，当它返回一个 <code>JavaScript</code>基本类型（例如<code>string、number、boolean</code>）时， Nest将只发送值，而不尝试序列化它。这使响应处理变得简单：只需要返回值，其余的由Nest 负责。</p><p>类库特有：我们可以在函数签名处通过 <code>@Res()</code>注入类库特定的响应对象（例如，<code>Express</code>）。使用此方法，你就能使用由该响应对象暴露的原生响应处理函数。例如，使用<code>Express</code>，您可以使用<code>response.status(200).send()</code> 构建响应</p></blockquote><p>类库特有</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;head&#x27;</span>)<br><span class="hljs-title function_">getHead</span>(<span class="hljs-params"><span class="hljs-meta">@Res</span>() res</span>) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">OK</span>).<span class="hljs-title function_">send</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>而且，在上面的示例中，你失去与依赖于 Nest 标准响应处理的 Nest功能（例如，拦截器（Interceptors） 和<code>@HttpCode()</code>/<code>@Header()</code>装饰器）的兼容性。要解决此问题，可以将 <code>passthrough</code>选项设置为 <code>true</code>，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;head&#x27;</span>)<br><span class="hljs-title function_">getHead</span>(<span class="hljs-params"><span class="hljs-meta">@Res</span>(&#123;passthrough:<span class="hljs-literal">true</span>&#125;) res</span>) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">OK</span>)<br>    <span class="hljs-keyword">return</span> []<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="request">2.1.2 <ahref="https://docs.nestjs.cn/9/controllers?id=request">Request</a></h3><p>访问请求细节。</p><p>需要引入<code>Req</code>和<code>import &#123;Request&#125; from 'express';</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Req</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.service&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;express&quot;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&quot;/custom&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> appService: AppService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&quot;/eye&quot;</span>)<br>  <span class="hljs-title function_">getEye</span>(<span class="hljs-meta">@Req</span>() <span class="hljs-attr">request</span>: <span class="hljs-title class_">Request</span>): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-comment">// 这里的Request表示类型</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是眼睛&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>Request</code> 对象代表 <code>HTTP</code>请求，并具有查询字符串，请求参数参数，HTTP 标头（HTTP header） 和正文（HTTP body）的属性（在<ahref="https://expressjs.com/en/api.html#req">这里</a>阅读更多）。在多数情况下，不必手动获取它们。我们可以使用专用的装饰器，比如开箱即用的 <code>@Body()</code> 或<code>@Query()</code> 。 下面是 Nest提供的装饰器及其代表的底层平台特定对象的对照列表。</p></blockquote><p>多个装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/eye&#x27;</span>)<br><span class="hljs-title function_">getEye</span>(<span class="hljs-meta">@Req</span>() <span class="hljs-attr">request</span>:<span class="hljs-title class_">Request</span>,<span class="hljs-meta">@Ip</span>() ip,<span class="hljs-meta">@HostParam</span>() host): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">ip</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ip);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(host);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是眼睛&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="post">2.1.3 Post</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;/foot&#x27;</span>)<br><span class="hljs-title function_">getFoot</span>():<span class="hljs-built_in">string</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是脚&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113153133595.png"alt="image-20230113153133595" /><figcaption aria-hidden="true">image-20230113153133595</figcaption></figure><blockquote><p>Nest 为所有标准的 HTTP方法提供了相应的装饰器：<code>@Put()</code>、<code>@Delete()</code>、<code>@Patch()</code>、<code>@Options()</code>、以及<code>@Head()</code>。此外，<code>@All()</code>则用于定义一个用于处理所有 HTTP 请求方法的处理程序。</p></blockquote><h3 id="路由通配符">2.1.4 路由通配符</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;hand*s&#x27;</span>)<br><span class="hljs-title function_">getHead</span>():<span class="hljs-built_in">string</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是手&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113154504739.png"alt="image-20230113154504739" /><figcaption aria-hidden="true">image-20230113154504739</figcaption></figure><blockquote><p>路由路径 <code>'ab*cd'</code> 将匹配 <code>abcd</code>、<code>ab_cd</code> 、<code>abecd</code> 等。字符 <code>?</code>、<code>+</code> 、 <code>*</code> 以及 <code>()</code>是它们的正则表达式对应项的子集。连字符（<code>-</code>）和点（<code>.</code>）按字符串路径逐字解析。</p></blockquote><h3 id="状态码">2.1.5 状态码</h3><p>状态码默认是 200（post 为201），可通过<code>@HttpCode()</code>更改状态码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;foot&#x27;</span>)<br><span class="hljs-meta">@HttpCode</span>(<span class="hljs-number">204</span>)<br><span class="hljs-title function_">getFoot</span>():<span class="hljs-built_in">string</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是脚&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="headers">2.1.6 <ahref="https://docs.nestjs.cn/9/controllers?id=headers">Headers</a></h3><p>指定自定义响应头，可以使用 <code>@header()</code>装饰器或类库特有的响应对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Post</span>()<br><span class="hljs-meta">@Header</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>)<br><span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;This action adds a new cat&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重定向">2.1.7 重定向</h3><p>要将响应重定向到特定的 <code>URL</code>，可以使用<code>@Redirect()</code> 装饰器或特定于库的响应对象</p><p><code>@Redirect()</code>装饰器有两个可选参数，<code>url</code>和<code>statusCode</code>。 如果省略，则 <code>statusCode</code> 默认为<code>302</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>()<br><span class="hljs-meta">@Redirect</span>(<span class="hljs-string">&#x27;https://nestjs.com&#x27;</span>, <span class="hljs-number">301</span>)<br></code></pre></td></tr></table></figure><h3 id="路由参数">2.1.8 路由参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;mouse/:id&#x27;</span>)<br><span class="hljs-title function_">getMouseId</span>(<span class="hljs-meta">@Param</span>() params): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`我是嘴巴<span class="hljs-subst">$&#123;params.id&#125;</span>`</span><br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113155638965.png"alt="image-20230113155638965" /><figcaption aria-hidden="true">image-20230113155638965</figcaption></figure><p>或者写成</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;mouse/:id&#x27;</span>)<br><span class="hljs-title function_">getMouseId</span>(<span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) id): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`我是嘴巴<span class="hljs-subst">$&#123;id&#125;</span>`</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子域路由">2.1.9 <ahref="https://docs.nestjs.cn/9/controllers?id=子域路由">子域路由</a></h3><p><code>@Controller</code> 装饰器可以接受一个 <code>host</code>选项，以要求传入请求的 <code>HTTP</code> 主机匹配某个特定值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span>(&#123; <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;admin.example.com&quot;</span> &#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminController</span> &#123;<br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-title function_">index</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Admin page&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步性">2.1.10 异步性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* cats.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>()<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>[]&gt; &#123;<br>  <span class="hljs-keyword">return</span> [];<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="请求负载">2.1.11 请求负载</h3><p>首先（如果您使用 TypeScript），我们需要确定<code>DTO</code>（数据传输对象）模式。<code>DTO</code>是一个对象，它定义了如何通过网络发送数据。我们可以通过使用<strong>TypeScript</strong> 接口（Interface）或简单的类（Class）来定义DTO 模式。有趣的是，我们在这里推荐使用<strong>类</strong>。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113193701850.png"alt="image-20230113193701850" /><figcaption aria-hidden="true">image-20230113193701850</figcaption></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  create-auto.dto.ts</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateAuthDto</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auto.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;getUser/:id&#x27;</span>)<br><span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@Body</span>() body:CreateAuthDto,</span><br><span class="hljs-params">    <span class="hljs-meta">@Param</span>() params:&#123;id:<span class="hljs-built_in">number</span>&#125;</span><br><span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">getUser</span>(body,params);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auto.service.ts */</span><br><br><span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span><br><span class="hljs-params">    body:CreateAuthDto,</span><br><span class="hljs-params">    params:&#123;id:<span class="hljs-built_in">number</span>&#125;</span><br><span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:body,params&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六管道">六、管道</h1><h2 id="应用场景">6.1 应用场景</h2><p>管道有两个典型的应用场景:</p><ul><li><strong>转换</strong>：管道将输入数据转换为所需的数据输出(例如，将字符串转换为整数)</li><li><strong>验证</strong>：对输入数据进行验证，如果验证成功继续传递;验证失败则抛出异常</li></ul><h2 id="内置管道">6.2 内置管道</h2><p><code>Nest</code> 自带九个开箱即用的管道，即</p><ul><li><code>ValidationPipe</code></li><li><code>ParseIntPipe</code></li><li><code>ParseFloatPipe</code></li><li><code>ParseBoolPipe</code></li><li><code>ParseArrayPipe</code></li><li><code>ParseUUIDPipe</code></li><li><code>ParseEnumPipe</code></li><li><code>DefaultValuePipe</code></li><li><code>ParseFilePipe</code></li></ul><p>他们从 <code>@nestjs/common</code> 包中导出。</p><h2 id="绑定管道">6.3 绑定管道</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;searchUser/:useId&#x27;</span>)<br><span class="hljs-title function_">searchUser</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;useId&#x27;</span>,ParseIntPipe) id:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">searchUser</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.service.ts */</span><br><br><span class="hljs-title function_">searchUser</span>(<span class="hljs-params">id:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:id&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里绑定的管道是一个类而不是一个实例对象，如果要改变内置管道的行为，在绑定时通过new 新建一个实例对象并绑定</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;searchUser/:useId&#x27;</span>)<br><span class="hljs-title function_">searchUser</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;useId&#x27;</span>,<span class="hljs-keyword">new</span> ParseIntPipe(&#123; errorHttpStatusCode: HttpStatus.NOT_ACCEPTABLE &#125;)) id:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">searchUser</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>且会将 string 转换为 int</p></blockquote><p>成功</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113195136018.png"alt="image-20230113195136018" /><figcaption aria-hidden="true">image-20230113195136018</figcaption></figure><p>失败</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113195219407.png"alt="image-20230113195219407" /><figcaption aria-hidden="true">image-20230113195219407</figcaption></figure><h1 id="七技术">七、技术</h1><h2 id="验证">7.1<ahref="https://docs.nestjs.cn/9/techniques?id=%e9%aa%8c%e8%af%81">验证</a></h2><h3 id="全局使用">7.1.1 全局使用</h3><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm i --save class-validator class-transformer<br></code></pre></td></tr></table></figure><p>注入全局验证管道</p><p><code>app.useGlobalPipes(new ValidationPipe())</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* main.ts */</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestApplication</span>, <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/core&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.module&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>());<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><p>Dto</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsEmail</span>, <span class="hljs-title class_">IsNotEmpty</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;class-validator&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateAuthDto</span> &#123;<br>  <span class="hljs-meta">@IsEmail</span>()<br>  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// email验证</span><br><br>  <span class="hljs-meta">@IsNotEmpty</span>()<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 不为空验证</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用验证</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;updateUser&#x27;</span>)<br><span class="hljs-title function_">updateUser</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() body:UpdateAuthDto</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">updateUser</span>(body);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.service.ts */</span><br><br><span class="hljs-title function_">updateUser</span>(<span class="hljs-params">body:UpdateAuthDto</span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:body&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>失败</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113211331532.png"alt="image-20230113211331532" /><figcaption aria-hidden="true">image-20230113211331532</figcaption></figure><p>成功</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113211258694.png"alt="image-20230113211258694" /><figcaption aria-hidden="true">image-20230113211258694</figcaption></figure><h3 id="剥离属性">7.1.2 剥离属性</h3><blockquote><p>有时我们不处理 token这个字段，而前端在请求时发送了这个字段，这是可以使用剥离属性，将不接受用不到的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">app.<span class="hljs-title function_">useGlobalPipes</span>(<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>(&#123;<br>    <span class="hljs-attr">whitelist</span>: <span class="hljs-literal">true</span>,<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><p>使用后</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113212050272.png"alt="image-20230113212050272" /><figcaption aria-hidden="true">image-20230113212050272</figcaption></figure><h3 id="使用管道转换">7.1.3 使用管道转换</h3><p>如我们在发送 get 请求时，携带 body 中有 age，但是发送到后端 age 变成string，我们需要将 string 变成 int，只需要使用 6.3 即可。</p><h2 id="使用-mongo-数据库">7.2 使用 Mongo 数据库</h2><h3 id="基本步骤">7.2.1 基本步骤</h3><p>安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add --save @nestjs/mongoose mongoose<br></code></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* app.module.ts */</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongooseModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/mongoose&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth/auth.module&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">AuthModule</span>,<br>    <span class="hljs-title class_">MongooseModule</span>.<span class="hljs-title function_">forRoot</span>(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017/musicians&quot;</span>),<br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>表示连接 musicians 数据库</p></blockquote><p>创建一个模型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* src/auth/schema/users.schema.ts */</span><br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> mongoose <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mongoose&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Schema</span> = mongoose.<span class="hljs-property">Schema</span>;<br><span class="hljs-keyword">const</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">UserSchema</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">username</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">password</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">mobile</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">email</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">status</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">role_id</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">add_time</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: d.<span class="hljs-title function_">getTime</span>() &#125;,<br>  <span class="hljs-attr">is_supper</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span> &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>引入模型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthContriller</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.controller&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.service&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongooseModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/mongoose&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserSchema</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./schema/users.schema&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">MongooseModule</span>.<span class="hljs-title function_">forFeature</span>([<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>        <span class="hljs-attr">schema</span>: <span class="hljs-title class_">UserSchema</span>,<br>        <span class="hljs-attr">collection</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>      &#125;,<br>    ]),<br>  ],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthContriller</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>模型的名称为 User，集合 test</p><p>使用模型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectModel</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/mongoose&quot;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@InjectModel</span>(<span class="hljs-string">&quot;User&quot;</span>) <span class="hljs-keyword">private</span> userModel</span>) &#123;&#125;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">signup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">exec</span>();<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">msg</span>: result &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>依赖注入创建 userModel 属性</p></blockquote><p>创建成功</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230114213520674.png"alt="image-20230114213520674" /><figcaption aria-hidden="true">image-20230114213520674</figcaption></figure><h3 id="crud">7.2.2 CRUD</h3><p>创建用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.controller.ts */</span><br><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;addUser&#x27;</span>)<br><span class="hljs-title function_">addUser</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() body:<span class="hljs-built_in">any</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">addUser</span>(body);<br>&#125;<br><br><br><span class="hljs-comment">/* auth.service.ts */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params">body:<span class="hljs-built_in">any</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">create</span>(body);<br>    <span class="hljs-keyword">return</span> body;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230114214717752.png"alt="image-20230114214717752" /><figcaption aria-hidden="true">image-20230114214717752</figcaption></figure><p>查询所有用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">exec</span>();<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:result&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找单个用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">findOne</span>(<span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">User</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">findById</span>(_id);<br>&#125;<br></code></pre></td></tr></table></figure><p>编辑单个用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">editOne</span>(<span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">body</span>: <span class="hljs-title class_">EditUserDTO</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">findByIdAndUpdate</span>(_id, body);<br>&#125;<br></code></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">deleteOne</span>(<span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">findByIdAndDelete</span>(_id);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="附件">附件</h1><h2 id="装饰器">装饰器</h2><table><thead><tr><th>装饰器</th><th>含义</th></tr></thead><tbody><tr><td><span class="citation"data-cites="Controller">@Controller</span>()</td><td>定义一个基本控制器</td></tr><tr><td><span class="citation" data-cites="Get">@Get</span>()</td><td>定义一个 get 接口</td></tr><tr><td><span class="citation" data-cites="Post">@Post</span>()</td><td>定义一个 post 接口</td></tr><tr><td><span class="citation" data-cites="Put">@Put</span>()</td><td>定义一个 put 接口</td></tr><tr><td><span class="citation" data-cites="Delete">@Delete</span>()</td><td>定义一个 delete 接口</td></tr><tr><td><span class="citation" data-cites="Patch">@Patch</span>()</td><td>定义一个 patch 接口</td></tr><tr><td><span class="citation" data-cites="Options">@Options</span>()</td><td>定义一个 option 接口</td></tr><tr><td><span class="citation" data-cites="All">@All</span>()</td><td>定义一个处理所有 HTTP 请求的接口</td></tr><tr><td><span class="citation" data-cites="Request">@Request</span>()，<spanclass="citation" data-cites="Req">@Req</span>()</td><td>对应 req，Nest 将请求对象注入处理到</td></tr><tr><td><span class="citation"data-cites="Response">@Response</span>()，<span class="citation"data-cites="Res">@Res</span>()*</td><td>对应 res</td></tr><tr><td><span class="citation" data-cites="Next">@Next</span>()</td><td>对应 next</td></tr><tr><td><span class="citation" data-cites="Session">@Session</span>()</td><td>对应 req.session</td></tr><tr><td><span class="citation" data-cites="Param">@Param</span>(key?:string)</td><td>对应 req.params<code>/</code>req.params[key] get</td></tr><tr><td><span class="citation" data-cites="Body">@Body</span>(key?:string)</td><td>对应 req.body<code>/</code>req.body[key] post</td></tr><tr><td><span class="citation" data-cites="Query">@Query</span>(key?:string)</td><td>对应 req.query<code>/</code>req.query[key]</td></tr><tr><td><span class="citation" data-cites="Headers">@Headers</span>(name?:string)</td><td>对应 req.headers<code>/</code>req.headers[name]</td></tr><tr><td><span class="citation" data-cites="Ip">@Ip</span>()</td><td>对应 req.ip</td></tr><tr><td><span class="citation"data-cites="HostParam">@HostParam</span>()</td><td>对应 req.hosts</td></tr><tr><td><span class="citation" data-cites="HttpCode">@HttpCode</span>()</td><td>更改状态码</td></tr><tr><td><span class="citation" data-cites="Header">@Header</span>()</td><td>更改请求头</td></tr><tr><td><span class="citation" data-cites="Module">@Module</span>()</td><td>定义模块</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>后端</category>
      
      <category>Nest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>后端</tag>
      
      <tag>Nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python调用REFPROP</title>
    <link href="/2024/06/29/023%20Python%E8%B0%83%E7%94%A8REFPROP/"/>
    <url>/2024/06/29/023%20Python%E8%B0%83%E7%94%A8REFPROP/</url>
    
    <content type="html"><![CDATA[<h1 id="python-调用-refprop">python 调用 REFPROP</h1><h2 id="安装调试">1、安装调试</h2><ol type="1"><li>安装 refprop10</li><li>安装 python 库<code>pip install ctREFPROP</code></li></ol><p>测试使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> ctREFPROP.ctREFPROP <span class="hljs-keyword">import</span> REFPROPFunctionLibrary<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">NBP</span>():<br>    RP = REFPROPFunctionLibrary(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br>    RP.SETPATHdll(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br>    <span class="hljs-built_in">print</span>(RP.RPVersion())<br>    MOLAR_BASE_SI = RP.GETENUMdll(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;MOLAR BASE SI&quot;</span>).iEnum<br><br>    r = RP.REFPROPdll(<span class="hljs-string">&quot;PROPANE&quot;</span>,<span class="hljs-string">&quot;PQ&quot;</span>,<span class="hljs-string">&quot;T&quot;</span>,MOLAR_BASE_SI, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">101325</span>, <span class="hljs-number">0</span>, [<span class="hljs-number">1.0</span>])<br>    <span class="hljs-built_in">print</span>(r.ierr, r.herr, r.Output[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 路径</span><br>    os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>] = <span class="hljs-string">r&#x27;D:/REFPROP10&#x27;</span><br><br>    NBP()<br><br>&gt;&gt;<br><span class="hljs-number">10.0</span><br><span class="hljs-number">0</span>  <span class="hljs-number">231.0362479100902</span><br></code></pre></td></tr></table></figure><h2 id="基本语法">2、基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> ctREFPROP.ctREFPROP <span class="hljs-keyword">import</span> REFPROPFunctionLibrary<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_properties</span>():<br>    <span class="hljs-comment"># 初始化REFPROP</span><br>    RP = REFPROPFunctionLibrary(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br>    RP.SETPATHdll(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br><br>    <span class="hljs-comment"># 将单位设置为国际单位制（摩尔基准）</span><br>    MOLAR_BASE_SI = RP.GETENUMdll(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;MASS BASE SI&quot;</span>).iEnum<br><br>    <span class="hljs-comment"># 指定物质（氢）、计算类型（H为焓值，D为密度，S为熵值）</span><br>    substance = <span class="hljs-string">&quot;HYDROGEN&quot;</span><br><br>    <span class="hljs-comment"># 指定输入条件（温度、压力）</span><br>    temperature = <span class="hljs-number">298.15</span>  <span class="hljs-comment"># 单位：K</span><br>    pressure = <span class="hljs-number">101325</span>  <span class="hljs-comment"># 单位：Pa</span><br><br>    <span class="hljs-comment"># 调用REFPROPdll计算性质</span><br>    H_result = RP.REFPROPdll(substance, <span class="hljs-string">&quot;PT&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>,  MOLAR_BASE_SI, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pressure, temperature, [<span class="hljs-number">1.0</span>]) <span class="hljs-comment"># J/kg</span><br>    D_result = RP.REFPROPdll(substance, <span class="hljs-string">&quot;PT&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,  MOLAR_BASE_SI, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pressure, temperature, [<span class="hljs-number">1.0</span>]) <span class="hljs-comment"># kg/m3</span><br>    S_result = RP.REFPROPdll(substance, <span class="hljs-string">&quot;PT&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>,  MOLAR_BASE_SI, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pressure, temperature, [<span class="hljs-number">1.0</span>]) <span class="hljs-comment"># J/(kg·K)</span><br>    <span class="hljs-comment"># 检查是否有错误</span><br>    <span class="hljs-keyword">if</span> H_result.ierr == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> D_result.ierr == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> S_result.ierr == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算得到的H=:&quot;</span>,H_result.Output[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算得到的D=:&quot;</span>,D_result.Output[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算得到的S=:&quot;</span>,S_result.Output[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: <span class="hljs-subst">&#123;H_result.herr&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 路径</span><br>    os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>] = <span class="hljs-string">r&#x27;D:/REFPROP10&#x27;</span><br><br>    calculate_properties()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>REFPROP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Native常遇问题</title>
    <link href="/2024/06/29/022%20React%20Native%E5%B8%B8%E9%81%87%E9%97%AE%E9%A2%98/"/>
    <url>/2024/06/29/022%20React%20Native%E5%B8%B8%E9%81%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/11 晚上</p>          </div><h2id="textinput聚焦弹起键盘">1、<code>TextInput</code>聚焦弹起键盘</h2><p>使用以下方式并不能直接弹起键盘，原因尚不清楚，可能是由于<code>setModalVisible</code>的异步性导致的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleModal</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">setModalVisible</span>(!isModalVisible);<br>  <span class="hljs-keyword">if</span> (!isModalVisible) &#123;<br>    inputRef?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">focus</span>();<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以变化一下思路，聚焦——&gt;失去焦点——&gt;聚焦，聚焦 10ms之后失去焦点，失去焦点触发<code>onBlur</code>函数后再聚焦</p><p>代码如下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleModal</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">setModalVisible</span>(!isModalVisible);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inputRef);<br>  <span class="hljs-keyword">if</span> (!isModalVisible) &#123;<br>    inputRef?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">focus</span>();<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title class_">Keyboard</span>.<span class="hljs-title function_">dismiss</span>();<br>    &#125;, <span class="hljs-number">10</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 输入框</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextInputonBlur</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">    inputRef?.current?.focus();</span><br><span class="language-xml">  &#125;&#125;</span><br><span class="language-xml">/&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>这里一定要使用<code>async</code>和<code>await</code></p></blockquote><h2 id="useref获取组件实例">2、<code>useRef</code>获取组件实例</h2><p>使用钩子<code>useRef</code>获取组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 创建useRef实例</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">textInput</span>: <span class="hljs-built_in">any</span> = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 挂在</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;textInput&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;searchText&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">onChangeText</span>=<span class="hljs-string">&#123;(text)</span> =&gt;</span> setSearchText(text)&#125;</span><br><span class="language-xml">/&gt;</span>;<br><br><span class="hljs-comment">// 获取组件实例</span><br>textInput?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">value</span>();<br></code></pre></td></tr></table></figure><h2 id="父组件调用子组件方法并传值">3、父组件调用子组件方法并传值</h2><ol type="1"><li>父子间挂在子组件</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">notionModalRef</span>:<span class="hljs-built_in">any</span> = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br><br>&lt;<span class="hljs-title class_">CreateNotionModal</span> props=&#123;&#123;toggleModal,isModalVisible,id&#125;&#125; ref=&#123;notionModalRef&#125;/&gt;<br></code></pre></td></tr></table></figure><p>其中<code>props</code>用于传递对象值，<code>ref</code>用于传递组件</p><ol start="2" type="1"><li>获取组件以及数据</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">&#123; props &#125;: <span class="hljs-built_in">any</span>, ref: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; notionModalRef &#125; = ref;<br>  <span class="hljs-keyword">const</span> &#123; toggleModal, isModalVisible, id &#125; = props;<br><br>  <span class="hljs-comment">// 子组件向父组件暴露方法</span><br>  <span class="hljs-title function_">useImperativeHandle</span>(notionModalRef, <span class="hljs-function">() =&gt;</span> (&#123;<br>    inputOnFocus,<br>  &#125;));<br><br>  <span class="hljs-comment">// 切换模态框</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">inputOnFocus</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.centeredView&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.modalView&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">multiline</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.input&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">maxLength</span>=<span class="hljs-string">&#123;1000&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">autoFocus</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;textInput&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            inputRef?.current?.focus();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">          onChangeText=&#123;(text) =&gt; setTextInput(text)&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.modalBtn&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              toggleModal();</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span> <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;&#125; &#125;&gt; */&#125;</span><br><span class="language-xml">            &#123;(&#123; pressed &#125;) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.cancel&#125;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span>&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Pressable</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;async</span> () =&gt;</span> &#123;</span><br><span class="language-xml">              setTextInput(await pasteFromClipboard(textInput));</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            &#123;(&#123; pressed &#125;) =&gt; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Ionicons</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;Colors.light.tint&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;clipboard-outline&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;30&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginRight:</span> <span class="hljs-attr">15</span>, <span class="hljs-attr">opacity:</span> <span class="hljs-attr">pressed</span> ? <span class="hljs-attr">0.5</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            )&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Pressable</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span> <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;create&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;(&#123; pressed &#125;) =&gt; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Ionicons</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;Colors.light.tint&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;send-outline&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;30&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginRight:</span> <span class="hljs-attr">15</span>, <span class="hljs-attr">opacity:</span> <span class="hljs-attr">pressed</span> ? <span class="hljs-attr">0.5</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            )&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Pressable</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">  );</span><br><span class="language-xml">&#125;);</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>使用</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">notionModalRef?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">inputOnFocus</span>();<br></code></pre></td></tr></table></figure><blockquote><p>我这里用到了<code>useState</code>的数据，注意状态变化，即组件是否显示与<code>notionModalRef?.current?.inputOnFocus()</code>的关系</p></blockquote><h2 id="expo-抽屉打开与关闭">4、expo 抽屉打开与关闭</h2><p>试了很多种方法，都是显示<code>closeDrawer</code>未定义</p><p>可以使用<code>@react-navigation/native</code>中的<code>DrawerActions</code>和<code>useNavigation</code>组合实现抽屉打开与关闭</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DrawerActions</span>, useNavigation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">CustomDrawer</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigation = <span class="hljs-title function_">useNavigation</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">tagRename</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    navigation.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title class_">DrawerActions</span>.<span class="hljs-title function_">closeDrawer</span>());<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="全局数据储存">5、全局数据储存</h2><p>使用<code>useContext</code>存储全局变量。</p><ol type="1"><li>首先创建<code>context</code>实例，对外暴露一个数据对象，里面可包含数值、函数等</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">SqliteType</span> = &#123;<br>  <span class="hljs-attr">db</span>: <span class="hljs-title class_">SQLite</span>.<span class="hljs-property">SQLiteDatabase</span> | <span class="hljs-literal">null</span> | <span class="hljs-built_in">any</span>;<br>  <span class="hljs-attr">openDb</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  <span class="hljs-attr">getDbFile</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  <span class="hljs-attr">exeSql</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>, data: <span class="hljs-built_in">any</span>[]</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SqliteContext</span> = createContext&lt;<span class="hljs-title class_">SqliteType</span>&gt;(&#123;<br>  <span class="hljs-attr">db</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">openDb</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>  <span class="hljs-attr">getDbFile</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>  <span class="hljs-attr">exeSql</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>创建提供者</li></ol><blockquote><p>这里使用<code>useRef</code>创建数据，使用<code>useState</code>在异步函数中会出现问题</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">SqliteProvider</span> = (<span class="hljs-params">&#123;children&#125;:PropsWithChildren</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> db = useRef&lt;<span class="hljs-literal">null</span>|<span class="hljs-title class_">SQLite</span>.<span class="hljs-property">SQLiteDatabase</span>&gt;(<span class="hljs-literal">null</span>)<br><br>    <span class="hljs-comment">// 打开数据库</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">openDb</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 获取远程db数据</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getDbFile</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 执行语句</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">exeSql</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"><span class="hljs-keyword">type</span>:<span class="hljs-built_in">string</span>,data:<span class="hljs-built_in">any</span>[]</span>) =&gt; &#123;<br><br>      &#125;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>对外暴露的数据</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">SqliteProvider</span> = (<span class="hljs-params">&#123;children&#125;:PropsWithChildren</span>) =&gt; &#123;<br>    ...<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SqliteContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;db,openDb,getDbFile,exeSql&#125;&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;children&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">SqliteContext.Provider</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>导出提供者及<code>useContext(SqliteContext)</code>实例</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">SqliteProvider</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useSqlite</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">SqliteContext</span>);<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>监听组件</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">RootLayoutNav</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SqliteProvider</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Stack</span> <span class="hljs-attr">screenOptions</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">headerShown:</span> <span class="hljs-attr">false</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Stack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;(drawer)&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">headerShown:</span> <span class="hljs-attr">false</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Stack</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">SqliteProvider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6" type="1"><li>使用</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> &#123; exeSql, getDbFile &#125; = <span class="hljs-title function_">useSqlite</span>();<br></code></pre></td></tr></table></figure><h2 id="sqlite实现增删改查">6、<code>sqlite</code>实现增删改查</h2><p>这里使用<code>execAsync</code>异步函数获取数据</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 执行语句</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">exeSql</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>, data: <span class="hljs-built_in">any</span>[]</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span> (db.<span class="hljs-property">current</span> == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库不存在&quot;</span>);<br>      <span class="hljs-title function_">openDb</span>();<br>    &#125;<br>    <span class="hljs-keyword">const</span> readOnly = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> db?.<span class="hljs-property">current</span><br>      ?.<span class="hljs-title function_">execAsync</span>([&#123; <span class="hljs-attr">sql</span>: sqls[<span class="hljs-keyword">type</span>], <span class="hljs-attr">args</span>: data &#125;], readOnly)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> data = result[<span class="hljs-number">0</span>]?.<span class="hljs-property">rows</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行结果&quot;</span>, result[<span class="hljs-number">0</span>]?.<span class="hljs-property">rows</span>);<br>        <span class="hljs-keyword">return</span> data;<br>      &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;An error occurred:&quot;</span>, error);<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllTags&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>这里封装一些<code>sql</code>语句</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">sqls</span>: <span class="hljs-built_in">any</span> = &#123;<br>  <span class="hljs-attr">searchAllNotions</span>: <span class="hljs-string">&quot;SELECT * FROM NOTIONS&quot;</span>,<br>  <span class="hljs-attr">insertNotion</span>:<br>    <span class="hljs-string">&quot;INSERT INTO NOTIONS (id,content,tag,create_time,update_time) VALUES (?, ?, ?, ?,?)&quot;</span>,<br>  <span class="hljs-attr">updateNotionById</span>:<br>    <span class="hljs-string">&quot;UPDATE notions SET content = ?,update_time = ? WHERE id = ?&quot;</span>,<br>  <span class="hljs-attr">searchNotionById</span>: <span class="hljs-string">&quot;SELECT content FROM notions WHERE id = ?&quot;</span>,<br>  <span class="hljs-attr">searchTagNameById</span>: <span class="hljs-string">&quot;SELECT name FROM tags WHERE id = ?&quot;</span>,<br>  <span class="hljs-attr">searchTagIdByName</span>: <span class="hljs-string">&quot;SELECT id FROM tags WHERE name = ?&quot;</span>,<br>  <span class="hljs-attr">searchChildrenTagsById</span>: <span class="hljs-string">&quot;SELECT name FROM tags WHERE father = ?&quot;</span>,<br>  <span class="hljs-attr">searchAllTags</span>: <span class="hljs-string">&quot;SELECT * FROM TAGS&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="dayjs简单使用">7、<code>dayjs</code>简单使用</h2><p>导入库</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br></code></pre></td></tr></table></figure><p>生成时间（毫秒）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">valueOf</span>();<br></code></pre></td></tr></table></figure><p>生成时间</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hour&quot;</span>).<span class="hljs-title function_">toISOString</span>();<br></code></pre></td></tr></table></figure><p>计算开始到现在的天数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><span class="hljs-keyword">import</span> relativeTime <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs/plugin/relativeTime&quot;</span>;<br><br>dayjs.<span class="hljs-title function_">extend</span>(relativeTime);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">dayjs</span>(created_at).<span class="hljs-title function_">fromNow</span>());<br></code></pre></td></tr></table></figure><h2 id="获取页面管线列表">8、获取页面管线列表</h2><p>当前页面处于的管线位置</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> segments = <span class="hljs-title function_">useSegments</span>() &gt; [<span class="hljs-string">&quot;(user)&quot;</span>, <span class="hljs-string">&quot;film&quot;</span>];<br></code></pre></td></tr></table></figure><h2 id="vscode-配置-prettier">9、vscode 配置 prettier</h2><p><ahref="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">prettier</a></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D prettier eslint-config-prettier eslint-plugin-prettier<br></code></pre></td></tr></table></figure><p>修改 vscode 设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;files.autoSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;onFocusChange&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 保存时自动格式化</span><br><span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;[typescript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;prettier.useEditorConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-comment">// 一定要取消，否则会使用vscode工作区设置，而不会使用.prettierrc.js</span><br></code></pre></td></tr></table></figure><p>在页面下新增文件<code>.prettierrc.js</code>，以下是我的默认配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> https://prettier.io/docs/en/options.html#print-width</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">lcm</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 换行宽度，当代码宽度达到多少时换行</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">printWidth</span>: <span class="hljs-number">80</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 缩进的空格数量</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> 2</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">tabWidth</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否使用制表符代替空格</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">useTabs</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否在代码块结尾加上分号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">true</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">semi</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否使用单引号替代双引号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 对象属性的引号处理</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;as-needed&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;as-needed&quot;|&quot;consistent&quot;|&quot;preserve&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">quoteProps</span>: <span class="hljs-string">&quot;as-needed&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * jsx中是否使用单引号替代双引号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">jsxSingleQuote</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 末尾是否加上逗号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;es5&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;es5&quot;|&quot;none&quot;|&quot;all&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">true</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">bracketSpacing</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 把多行HTML (HTML, JSX, Vue, Angular)元素的&gt;放在最后一行的末尾，而不是单独放在下一行(不适用于自关闭元素)。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">bracketSameLine</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当箭头函数只有一个参数是否加括号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;always&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;always&quot;|&quot;avoid&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">arrowParens</span>: <span class="hljs-string">&quot;avoid&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 为HTML、Vue、Angular和Handlebars指定全局空格敏感性</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;css&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;css&quot;|&quot;strict&quot;|&quot;ignore&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">htmlWhitespaceSensitivity</span>: <span class="hljs-string">&quot;ignore&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否缩进Vue文件中的&lt;script&gt;和&lt;style&gt;标记内的代码。有些人(比如Vue的创建者)不使用缩进来保存缩进级别，但这可能会破坏编辑器中的代码折叠。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;always&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;always&quot;|&quot;avoid&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">vueIndentScriptAndStyle</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 文件结束符</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;lf&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;lf&quot;|&quot;crlf&quot;|&quot;cr&quot;|&quot;auto&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">endOfLine</span>: <span class="hljs-string">&quot;crlf&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">proseWrap</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>  <span class="hljs-comment">// 是否使用根目录下的EditorConfig配置文件</span><br>  <span class="hljs-attr">useEditorConfig</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * HTML\VUE\JSX每行只有单个属性</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">true</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">singleAttributePerLine</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">disableLanguages</span>: [<span class="hljs-string">&quot;html&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>每次修改<code>.prettierrc.js</code>重启才能生效</p></blockquote><h2 id="解决异步获取数据组件不刷新">10、解决异步获取数据组件不刷新</h2><p>可以新增一个状态，数据加载时为<code>false</code>，加载成功后变为<code>true</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">setIsLodingData</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 设置加载状态为 true</span><br>  <span class="hljs-keyword">const</span> notionsPromise = <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllNotions&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> (res) =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchTagNameById&quot;</span>, [res[i].<span class="hljs-property">tag</span>]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res2</span>) =&gt;</span> &#123;<br>        res[i].<span class="hljs-property">tag</span> = res2[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> tagsPromise = <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllTags&quot;</span>, []);<br><br>  <span class="hljs-keyword">const</span> [notions, tags] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([notionsPromise, tagsPromise]);<br><br>  <span class="hljs-title function_">setAllNotions</span>(notions);<br>  <span class="hljs-title function_">setTags</span>(tags);<br>  <span class="hljs-title function_">setIsLodingData</span>(<span class="hljs-literal">false</span>);<br>&#125;;<br><br>&#123;<br>  <span class="hljs-comment">/* 数据展示卡片 */</span><br>&#125;<br>&#123;<br>  isLodingData ? (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ActivityIndicator</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">animating</span>=<span class="hljs-string">&#123;isLodingData&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;Colors.light.tint&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  ) : (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FlatList</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;notions.current&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">renderItem</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">item</span> &#125;) =&gt;</span> (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CartItem</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">cartType</span>=<span class="hljs-string">&#x27;show&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">notion</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">func</span>=<span class="hljs-string">&#123;getData&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      contentContainerStyle=&#123;&#123;</span><br><span class="language-xml">        gap: defalutSize,</span><br><span class="language-xml">        padding: defalutSize * 0.5,</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>getData</code>函数中有两个异步加载函数，为了提高获取数据的效率，可以同时异步加载数据，加载完成后再赋值</p></blockquote><p>之前的代码为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllNotions&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> res =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchTagNameById&quot;</span>,[res[i].<span class="hljs-property">tag</span>]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res2</span>)=&gt;</span>&#123;<br>        res[i].<span class="hljs-property">tag</span> = res2[<span class="hljs-number">0</span>].<span class="hljs-property">name</span><br>      &#125;)<br>    &#125;<br>    <span class="hljs-title function_">setAllNotions</span>(res);<br>  &#125;)<br><br>  &#125;);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllTags&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> res =&gt; &#123;<br>    <span class="hljs-title function_">setTags</span>(res);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="useeffect-和-useref-区别">11、useEffect 和 useRef 区别</h2><h3 id="定义">11.1 定义</h3><ol type="1"><li><code>useEffect</code>：管理状态。管理函数组件的状态和更新状态，变化后重新渲染徐建。</li><li><code>useRef</code>：操作 DOM元素。用于函数式组件中访问的全局变量，而不必渲染组件。</li></ol><h2 id="返回页面刷新">12、返回页面刷新</h2><p>使用页面监听事件，监听<code>navigate</code>的值，一旦返回页面，<code>navigate</code>的值就会发生改变，从而触发刷新函数。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useNavigation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;expo-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> navigation = <span class="hljs-title function_">useNavigation</span>();<br><br><span class="hljs-comment">// 返回页面刷新</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> unsubscribe = navigation.<span class="hljs-title function_">addListener</span>(<span class="hljs-string">&quot;focus&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">onRefresh</span>();<br>  &#125;);<br>  <span class="hljs-keyword">return</span> unsubscribe;<br>&#125;, [navigation]);<br></code></pre></td></tr></table></figure><h2 id="provider-顺序问题">13、Provider 顺序问题</h2><p>在写简记软件时，将数据库操作和灵感都封装成了全局<code>provider</code>，在灵感里使用到数据库的相关操作。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// DataProvider</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateNotion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">textInput: <span class="hljs-built_in">string</span>, id: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchNotionById&quot;</span>, [id]).<span class="hljs-title function_">then</span>(<br>    <span class="hljs-keyword">async</span> (<span class="hljs-attr">searchNotionByIdRes</span>: <span class="hljs-built_in">any</span>) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (searchNotionByIdRes[<span class="hljs-number">0</span>]?.<span class="hljs-property">rows</span>[<span class="hljs-number">0</span>]?.<span class="hljs-property">content</span> === textInput) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">const</span> updata_time = <span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">valueOf</span>();<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;updateNotionById&quot;</span>, [textInput, updata_time, id]).<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>      );<br>    &#125;<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>在封装时需要将<code>DataProvider</code>放在<code>SqliteProvider</code>里面，不然在使用<code>DataProvider</code>时会找不到数据库，因为先加载的<code>DataProvider</code>时<code>SqliteProvider</code>还未加载。</p><h2id="报错expometroconfig.loadasync-is-not-a-function">14、报错ExpoMetroConfig.loadAsyncis not a function</h2><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx expo start<br></code></pre></td></tr></table></figure><p>代替</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">expo start<br></code></pre></td></tr></table></figure><a class="btn" href="https://stackoverflow.com/questions/77984734/expometroconfig-loadasync-is-not-a-function-when-i-run-npx-expo-start"  title="参考" target="_blank">参考</a>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>前端</category>
      
      <category>ReactNative</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>React Native</tag>
      
      <tag>问题</tag>
      
      <tag>软件开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React学习笔记</title>
    <link href="/2024/06/29/021%20React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/29/021%20React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="安装与使用">1、安装与使用</h2><ol type="1"><li>安装</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g create-react-app<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>创建项目</li></ol><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">myapp</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>开始运行 进入到根目录里，输入</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure><h2 id="初始-react">2、初始 React</h2><h3 id="基本流程">2.1 基本流程</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><br><span class="hljs-comment">// 渲染dom</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="基本-jsx-语法">2.2 基本 JSX 语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;app&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;appRoot&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个构建页面 UI 的库<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><blockquote><p>双音节要使用驼峰命名，如 className fontSize</p></blockquote><h3 id="class-组件">2.3 class 组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  a = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.ceshi(this.a)&#125;&gt;Click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  ceshi = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>函数的写法推荐箭头函数</p></blockquote><h3 id="函数组件">2.4 函数组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我来了<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>简写</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我来了<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><blockquote><p>组件名称一定要大写</p></blockquote><h3 id="组件样式">2.5 组件样式</h3><ol type="1"><li>行内样式</li></ol><ul><li>第一个括号表示里面写 js 表达式，第二个代表一个对象</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;p style=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;14px&quot;</span> &#125;&#125;&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>class 样式</li></ol><ul><li>要写成 className</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;p className=<span class="hljs-string">&#x27;hello&#x27;</span>&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><h3 id="事件处理">2.6 事件处理</h3><ol type="1"><li>绑定事件 onclick</li><li>推荐这种函数写法</li><li>event 事件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  a = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.ceshi(this.a)&#125;&gt;Click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  ceshi = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background-color:yellow"><strong>event事件</strong></span></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    a = &#123;<br>        <span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span><br>    &#125;;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;//这里箭头函数要传递参数，才能捕获到&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span>=&gt;</span>&#123;this.ceshi(e)&#125;&#125;&gt;Click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>    ceshi = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220515142102870.png"alt="image-20220515142102870" /><figcaption aria-hidden="true">image-20220515142102870</figcaption></figure><h3 id="ref-使用">2.7 Ref 使用</h3><ol type="1"><li>创建<code>myref = React.createRef()</code></li><li>绑定标签<code>ref=&#123;this.myref&#125;</code></li><li>使用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  a = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  &#125;;<br>  myref = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myref&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.ceshi(this.myref.current.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          click</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  ceshi = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>获取当前标签使用<code>this.myref.current</code></p></blockquote><h2 id="组件的数据挂载">3、组件的数据挂载</h2><h3 id="状态">3.1 状态</h3><p>状态就是组件描述某种显示情况的数据，由组件自己设置和更改，也就是说由组件自己维护，使用状态的目的就是为了在不同的状态下使组件的显示不同(自己管理)</p><ol type="1"><li>定义 state</li></ol><blockquote><p>直接定义，与 render()同一级</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 类组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;this.state.isLiked ? &quot;取消&quot; : &quot;收藏&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><blockquote><p>通过 constructor 初始化</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 类组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>      <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;this.state.isLiked ? &quot;取消&quot; : &quot;收藏&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改状态">3.2 修改状态</h3><ol type="1"><li>只能使用 setState 重新赋值</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>      <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ceshi</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>      &#125;);<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.ceshi();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;this.state.isLiked ? &quot;取消&quot; : &quot;收藏&quot;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>setState 是异步的，所以想要获取到最新的state，没有办法获取，就有了第二个参数，这是一个可选的回调函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">prevState, props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isLiked</span>: !prevState.<span class="hljs-property">isLiked</span><br>    &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;回调里的&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>)<br>    &#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setState外部的&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>)<br></code></pre></td></tr></table></figure><h3 id="列表渲染">3.3 列表渲染</h3><ol type="1"><li>使用 map 循环</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">lists</span>: [<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.lists.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以往的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-string">`&lt;li&gt;&#123;$item&#125;&lt;/li&gt;`</span>);<br></code></pre></td></tr></table></figure><blockquote><p>这里是 react 的 jsx 语法，所以不用加引号</p></blockquote><h3 id="todolist">3.4 TodoList</h3><p>添加</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">add = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(value);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-attr">lists</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>不能写成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">add = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-attr">lists</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(value),<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>因为 push 方法改变的是原数组，而没有返回值</p><p>代码</p><ol type="1"><li>使用 push 方法追加，改变原数组</li><li>使用 splice 删除，改变原数组</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  myref = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  state = &#123;<br>    <span class="hljs-attr">lists</span>: [<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>],<br>  &#125;;<br>  add = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">push</span>(value);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>      &#123;<br>        <span class="hljs-attr">lists</span>: newList,<br>      &#125;,<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">myref</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 置空</span><br>      &#125;<br>    );<br>  &#125;;<br>  <span class="hljs-keyword">delete</span> = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>      &#123;<br>        <span class="hljs-attr">lists</span>: newList,<br>      &#125;,<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>      &#125;<br>    );<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myref&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.add(this.myref.current.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          Add</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.lists.map((item, index) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">              &#123;item&#125;&#123;&quot; &quot;&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                  this.delete(index);</span><br><span class="language-xml">                &#125;&#125;</span><br><span class="language-xml">              &gt;</span><br><span class="language-xml">                delete</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="条件渲染">3.5 条件渲染</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>暂无待办事项<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> : <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>暂无待办事项<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">.<span class="hljs-property">active</span>&#123;<br>    <span class="hljs-attr">display</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div className=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-property">length</span> != <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-string">&quot;active&quot;</span>&#125;&gt;暂无带吧&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="状态再体验">3.6 状态再体验</h3><ol type="1"><li>setState 函数异步</li></ol><p>在异步逻辑中，是同步更新状态，更新真实 dom</p><p>在同步逻辑中，是异步更新状态，更新真实 dom</p><ol start="2" type="1"><li>setState 回调函数</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>  &#123;<br>    <span class="hljs-attr">lists</span>: newList,<br>  &#125;,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myref</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="属性初试">3.7 属性初试</h3><ol type="1"><li>在组件上写<code>key=‘value’</code>形式，在组件内部用<code>this.props</code>接收;</li><li>属性是描述性质、特点的，组件自己不能随意更改；</li></ol><p><span style="background-color:yellow"><strong>1</strong></span></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;// 传入&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">NavaBar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;导航栏&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NavaBar</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavaBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 接受</span><br>    <span class="hljs-keyword">let</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavaBar - &#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性验证">3.8 属性验证</h3><p>在组件内部</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavaBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">title</span>: kerwinPropTypes.<span class="hljs-property">string</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavaBar - &#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="默认属性">3.9 默认属性</h3><p>在组件内部</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavaBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-keyword">static</span> defaultProps = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;我是&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavaBar - &#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2id="表单中的受控组件与非受控组件">4、表单中的受控组件与非受控组件</h2><h3 id="非受控组件">4.1 非受控组件</h3><ol type="1"><li>React 要编写一个非受控组件，可以 使用 ref 来从 DOM节点中获取表单数据，就是非受控组件。</li><li>比如在使用 input 输入框获取输入框内容时，是通过操作原生 DOM节点来获取的，不受控制；</li></ol><figure><imgsrc="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220515182305778.png"alt="image-20220515182305778" /><figcaption aria-hidden="true">image-20220515182305778</figcaption></figure><p>只能使用<code>defaultValue</code></p><h3 id="受控">4.2 受控</h3><ol type="1"><li>通过 value 动态绑定状态，这里可以把 input 标签看成一个组件；</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">usename</span>: <span class="hljs-string">&quot;我是大傻逼&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.usename&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              usename: e.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(this.state.usename);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          登录</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              usename: &quot;&quot;,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h3 id="受控应用-1">4.3 受控应用 1</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">inputValue</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">cinma</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;c&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;d&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.inputValue&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              inputValue: e.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        &#123;this.getList().map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">cinma</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>      item.<span class="hljs-property">name</span><br>        .<span class="hljs-title function_">toUpperCase</span>()<br>        .<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">inputValue</span>.<span class="hljs-title function_">toLocaleUpperCase</span>())<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h3 id="todolist-受控">4.4 todoList 受控</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">inputValue</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">lists</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>        <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>        <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;c&quot;</span>,<br>        <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100000</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">inputValue</span>,<br>      <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>    &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">lists</span>: newList,<br>      <span class="hljs-attr">inputValue</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">delete</span> = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">lists</span>: newList,<br>    &#125;);<br>  &#125;;<br>  handchange = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);<br>    <span class="hljs-keyword">let</span> newList = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>];<br>    newList[index].<span class="hljs-property">isChecked</span> = !newList[index].<span class="hljs-property">isChecked</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">lists</span>: newList,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.inputValue&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              inputValue: e.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.add();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          Add</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.lists.map((item, index) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;checkbox&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;item.isChecked&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                  this.handchange(index);</span><br><span class="language-xml">                &#125;&#125;</span><br><span class="language-xml">              &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textDecoration:</span> <span class="hljs-attr">item.isChecked</span> ? &quot;<span class="hljs-attr">line-through</span>&quot; <span class="hljs-attr">:</span> &quot;&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              &gt;</span></span><br><span class="language-xml">                &#123;item.name&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                  this.delete(index);</span><br><span class="language-xml">                &#125;&#125;</span><br><span class="language-xml">              &gt;</span><br><span class="language-xml">                delete</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.lists.length == 0 &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>暂无待办事项<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组件通信方式">5、组件通信方式</h2><h3 id="子传父">5.1 子传父</h3><ol type="1"><li>子组件不能直接访问父组件的状态，但是可以通过回调函数通知父组件改变状态；</li><li>孩子不能动父亲手里的钱，但是孩子可以打电话给父亲，让父亲发钱；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br><br>class NavBar extends Component&#123;<br>    render()&#123;<br>        return(<br>            &lt;div&gt;我是导航栏<br>                &lt;button onClick=&#123;()=&gt;&#123;<br>                    this.props.isShowList();<br>                &#125;&#125;&gt;点我&lt;/button&gt;<br><br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><br>class ListBar extends Component&#123;<br>    render()&#123;<br>        return(<br>            &lt;div&gt;<br>                &lt;ul style=&#123;&#123;backgroundColor:&#x27;yellow&#x27;,width:&#x27;200px&#x27;&#125;&#125;&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                &lt;/ul&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><br><br><br>export default class App extends Component &#123;<br>  state = &#123;<br>    isShow:true<br>  &#125;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>          &lt;NavBar isShowList=&#123;()=&gt;&#123;<br>              this.setState(&#123;<br>                  isShow:!this.state.isShow<br>              &#125;)<br>          &#125;&#125;&gt;&lt;/NavBar&gt;<br>          &#123;this.state.isShow &amp;&amp; &lt;ListBar&gt;&lt;/ListBar&gt;&#125;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="中间人">5.2 中间人</h3><figure><imgsrc="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220517230844506.png"alt="image-20220517230844506" /><figcaption aria-hidden="true">image-20220517230844506</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br>import axios from &#x27;axios&#x27;<br>import &#x27;./06-index.css&#x27;<br><br>export default class App extends Component &#123;<br>    constructor()&#123;<br>        super()<br>        this.state=&#123;<br>            filmList:[],<br>            detail:&quot;&quot;<br>        &#125;<br>        axios.get(`../text.json`).then(res=&gt;&#123;<br>            console.log(res.data.data)<br>            this.setState(&#123;<br>                filmList:res.data.data<br>            &#125;)<br>        &#125;)<br>    &#125;<br><br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>          &#123;<br>              this.state.filmList.map(item=&gt;&lt;Film key=&#123;item.id&#125; &#123;...item&#125; onEvent=&#123;(value)=&gt;&#123;<br>                this.setState(&#123;<br>                    detail:value<br>                &#125;)<br>              &#125;&#125;&gt;&lt;/Film&gt;)<br>          &#125;<br>          &lt;FilmDetial detail=&#123;this.state.detail&#125;&gt;&lt;/FilmDetial&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><br>class Film extends Component&#123;<br>    render()&#123;<br><br>        let &#123;name,src,detail&#125; = this.props<br>        return &lt;div className=&#x27;filmitem&#x27; onClick=&#123;()=&gt;&#123;<br>            this.props.onEvent(detail)<br>        &#125;&#125;&gt;<br>            &lt;img src=&#123;src&#125; alt=&#123;name&#125;&gt;&lt;/img&gt;<br>            &#123;this.props.name&#125;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br><br><br>class FilmDetial extends Component&#123;<br>    render()&#123;<br>        return &lt;div className=&#x27;filmdetail&#x27;&gt;<br>            &#123;this.props.detail&#125;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子传父表单">5.3 子传父表单</h3><ol type="1"><li>子组件输入框动态绑定父组件上的状态值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br><br>export default class App extends Component &#123;<br>    state = &#123;<br>        name:&#x27;小明&#x27;,<br>        password:&#x27;123456&#x27;<br>    &#125;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;h2&gt;登录页面&lt;/h2&gt;<br>        &lt;Filed lable = &quot;用户名&quot; type = &quot;text&quot; value = &#123;this.state.name&#125; onEvent=&#123;(value)=&gt;&#123;<br>            this.setState(&#123;<br>                name:value<br>            &#125;)<br>        &#125;&#125;/&gt;<br>        &lt;Filed lable = &quot;密码&quot; type = &quot;password&quot; value = &#123;this.state.password&#125; onEvent=&#123;(value)=&gt;&#123;<br>            this.setState(&#123;<br>                password:value<br>            &#125;)<br>        &#125;&#125;/&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            console.log(this.state.name,this.state.password);<br>        &#125;&#125;&gt;登录&lt;/button&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            this.setState(&#123;<br>                name:&#x27;&#x27;,<br>                password:&#x27;&#x27;<br>            &#125;)<br>        &#125;&#125;&gt;取消&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>class Filed extends Component&#123;<br>    render()&#123;<br>        let &#123;lable,type,onEvent,value&#125; = this.props<br>        return(<br>        &lt;div&gt;<br>            &lt;span&gt;&#123;lable&#125;&lt;/span&gt;<br>            &lt;input type=&#123;type&#125; value=&#123;value&#125; onChange=&#123;(e)=&gt;&#123;<br>                onEvent(e.target.value)<br>            &#125;&#125;&gt;&lt;/input&gt;<br>        &lt;/div&gt;<br>    )&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="ref-表单">5.4 ref 表单</h3><ol type="1"><li>在组件上挂载 ref 可以获得组件；</li><li>父组件给子组件挂载 ref 可以拿到子组件的<code>dom</code>；</li><li>子组件内部自己设置状态和绑定 value 值；</li><li>通过点击按钮<code>this.username.current</code>获取组件标签；</li><li>就可以拿到子组件内的状态和函数（清空函数在子组件自己内部）；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br><br>export default class App extends Component &#123;<br>    username = React.createRef();<br>    password = React.createRef();<br><br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;h2&gt;登录页面&lt;/h2&gt;<br>        &#123;/* 这里使用ref能拿到组件标签 */&#125;<br>        &lt;Filed lable = &quot;用户s名&quot; type = &quot;text&quot; ref=&#123;this.username&#125;/&gt;<br>        &lt;Filed lable = &quot;密码&quot; type = &quot;password&quot; ref=&#123;this.password&#125;/&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            console.log(this.username.current.state.value);<br>            console.log(this.password.current.state.value);<br>        &#125;&#125;&gt;登录&lt;/button&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            this.username.current.clear()<br>            this.password.current.clear()<br>        &#125;&#125;&gt;取消&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>class Filed extends Component&#123;<br>    state = &#123;<br>        value:&quot;&quot;<br>    &#125;<br>    clear()&#123;<br>        // 虽然这个函数能执行，但是并没有使render重新执行<br>        // 需要加将input输入框绑定value<br>        this.setState(&#123;<br>            value:&quot;&quot;<br>        &#125;)<br>    &#125;<br>    render()&#123;<br>        let &#123;lable,type&#125; = this.props<br>        return(<br>        &lt;div&gt;<br>            &lt;span&gt;&#123;lable&#125;&lt;/span&gt;<br>            &lt;input type=&#123;type&#125; value=&#123;this.state.value&#125; onChange=&#123;(e)=&gt;&#123;<br>                console.log(e.target.value);<br>                this.setState(&#123;<br>                    value:e.target.value<br>                &#125;)<br>            &#125;&#125;&gt;&lt;/input&gt;<br>        &lt;/div&gt;<br>    )&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>子组件内的输入框要与自己的状态 value 绑定，否则执行 clear函数不会触发 render()</p></blockquote><h2 id="hooks">6、Hooks</h2><ol type="1"><li>高阶组件为了复用，导致代码层级复杂</li><li>生命周期的复杂</li><li>写成 functional 组件,无状态组件 ，因为需要状态，又改成了class,成本高</li></ol><h3 id="usestate">6.1 <code>useState</code></h3><ol type="1"><li><code>[a,b] = arr;</code>此时 arr 是一个数组，解构赋值；</li><li>使用<code>useState</code>会返回一个数组，里面有一个值和函数；</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [username, setusername] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;mtl&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setusername(&quot;大白&quot;);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;username&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>重写 todolist</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">APP</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>([<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]); <span class="hljs-comment">//初始列表值</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 结构列表并添加新值</span><br>    <span class="hljs-title function_">setList</span>([...list, text]);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">del</span> = (<span class="hljs-params">index</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);<br>    <span class="hljs-comment">// 不要直接更改原数组，创建一个新数组</span><br>    <span class="hljs-keyword">const</span> newlist = [...list];<br>    <span class="hljs-comment">// 删除索引位置1个元素</span><br>    newlist.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">setList</span>(newlist);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setText(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          add();</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        add</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;list.map((item, index) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                del(index);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              del</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>React</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google搜索技巧</title>
    <link href="/2024/06/28/026%20Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/06/28/026%20Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="谷歌搜索关键词">1、谷歌搜索关键词</h2><ol type="1"><li>限定关键词 ""</li><li>限定标题 inltitle:</li><li>限定内容 intext</li><li>限定网址 inurl</li><li>限定网站 site</li><li>限定图片大小 imagesize</li><li>限定文件类型 filetype</li></ol><h2 id="下载油管视频">2、下载油管视频</h2><p>在视频网址前加上 9x</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索技巧</tag>
      
      <tag>google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluent中的浮力模型</title>
    <link href="/2024/06/25/019%20Fluent%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%9B%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/06/25/019%20Fluent%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%9B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="fluent-中的浮力模型">Fluent 中的浮力模型</h1><h2 id="基本概念">1、基本概念</h2><p>当计算域开启重力场和能量场时，可在<code>ke</code>模型中考虑浮力的产生。</p><p>由于浮力而产生的湍流公式：</p><p><span class="math display">\[G_b=\betag_i\frac{\mu_t}{\mathrm{Pr}_t}\frac{\partial T}{\partialx_i}\]</span></p><p>其中<spanclass="math inline">\(Pr_{t}\)</span>是能量的湍流普朗特数，<spanclass="math inline">\(g_{i}\)</span>是重力矢量在<spanclass="math inline">\(i\)</span>方向上的分量。对于标准和可实现<code>ke</code>模型，<spanclass="math inline">\(Pr_{t}=0.85\)</span>。在<code>RNG ke</code>模型，$Pr_{t}=<span class="math inline">\(。其中\)</span>$由以下公式计算：</p><p><spanclass="math display">\[\left|\frac{\alpha-1.3929}{\alpha_0-1.3929}\right|^{0.6321}\left|\frac{\alpha+2.3929}{\alpha_0+2.3929}\right|^{0.3679}=\frac{\mu_{\mathrm{mol}}}{\mu_{\mathrm{eff}}}\]</span></p><p>其中<spanclass="math inline">\(\alpha_{0}=1.0\)</span>，在高雷诺数限制下，<spanclass="math inline">\(\mu_{\mathrm{mol}}/\mu_{\mathrm{eff}}\ll1\)</span>，<spanclass="math inline">\(\alpha_{k}=\alpha_{\epsilon}\approx1.393\)</span></p><p>系数$$定义为</p><p><spanclass="math display">\[\beta=-\frac1\rho\left(\frac{\partial\rho}{\partialT}\right)_p\]</span></p><p>对于理想气体状态方程：</p><p><spanclass="math display">\[G_b=-g_i\frac{\mu_t}{\rho\mathrm{Pr}_t}\frac{\partial\rho}{\partialx_i}\]</span></p><blockquote><p>在不稳定分层中，湍动能趋于增大。对于不稳定的分层，浮力会抑制湍流。</p></blockquote><p>受浮力影响程度由常数<span class="math inline">\(C_{3\epsilon}\)</span>决定，在 Fluent 中可通过以下公式计算</p><p><spanclass="math display">\[C_{3\epsilon}=\tanh\left|\frac{v}{u}\right|\]</span></p><p><spanclass="math inline">\(v\)</span>是平行于重力矢量的流速分量，<spanclass="math inline">\(u\)</span>是垂直于重力矢量的流速分量。对于主流方向与重力方向一致的浮力剪切层，该常数为1。对于垂直于重力矢量的浮力剪切层，该值为 0。</p><h2 id="如何操作">2、如何操作</h2><p>开启重力加速度和能量方程，即可在<code>ke</code>模型中设置全浮力模型。</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240625092823.png" /></p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python装饰器</title>
    <link href="/2024/04/25/018%20Python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/04/25/018%20Python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="装饰器定义">1、装饰器定义</h1><p>函数本身也是对象，能赋值给变量，通过变量名称可以调用函数的功能。此外能通过<code>__name__</code>属性拿到函数的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br><br>f1 = fun1<br>f1.__name__<br><span class="hljs-comment"># &#x27;fun1&#x27;</span><br></code></pre></td></tr></table></figure><p>装饰器是在不改变原函数条件下，为原函数调用前增加新的功能。装饰器其实是一个高阶函数，高阶函数<code>hightfunc</code>接受一个函数对象<code>func</code>，在高阶函数内部定义一个新的函数<code>wrapper</code>，新的函数<code>wrapper</code>在调用<code>func</code>函数对象前后执行一定的操作，之后返回<code>func</code>，整个告诫高阶函数再返回<code>wrapper</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;call <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> func<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br><br>log(fun1)()<br></code></pre></td></tr></table></figure><p>写成语法糖的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;call <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> func<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@log</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br><br>fun1()<br></code></pre></td></tr></table></figure><h1 id="装饰器有参函数无参">2、装饰器有参函数无参</h1><p>使用装饰器时，传入变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">level=<span class="hljs-string">&#x27;debug&#x27;</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>            func()<br>            <span class="hljs-keyword">if</span> level == <span class="hljs-string">&#x27;warning&#x27;</span>:<br>                logging.warning(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">else</span>:<br>                logging.debug(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">return</span> func<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@log(<span class="hljs-params">level=<span class="hljs-string">&quot;warning&quot;</span></span>) </span><span class="hljs-comment"># 添加带参数的装饰器 log()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func()调用了&quot;</span>)<br><br>func()<br><br><span class="hljs-comment"># WARNING:root:func is called</span><br><span class="hljs-comment"># func()调用了</span><br></code></pre></td></tr></table></figure><h1 id="装饰器和函数均有参">3、装饰器和函数均有参</h1><p>需要使用<code>*args, **kwargs</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">level=<span class="hljs-string">&#x27;debug&#x27;</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            ret = func(*args, **kwargs)<br>            <span class="hljs-keyword">if</span> level == <span class="hljs-string">&#x27;warning&#x27;</span>:<br>                logging.warning(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">else</span>:<br>                logging.debug(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">return</span> ret<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@log(<span class="hljs-params">level=<span class="hljs-string">&quot;warning&quot;</span></span>) </span><span class="hljs-comment"># 添加带参数的装饰器 log()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n,m</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;from func(), n=<span class="hljs-subst">&#123;n&#125;</span>,m=<span class="hljs-subst">&#123;m&#125;</span>&quot;</span>)<br><br>func(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>对于<code>*args, **kwargs</code>我了解的还不多，这里不做过多介绍。</p><ul><li><code>*args (Non-Keyword Arguments)</code>相当于列表<code>['Hello'``, ``'Welcome'``, ``'to'``, ``'GeeksforGeeks']</code></li><li><code>**kwargs (Keyword Arguments)</code>相当于字典<code>&#123;first='Geeks', mid='for', last='Geeks'&#125;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># *args</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;Pomelo&quot;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*argv</span>):<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> argv:<br>        <span class="hljs-built_in">print</span>(arg+<span class="hljs-string">&quot; &quot;</span>)<br>func(*<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># apple</span><br><span class="hljs-comment"># banana</span><br><span class="hljs-comment"># Pomelo</span><br><br><span class="hljs-comment"># **kwargs</span><br>dic = &#123;<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;Pomelo&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(key+<span class="hljs-string">&quot;=&quot;</span>+value)<br>func(**dic)<br><span class="hljs-comment"># 1=apple</span><br><span class="hljs-comment"># 2=banana</span><br><span class="hljs-comment"># 3=Pomelo</span><br><br><br><span class="hljs-comment"># *args,**kwargs</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;Pomelo&quot;</span>]<br>dic = &#123;<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;Pomelo&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*argv,**kwargs</span>):<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> argv:<br>        <span class="hljs-built_in">print</span>(arg+<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(key+<span class="hljs-string">&quot;=&quot;</span>+value)<br>func(*<span class="hljs-built_in">list</span>,**dic)<br><span class="hljs-comment"># apple</span><br><span class="hljs-comment"># banana</span><br><span class="hljs-comment"># Pomelo</span><br><span class="hljs-comment"># 1=apple</span><br><span class="hljs-comment"># 2=banana</span><br><span class="hljs-comment"># 3=Pomelo</span><br></code></pre></td></tr></table></figure><h1 id="类方法装饰器">4、类方法装饰器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        start_time = time.time()<br>        ret = func(self, *args, **kwargs)<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s.%s() cost %f second!&quot;</span> % (self.__class__,<br>              func.__name__, end_time - start_time))<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDecorator</span>():<br><span class="hljs-meta">    @decorator</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mysleep</span>(<span class="hljs-params">self, n</span>):<br>        time.sleep(n)<br><br>obj = TestDecorator()<br>obj.mysleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="装饰器类">5、装饰器类</h1><p>会调用<code>__init__</code>和<code>__call__</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tracer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        self.func = func<br>        self.calls = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        self.calls += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call %s() %d times&quot;</span> % (self.func.__name__, self.calls))<br>        <span class="hljs-keyword">return</span> self.func(*args, **kwargs)<br><br><span class="hljs-meta">@Tracer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tracer</span>(<span class="hljs-params">val, name=<span class="hljs-string">&quot;default&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func() name:%s, val: %d&quot;</span> % (name, val))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    test_tracer(i, name=(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-built_in">str</span>(i)))<br><br>&gt;&gt;&gt;<br>call test_tracer() <span class="hljs-number">1</span> times<br>func() name:name0, val: <span class="hljs-number">0</span><br>call test_tracer() <span class="hljs-number">2</span> times<br>func() name:name1, val: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="带参数装饰器类">6、 带参数装饰器类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tracer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, arg0</span>): <span class="hljs-comment"># 可支持任意参数</span><br>        self.arg0 = arg0<br>        self.calls = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            self.calls += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arg0:%d call %s() %d times&quot;</span> % (self.arg0, func.__name__, self.calls))<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@Tracer(<span class="hljs-params">arg0=<span class="hljs-number">0</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tracer</span>(<span class="hljs-params">val, name=<span class="hljs-string">&quot;default&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func() name:%s, val: %d&quot;</span> % (name, val))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    test_tracer(i, name=(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-built_in">str</span>(i)))<br><br>&gt;&gt;&gt;<br>arg0:<span class="hljs-number">0</span> call test_tracer() <span class="hljs-number">1</span> times<br>func() name:name0, val: <span class="hljs-number">0</span><br>arg0:<span class="hljs-number">0</span> call test_tracer() <span class="hljs-number">2</span> times<br>func() name:name1, val: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="内置装饰器">7、内置装饰器</h1><h2 id="staticmethod">7.1 staticmethod</h2><p>类的静态函数装饰器，可通过类名直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>():<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">static_method</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a static method!&quot;</span>)<br><br>C.static_method()     <span class="hljs-comment"># 类名直接调用</span><br><br>c = C()<br>c.static_method()     <span class="hljs-comment"># 类对象调用</span><br><br>&gt;&gt;&gt;<br>This <span class="hljs-keyword">is</span> a static method!<br>This <span class="hljs-keyword">is</span> a static method!<br></code></pre></td></tr></table></figure><h2 id="classmethod">7.2 classmethod</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>():<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">class_method</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is &quot;</span>, cls)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">C</span>):<br>  <span class="hljs-keyword">pass</span><br><br>C.class_method()  <span class="hljs-comment"># 类名直接调用</span><br>c = C()<br>c.class_method()  <span class="hljs-comment"># 类对象调用</span><br><br>B.class_method()  <span class="hljs-comment"># 继承类调用</span><br><br>&gt;&gt;&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.C&#x27;</span>&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.C&#x27;</span>&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.B&#x27;</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>装饰器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用技巧</title>
    <link href="/2024/04/24/017%20Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/"/>
    <url>/2024/04/24/017%20Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="推导式">1、推导式</h1><p>推导式又叫做解析式，是简化冗余代码实质有效的方法，<code>Python</code>中实用的语法糖，可以分为以下几类：</p><ol type="1"><li>列表推导式（⭐）</li><li>字典推导式（⭐）</li><li>集合推导式</li><li>元祖推导式</li></ol><p>下面只介绍常用的列表推导式和字典推导式。</p><h2 id="列表推导式">1.1 列表推导式</h2><p>对列表中每个元素进行一定操作。</p><p>基本使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br>list1 = [x+<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>]<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment"># [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span><br></code></pre></td></tr></table></figure><p>条件表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>list1 = [name+<span class="hljs-string">&quot;666&quot;</span> <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) &gt; <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment"># [&#x27;Jason666&#x27;, &#x27;Peter666&#x27;, &#x27;Jani666&#x27;]</span><br></code></pre></td></tr></table></figure><p>多个 for 循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">time = [<span class="hljs-string">&#x27;%.2d:%.2d&#x27;</span>%(h,m )<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>) <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">5</span>) ]<br><span class="hljs-built_in">print</span>(time)<br><span class="hljs-comment"># [&#x27;00:00&#x27;, &#x27;00:05&#x27;, &#x27;00:10&#x27;, &#x27;00:15&#x27;, &#x27;00:20&#x27;, &#x27;00:25&#x27;, &#x27;00:30&#x27;, &#x27;00:35&#x27;, &#x27;00:40&#x27;, &#x27;00:45&#x27;, &#x27;00:50&#x27;, &#x27;00:55&#x27;, &#x27;01:00&#x27;, &#x27;01:05&#x27;, &#x27;01:10&#x27;, &#x27;01:15&#x27;, &#x27;01:20&#x27;, &#x27;01:25&#x27;, &#x27;01:30&#x27;, &#x27;01:35&#x27;, &#x27;01:40&#x27;, &#x27;01:45&#x27;, &#x27;01:50&#x27;, &#x27;01:55&#x27;, &#x27;02:00&#x27;, &#x27;02:05&#x27;, &#x27;02:10&#x27;, &#x27;02:15&#x27;, &#x27;02:20&#x27;, &#x27;02:25&#x27;, &#x27;02:30&#x27;, &#x27;02:35&#x27;, &#x27;02:40&#x27;, &#x27;02:45&#x27;, &#x27;02:50&#x27;, &#x27;02:55&#x27;, &#x27;03:00&#x27;, &#x27;03:05&#x27;, &#x27;03:10&#x27;, &#x27;03:15&#x27;, &#x27;03:20&#x27;, &#x27;03:25&#x27;, &#x27;03:30&#x27;, &#x27;03:35&#x27;, &#x27;03:40&#x27;, &#x27;03:45&#x27;, &#x27;03:50&#x27;, &#x27;03:55&#x27;, &#x27;04:00&#x27;, &#x27;04:05&#x27;, &#x27;04:10&#x27;, &#x27;04:15&#x27;, &#x27;04:20&#x27;, &#x27;04:25&#x27;, &#x27;04:30&#x27;, &#x27;04:35&#x27;, &#x27;04:40&#x27;, &#x27;04:45&#x27;, &#x27;04:50&#x27;, &#x27;04:55&#x27;, &#x27;05:00&#x27;, &#x27;05:05&#x27;, &#x27;05:10&#x27;, &#x27;05:15&#x27;, &#x27;05:20&#x27;, &#x27;05:25&#x27;, &#x27;05:30&#x27;, &#x27;05:35&#x27;, &#x27;05:40&#x27;, &#x27;05:45&#x27;, &#x27;05:50&#x27;, &#x27;05:55&#x27;, &#x27;06:00&#x27;, &#x27;06:05&#x27;, &#x27;06:10&#x27;, &#x27;06:15&#x27;, &#x27;06:20&#x27;, &#x27;06:25&#x27;, &#x27;06:30&#x27;, &#x27;06:35&#x27;, &#x27;06:40&#x27;, &#x27;06:45&#x27;, &#x27;06:50&#x27;, &#x27;06:55&#x27;, &#x27;07:00&#x27;, &#x27;07:05&#x27;, &#x27;07:10&#x27;, &#x27;07:15&#x27;, &#x27;07:20&#x27;, &#x27;07:25&#x27;, &#x27;07:30&#x27;, &#x27;07:35&#x27;, &#x27;07:40&#x27;, &#x27;07:45&#x27;, &#x27;07:50&#x27;, &#x27;07:55&#x27;, &#x27;08:00&#x27;, &#x27;08:05&#x27;, &#x27;08:10&#x27;, &#x27;08:15&#x27;, &#x27;08:20&#x27;, &#x27;08:25&#x27;, &#x27;08:30&#x27;, &#x27;08:35&#x27;, &#x27;08:40&#x27;, &#x27;08:45&#x27;, &#x27;08:50&#x27;, &#x27;08:55&#x27;, &#x27;09:00&#x27;, &#x27;09:05&#x27;, &#x27;09:10&#x27;, &#x27;09:15&#x27;, &#x27;09:20&#x27;, &#x27;09:25&#x27;, &#x27;09:30&#x27;, &#x27;09:35&#x27;, &#x27;09:40&#x27;, &#x27;09:45&#x27;, &#x27;09:50&#x27;, &#x27;09:55&#x27;, &#x27;10:00&#x27;, &#x27;10:05&#x27;, &#x27;10:10&#x27;, &#x27;10:15&#x27;, &#x27;10:20&#x27;, &#x27;10:25&#x27;, &#x27;10:30&#x27;, &#x27;10:35&#x27;, &#x27;10:40&#x27;, &#x27;10:45&#x27;, &#x27;10:50&#x27;, &#x27;10:55&#x27;, &#x27;11:00&#x27;, &#x27;11:05&#x27;, &#x27;11:10&#x27;, &#x27;11:15&#x27;, &#x27;11:20&#x27;, &#x27;11:25&#x27;, &#x27;11:30&#x27;, &#x27;11:35&#x27;, &#x27;11:40&#x27;, &#x27;11:45&#x27;, &#x27;11:50&#x27;, &#x27;11:55&#x27;, &#x27;12:00&#x27;, &#x27;12:05&#x27;, &#x27;12:10&#x27;, &#x27;12:15&#x27;, &#x27;12:20&#x27;, &#x27;12:25&#x27;, &#x27;12:30&#x27;, &#x27;12:35&#x27;, &#x27;12:40&#x27;, &#x27;12:45&#x27;, &#x27;12:50&#x27;, &#x27;12:55&#x27;, &#x27;13:00&#x27;, &#x27;13:05&#x27;, &#x27;13:10&#x27;, &#x27;13:15&#x27;, &#x27;13:20&#x27;, &#x27;13:25&#x27;, &#x27;13:30&#x27;, &#x27;13:35&#x27;, &#x27;13:40&#x27;, &#x27;13:45&#x27;, &#x27;13:50&#x27;, &#x27;13:55&#x27;, &#x27;14:00&#x27;, &#x27;14:05&#x27;, &#x27;14:10&#x27;, &#x27;14:15&#x27;, &#x27;14:20&#x27;, &#x27;14:25&#x27;, &#x27;14:30&#x27;, &#x27;14:35&#x27;, &#x27;14:40&#x27;, &#x27;14:45&#x27;, &#x27;14:50&#x27;, &#x27;14:55&#x27;, &#x27;15:00&#x27;, &#x27;15:05&#x27;, &#x27;15:10&#x27;, &#x27;15:15&#x27;, &#x27;15:20&#x27;, &#x27;15:25&#x27;, &#x27;15:30&#x27;, &#x27;15:35&#x27;, &#x27;15:40&#x27;, &#x27;15:45&#x27;, &#x27;15:50&#x27;, &#x27;15:55&#x27;, &#x27;16:00&#x27;, &#x27;16:05&#x27;, &#x27;16:10&#x27;, &#x27;16:15&#x27;, &#x27;16:20&#x27;, &#x27;16:25&#x27;, &#x27;16:30&#x27;, &#x27;16:35&#x27;, &#x27;16:40&#x27;, &#x27;16:45&#x27;, &#x27;16:50&#x27;, &#x27;16:55&#x27;, &#x27;17:00&#x27;, &#x27;17:05&#x27;, &#x27;17:10&#x27;, &#x27;17:15&#x27;, &#x27;17:20&#x27;, &#x27;17:25&#x27;, &#x27;17:30&#x27;, &#x27;17:35&#x27;, &#x27;17:40&#x27;, &#x27;17:45&#x27;, &#x27;17:50&#x27;, &#x27;17:55&#x27;, &#x27;18:00&#x27;, &#x27;18:05&#x27;, &#x27;18:10&#x27;, &#x27;18:15&#x27;, &#x27;18:20&#x27;, &#x27;18:25&#x27;, &#x27;18:30&#x27;, &#x27;18:35&#x27;, &#x27;18:40&#x27;, &#x27;18:45&#x27;, &#x27;18:50&#x27;, &#x27;18:55&#x27;, &#x27;19:00&#x27;, &#x27;19:05&#x27;, &#x27;19:10&#x27;, &#x27;19:15&#x27;, &#x27;19:20&#x27;, &#x27;19:25&#x27;, &#x27;19:30&#x27;, &#x27;19:35&#x27;, &#x27;19:40&#x27;, &#x27;19:45&#x27;, &#x27;19:50&#x27;, &#x27;19:55&#x27;, &#x27;20:00&#x27;, &#x27;20:05&#x27;, &#x27;20:10&#x27;, &#x27;20:15&#x27;, &#x27;20:20&#x27;, &#x27;20:25&#x27;, &#x27;20:30&#x27;, &#x27;20:35&#x27;, &#x27;20:40&#x27;, &#x27;20:45&#x27;, &#x27;20:50&#x27;, &#x27;20:55&#x27;, &#x27;21:00&#x27;, &#x27;21:05&#x27;, &#x27;21:10&#x27;, &#x27;21:15&#x27;, &#x27;21:20&#x27;, &#x27;21:25&#x27;, &#x27;21:30&#x27;, &#x27;21:35&#x27;, &#x27;21:40&#x27;, &#x27;21:45&#x27;, &#x27;21:50&#x27;, &#x27;21:55&#x27;, &#x27;22:00&#x27;, &#x27;22:05&#x27;, &#x27;22:10&#x27;, &#x27;22:15&#x27;, &#x27;22:20&#x27;, &#x27;22:25&#x27;, &#x27;22:30&#x27;, &#x27;22:35&#x27;, &#x27;22:40&#x27;, &#x27;22:45&#x27;, &#x27;22:50&#x27;, &#x27;22:55&#x27;, &#x27;23:00&#x27;, &#x27;23:05&#x27;, &#x27;23:10&#x27;, &#x27;23:15&#x27;, &#x27;23:20&#x27;, &#x27;23:25&#x27;, &#x27;23:30&#x27;, &#x27;23:35&#x27;, &#x27;23:40&#x27;, &#x27;23:45&#x27;, &#x27;23:50&#x27;, &#x27;23:55&#x27;]</span><br></code></pre></td></tr></table></figure><p>多个 for 循环+条件表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>] <span class="hljs-keyword">if</span> x != y]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span><br></code></pre></td></tr></table></figure><h2 id="字典推导式">1.2 字典推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>newdict = &#123;key:<span class="hljs-built_in">len</span>(key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> listdemo&#125;<br><span class="hljs-built_in">print</span>(newdict)<br><span class="hljs-comment"># &#123;&#x27;Bob&#x27;: 3, &#x27;Jason&#x27;: 5, &#x27;Peter&#x27;: 5, &#x27;Jani&#x27;: 4, &#x27;Tom&#x27;: 3&#125;</span><br></code></pre></td></tr></table></figure><p>互换 key 和 value 的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;角色名&#x27;</span>:<span class="hljs-string">&#x27;宫本武藏&#x27;</span>,<span class="hljs-string">&#x27;定位&#x27;</span>:<span class="hljs-string">&#x27;刺客&#x27;</span>&#125;<br>person_reverse = &#123;k:v <span class="hljs-keyword">for</span> v,k <span class="hljs-keyword">in</span> person.items()&#125;<br><span class="hljs-built_in">print</span>(person_reverse)<br><span class="hljs-comment"># &#123;&#x27;宫本武藏&#x27;: &#x27;角色名&#x27;, &#x27;刺客&#x27;: &#x27;定位&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="字典遍历">2、字典遍历</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;角色名&#x27;</span>:<span class="hljs-string">&#x27;宫本武藏&#x27;</span>,<span class="hljs-string">&#x27;定位&#x27;</span>:<span class="hljs-string">&#x27;刺客&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> person.items():<br>    <span class="hljs-built_in">print</span>(key,value)<br></code></pre></td></tr></table></figure><h1 id="判断元素是否在列表中">3、判断元素是否在列表中</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Peter&quot;</span> <span class="hljs-keyword">in</span> listdemo:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br><span class="hljs-comment"># Yes</span><br></code></pre></td></tr></table></figure><h1 id="反转字符串">4、反转字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Tom&quot;</span><br>reverse_name = name[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(reverse_name)<br><span class="hljs-comment"># moT</span><br></code></pre></td></tr></table></figure><h1 id="反转列表">5、反转列表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>reverse_name_list = name_list[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(reverse_name_list)<br><span class="hljs-comment"># [&#x27;Tom&#x27;, &#x27;Jani&#x27;, &#x27;Peter&#x27;, &#x27;Jason&#x27;, &#x27;Bob&#x27;]</span><br></code></pre></td></tr></table></figure><h1 id="获取时间">6、获取时间</h1><p>获取当前时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>current_time = datetime.datetime.now()<br><span class="hljs-built_in">print</span>(current_time)<br><span class="hljs-comment"># 2024-04-24 23:59:57.567560</span><br></code></pre></td></tr></table></figure><p>获取当前日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>current_date = datetime.date.today()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前日期:&quot;</span>, current_date)<br><span class="hljs-comment"># 当前日期: 2024-04-25</span><br></code></pre></td></tr></table></figure><p>获取毫秒级时间（程序执行时间）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start_time = time.time()<br>numbers = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>)]<br>end_time = time.time()<br>time_ = end_time - start_time<br><span class="hljs-built_in">print</span>(time_)<br><span class="hljs-comment"># 0.03652048110961914</span><br></code></pre></td></tr></table></figure><h1 id="三元运算符">7、三元运算符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">max</span> = a <span class="hljs-keyword">if</span> a&gt;b <span class="hljs-keyword">else</span> b<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>)<br><span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><h1 id="枚举循环">8、枚举循环</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>]<br><span class="hljs-keyword">for</span> index,fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(index,fruit)<br><span class="hljs-comment"># 0 apple</span><br><span class="hljs-comment"># 1 banana</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决matplotlib绘图中英文混用问题</title>
    <link href="/2024/04/17/016%20matplotlib%E7%BB%98%E5%9B%BE%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%B7%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/04/17/016%20matplotlib%E7%BB%98%E5%9B%BE%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%B7%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>最近在处理实验数据，因为有 c++基础，尝试使用 python 进行绘图。</p><blockquote><p>目前遇到一个问题：想要在一张图中中文使用宋体，英文使用新罗马字体该如何解决？</p></blockquote><p>在网上查阅了大量的资料，找到了几种解决办法，总结起来就 3 种：</p><ol type="1"><li>全局使用中文，在需要使用英文的地方使用 latex 公式书写；</li><li>使用外部</li><li>合并宋体和新罗马字体为新字体<code>timessimsun</code>，重新导入matplotlib</li></ol><h2 id="第一种方案全局宋体latex-新罗马">第一种方案：全局宋体+latex新罗马</h2><p>比如在绘制 text 时，英文使用 latex公式进行书写，可将英文显示为新罗马字体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>rc = &#123;<span class="hljs-string">&quot;font.family&quot;</span> : <span class="hljs-string">&quot;Times New Roman&quot;</span>,<br>      <span class="hljs-string">&quot;mathtext.fontset&quot;</span> : <span class="hljs-string">&quot;stix&quot;</span>,<br>      &#125;<br>plt.rcParams.update(rc)<br>fig,ax = plt.subplots(dpi = <span class="hljs-number">300</span>)<br>ax.set_xlabel(<span class="hljs-string">r&#x27;密度$\mathrm&#123;kg/m&#125;^3$&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.8</span>,<span class="hljs-string">r&#x27;宋体 $\mathrm&#123;Times New Roman&#125;$(正体)&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.6</span>,<span class="hljs-string">r&#x27;宋体 $Times New Roman$(斜体)&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-string">r&#x27;$\mathrm&#123;m^3&#125;\ m^3$&#x27;</span>,fontsize = <span class="hljs-number">30</span>)<br>fig.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417004233122.png"alt="image-20240417004233122" /><figcaption aria-hidden="true">image-20240417004233122</figcaption></figure><p>这时可能还是不行，原因是<code>matplotlib</code>没有找到宋体</p><p><strong>修改配置文件</strong></p><p><code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code>，也就是<code>Python</code>目录下的<code>Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code></p><p>修改字体类型为<code>serif</code>，并添加宋体</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417010437557.png"alt="image-20240417010437557" /><figcaption aria-hidden="true">image-20240417010437557</figcaption></figure><p><strong>更改缓存文件</strong></p><p><code>C:\Users\23984\.matplotlib\fontlist-v330.json</code></p><p>在 ttflist中重新新增一份<code>simsun</code>字体，定位到字体存放的位置</p><blockquote><p>这个字体可在电脑默认字体库中找到，在<code>C:\Windows\Fonts</code>目录下</p></blockquote><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417010608917.png"alt="image-20240417010608917" /><figcaption aria-hidden="true">image-20240417010608917</figcaption></figure><p>完成</p><blockquote><p>但是这个方法有个很明显的局限性，就是需要手动在英文的地方输入 latex公式，其一对不熟悉 latex的伙伴不友好，其二若数字是存储在一个变量中如何在 latex获取变量的值。比如在绘制 lengend 时，1000g/m3 中的 1000是存储在动态变量中的，这时就不能通过第一种方法显示更改为新罗马字体。</p></blockquote><h2 id="第二种方案latex-包">第二种方案：latex 包</h2><p>这种方案需要使用第三方 LaTex 包 ，xeCJK是一个提供中文、日文和韩文支持的软件包。输入以下代码老是报错，目前我没有成功，所以此方案不做详细介绍，如果有小伙伴通过这种方法成功了，还请一起交流学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib<br>mpl.use(<span class="hljs-string">&#x27;pgf&#x27;</span>) <span class="hljs-comment"># stwich backend to pgf</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>    plt.rcParams.update(&#123;<br>    <span class="hljs-string">&quot;text.usetex&quot;</span>: <span class="hljs-literal">True</span>,<span class="hljs-comment"># use default xelatex</span><br>    <span class="hljs-string">&quot;pgf.rcfonts&quot;</span>: <span class="hljs-literal">False</span>,<span class="hljs-comment"># turn off default matplotlib fonts properties</span><br>    <span class="hljs-string">&quot;pgf.preamble&quot;</span>: [<br>         <span class="hljs-string">r&#x27;\usepackage&#123;fontspec&#125;&#x27;</span>,<br>         <span class="hljs-string">r&#x27;\setmainfont&#123;Times New Roman&#125;&#x27;</span>,<span class="hljs-comment"># EN fonts Romans</span><br>         <span class="hljs-string">r&#x27;\usepackage&#123;xeCJK&#125;&#x27;</span>,<span class="hljs-comment"># import xeCJK</span><br>         <span class="hljs-string">r&#x27;\setCJKmainfont&#123;SimSun&#125;&#x27;</span>,<span class="hljs-comment"># set CJK fonts as SimSun</span><br>         <span class="hljs-string">r&#x27;\xeCJKsetup&#123;CJKecglue=&#125;&#x27;</span>,<span class="hljs-comment"># turn off one space between CJK and EN fonts</span><br>         ]<br>&#125;)<br>plt.rcParams[<span class="hljs-string">&#x27;savefig.dpi&#x27;</span>]=<span class="hljs-number">300</span><br>plt.figure(figsize=(<span class="hljs-number">4.5</span>, <span class="hljs-number">2.5</span>))<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br>plt.text(<span class="hljs-number">2.5</span>, <span class="hljs-number">2.</span>, <span class="hljs-string">&quot;\CJKfontspec&#123;SimHei&#125;&#123;黑体标注&#125;&quot;</span>)<span class="hljs-comment"># Annotation by SimHei</span><br>plt.xlabel(<span class="hljs-string">&quot;宋体坐标标签(units)&quot;</span>)<span class="hljs-comment"># CJK&amp;EN fonts mixed</span><br>plt.tight_layout(<span class="hljs-number">.5</span>)<br>plt.savefig(<span class="hljs-string">&#x27;examples.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三种方法合并新字体">第三种方法：合并新字体</h2><p>这是比较推荐的一种方法，就是将新罗马和宋体两种字体合并为一种字体使用，需要使用字体合并工具，这里我直接在网上找到了别人合并好的，<ahref="https://pan.baidu.com/s/1Dis12wv7cbDE-l61oGcnWQ?pwd=t036">点击下载</a>。</p><p>将合并好的字体放在<code>matplotlib</code>包目录下，我这里使用的是<code>anaconda</code>字体文件夹是<code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\fonts\ttf</code>，在<code>Python</code>环境下的<code>Lib\site-packages\matplotlib\mpl-data\fonts\ttf</code></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005515518.png"alt="image-20240417005515518" /><figcaption aria-hidden="true">image-20240417005515518</figcaption></figure><p><strong>修改配置文件</strong></p><p><code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code>，也就是<code>Python</code>目录下的<code>Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code></p><p>修改字体类型为<code>serif</code>，并添加新和成的字体</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005737211.png"alt="image-20240417005737211" /><figcaption aria-hidden="true">image-20240417005737211</figcaption></figure><p><strong>更改缓存文件</strong></p><p><code>C:\Users\23984\.matplotlib\fontlist-v330.json</code></p><p>在 ttflist中重新新增一份<code>timessimsun</code>字体，定位到字体存放的位置</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005920759.png"alt="image-20240417005920759" /><figcaption aria-hidden="true">image-20240417005920759</figcaption></figure><p><strong>测试代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> rcParams<br><br><br>config = &#123;<br>      <span class="hljs-string">&quot;font.family&quot;</span>:<span class="hljs-string">&#x27;serif&#x27;</span>,<br>      <span class="hljs-string">&quot;mathtext.fontset&quot;</span>:<span class="hljs-string">&#x27;stix&#x27;</span>,<br>      <span class="hljs-string">&quot;font.serif&quot;</span>: <span class="hljs-string">&#x27;timessimsun&#x27;</span>,<br>&#125;<br>rcParams.update(config)<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>    <span class="hljs-comment"># 解决负号显示为方块的问题</span><br><br>fig,ax = plt.subplots(dpi = <span class="hljs-number">300</span>)<br>ax.set_xlabel(<span class="hljs-string">r&#x27;密度$\mathrm&#123;kg/m&#125;^3$&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.05</span>,<span class="hljs-number">0.6</span>,<span class="hljs-string">r&#x27;matplotlib中文使用宋体英文使用新罗马&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>fig.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417011423583.png"alt="image-20240417011423583" /><figcaption aria-hidden="true">image-20240417011423583</figcaption></figure><p>完成</p><blockquote><p>参考链接:https://stackoverflow.com/questions/44008032/how-to-mix-chinese-and-english-with-matplotlib</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>matplotlib</tag>
      
      <tag>科研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20240414【再忙也要照顾好自己】</title>
    <link href="/2024/04/14/015%2020240414%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/04/14/015%2020240414%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>这些天一直忙着做实验，把自己陷入忙碌中，发现自己身上的缺陷还是很明显的。</p><ol type="1"><li>不虚心接受别人的建议；</li><li>做事容易慌张，没有规划；</li></ol><p>第一点我相信很多人都会这样，就是你说的可以对，但我一定不是错的。我也认为承认自己错了是一件非常丢人的事，那些“心灵鸡汤”总是会说让勇于承认自己的错误，但凡事都要有个前提。有时候你站在某个位置不能承认自己是错误的，改错往往比承认错误更有价值。曹操作为统领一方的诸侯，有时也会决策失误，比如赤壁之战，但是他决不能承认自己错了，因为一旦承认自己错了，很多将领就会认为他没有能力统领军队。而此时从失败中总结教训是最好的选择，不仅能鼓舞士气，还能体现自己的独特性格。</p><p>有时我不是不想承认自己的错误，而是本身就没有什么错误可言。在做实验中，一件小事本身就有很多种做法，而这些做法中都没有对错之分，只不过是思考问题角度不同导致的。总有某些人自以为是，认为自己想的就是正确的，好为人师，把自己的想法强加在别人身上，说一些让人反感的话，“你那些做不是更好吗？”“你为什么这样做，你为什么不那样做”。我心里真是想骂人，可是为了一起完成任务还是要忍下来。我不想争对与错，因为没有对错之分，即使有对错之分，都是一些无关紧要的小事，何必要争论。现在我也懒得去争论，你说什么就是什么，我不教训你，以后自有人教训你，你说你的，我做我的就好了。</p><p>今天是 14号了，抑爆部分做的稀碎。实验过程中总会遇见各种各样的问题，有时一个小问题能卡人很长时间。今天因为点火电极的事让人很崩溃，一会能打得着火一会打不着，即使这次能打着，受到一点扰动就打不着。120L球固体重复性极差，压力曲线下降段有一小节平滑段，一开始认为是点火时间的问题，之后又认为是传感器的问题，但后来换了氢气还是会出现这种状况，到现在都没有找到原因。不管了，明天直接做气体的抑爆实验，没有这么多时间让我想原因，目前最重要的就是完成项目的相关实验，尤其是气体的。明天开始做气体的空白实验以及抑爆实验，老板的目的是能抑制住，我的目的是有数据，只有有效果就好。</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20240401【钝感力】</title>
    <link href="/2024/04/01/014%2020240401%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/04/01/014%2020240401%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>网上总是能看到这样的毒鸡汤：“太用力的人走不远。”</p><p>性格使然，我本想着自己能够心静如水，坦然面对生活中的琐事。但在面对新鲜事物时，脑袋总是一团浆糊，尤其是当某件事由我来主导，这种现象愈加明显。</p><p>究其原因，是自己办事还是不稳重，容易慌乱。在面对一件事时，第一想的不是如何去解决这件事，而是太在意自身的标签，生怕把事情搞砸了。结果可想而知，脑子里全部都是办不好别人会说什么闲话之类的场景，而没有心思去解决当前的问题。</p><p>不知道这种好不好改变！</p><p>但是我想改变，我想变得“钝感力”一些。</p><p>不去过分关注别人的评价，在做事时专心做。如果有条件可提前规划，有时看到别人办事能力强，部分原因就是他们有一定的经验亦或是在办事之前已经在脑海中将做事流程过了一遍。等到真办起这件事时，一是心里有一定的准备不会慌乱（这是心理上的作用），二是已经“做过一遍”。</p><ul><li>做人：不要过分在意他人眼光，集中精力搞自己的事。</li><li>做事：提前在脑中预演一遍，把流程搞清楚，就知道难点在哪，还缺少什么东西，什么应该注意......</li></ul>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>边界层理论</title>
    <link href="/2024/03/20/013%20%E8%BE%B9%E7%95%8C%E5%B1%82%E7%90%86%E8%AE%BA/"/>
    <url>/2024/03/20/013%20%E8%BE%B9%E7%95%8C%E5%B1%82%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="边界层理论">边界层理论</h1><p>关键词：<span class="label label-primary">边界层</span> <spanclass="label label-info">增长比率</span> <spanclass="label label-success">y+</span></p><p>疑问：</p><ol type="1"><li>边界层应该画多少个（N）？</li><li>第一层网格的大小（yH）？</li><li>增长比率是多少（G）？</li></ol><h2 id="边界层理论-1">1、边界层理论</h2><p>流体在大雷诺数下作绕流流动时，在离固体壁面较远处，粘性力比惯性力小得多，可以忽略；但在固体壁面附近的薄层中，粘性力的影响则不能忽略，沿壁面法线方向存在相当大的速度梯度，这一薄层叫做边界层。流体的雷诺数越大，边界层越薄。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320150149505.png"alt="image-20240320150149505" /><figcaption aria-hidden="true">image-20240320150149505</figcaption></figure><p>需要小的单元来捕获给定方向上的梯度。</p><p><spanclass="math inline">\({\delta_{99}}\)</span>表示速度到达自由流速度99%时厚度。</p><ol type="1"><li>在边界层内，粘性力与惯性力同一数量级</li><li>由于边界层很薄，可以近似认为边界层中各截面上的压强等于同一截面上边界层外边界上的压强值。</li></ol><h3 id="无粘流动与真实流动的区别">无粘流动与真实流动的区别</h3><p>考虑边界层的存在，在后方会出现分离区</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320154409785.png"alt="image-20240320154409785" /><figcaption aria-hidden="true">image-20240320154409785</figcaption></figure><h2 id="第一层网格大小">2、第一层网格大小</h2><p>yH 依赖于 y+的值</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151316147.png"alt="image-20240320151316147" /><figcaption aria-hidden="true">image-20240320151316147</figcaption></figure><p><span class="math display">\[y^+=\frac{\rho u_\tau y_p}\mu\]</span></p><ul><li>动力粘度：单位为Pa.s(N/m2.s),厘泊（CP），1Pa.s=10P（泊）=1000CP（厘泊）</li><li>运动粘度 V：即动力粘度 u 与密度 p 的比值：v=u/p，运动粘度的单位为m2/s，习惯单位为：厘斯(mm2/s)</li><li>这里指的是动力粘度</li></ul><h2 id="总高度">3、总高度</h2><p>网格边界层的总高度要包含<spanclass="math inline">\({\delta_{99}}\)</span></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151535403.png"alt="image-20240320151535403" /><figcaption aria-hidden="true">image-20240320151535403</figcaption></figure><p>2 个边界层</p><p><span class="math display">\[y_T=y_H+y_H*G\]</span></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151740787.png"alt="image-20240320151740787" /><figcaption aria-hidden="true">image-20240320151740787</figcaption></figure><p>3 个边界层</p><p><span class="math display">\[y_T=y_H+y_HG+y_HG^2\]</span></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151857224.png"alt="image-20240320151857224" /><figcaption aria-hidden="true">image-20240320151857224</figcaption></figure><p>我们可以得出边界层公式</p><p><spanclass="math display">\[y_T=y_H+y_HG+y_HG^2+y_HG^3+...+y_HG^{N-1}\]</span></p><p>即</p><p><spanclass="math display">\[\sum_{k=0}^{N-1}y_HG^k=y_H\frac{1-G^N}{1-G}\]</span></p><p><spanclass="math display">\[\delta_{99}=y_H\frac{1-G^N}{1-G}\]</span></p><p>而边界层厚度的计算公式为</p><p><spanclass="math display">\[\begin{aligned}\delta_{99}&amp;=\frac{4.91L}{\sqrt{Re_L}}\quad&amp;Re&lt;5\times10^5\\\delta_{99}&amp;=\frac{0.38L}{Re_L^{1/5}}\quad&amp;Re&gt;5\times10^5\end{aligned}\]</span></p><h2 id="g-和-n-如何确定">4、G 和 N 如何确定</h2><p>首先可以大致猜测一下</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320152635843.png"alt="image-20240320152635843" /><figcaption aria-hidden="true">image-20240320152635843</figcaption></figure><p>如果 N&gt;10，则第一个网格高度约为 30</p><p>如果 N&gt;25，则第一个网格高度约为 1</p><p>通常</p><ul><li>1.05&lt;G&lt;1.3</li><li>10&lt;N&lt;30</li></ul><h2 id="如何确定网格是好坏">5、如何确定网格是好坏</h2><h3 id="小的网格转变">小的网格转变</h3><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320153250656.png"alt="image-20240320153250656" /><figcaption aria-hidden="true">image-20240320153250656</figcaption></figure><h3 id="在大涡模拟中">在大涡模拟中</h3><p><spanclass="math display">\[v_{sgs}=\left(C_{s}\Delta\right)^{2}\sqrt{2S_{ij}S_{ij}}\]</span></p><p>网格大小突然改变，会导致<spanclass="math inline">\(v_{sgs}\)</span>突然改变</p><h3 id="在-rans-中">在 RANS 中</h3><p>使用至少 3 种不同的网格进行网格细化研究是非常必要的。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320153804905.png"alt="image-20240320153804905" /><figcaption aria-hidden="true">image-20240320153804905</figcaption></figure><p><ahref="https://www.youtube.com/watch?v=1gSHN99I7L4&amp;list=PLnJ8lIgfDbkqaOdo-twtuco-qYahdAeG8">边界层理论</a></p><h2 id="附录">附录</h2><h3 id="y定义"><ahref="https://www.simscale.com/forum/t/what-is-y-yplus/82394">y+定义</a></h3><p>根据 y+的大小，可以将湍流边界层分为好多层。</p><ol type="1"><li>粘性子层(<span class="math inline">\(y^{+} &lt;5\)</span>)：粘性影响占据主要地位，雷诺应力可忽略，则<spanclass="math inline">\(u^{+} = y^{+}\)</span></li><li>对数区域(<span class="math inline">\(y^{+} &gt;30\)</span>)：湍流应力占主导地位，<spanclass="math inline">\(u^+=\frac1\kappa ln(y^+)+B\)</span>，其中k=0.41,B=5.2</li><li>缓冲层(<span class="math inline">\(5 &lt; y^{+} &lt;30\)</span>)：粘性应力和湍流应力的大小相近，由于该区域比较复杂，速度剖面的定义不明确，原始壁面函数会避开位于该区域的第一个单元中心。</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240320162112.png"alt="The Law of the Wall" /><figcaption aria-hidden="true">The Law of the Wall</figcaption></figure><p>壁面函数要求第一层网格尺寸<spanclass="math inline">\(30&lt;y^{+}&lt;300\)</span></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240320164028.png"alt="y+应用" /><figcaption aria-hidden="true">y+应用</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openfoam自定义求解器</title>
    <link href="/2024/03/20/012%20Openfoam%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B1%82%E8%A7%A3%E5%99%A8/"/>
    <url>/2024/03/20/012%20Openfoam%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B1%82%E8%A7%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="求解器">1、求解器</h1><h2 id="复制源码">1.1 复制源码</h2><p>本案例以 icoFoam为例，复制【openFOAM/OpenFOAM-9/applications/solvers/incompressible/icoFoam】文件夹至run 文件夹下（我的是【openFOAM/mtl-9/run/solvers/incompressible】）</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131700207.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="修改名称">1.2 修改名称</h2><p>将文件夹重新命名为【myIconFoam】 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131703290.png"alt="image.png" /></p><p>修改该目录下的文件名称，为了便于分辨是自己的求解器，在源代码里输出一些内容</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614001149142.png"alt="image-20230614001149142" /><figcaption aria-hidden="true">image-20230614001149142</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131703091.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="修改-files">1.3 修改 files</h2><p>修改【Make/files】</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131704567.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>注意：这里路径要改为【$(FOAM_USER_APPBIN)】，与之前【FOAM_USER_APPBIN】区别</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131705640.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="编译">1.4 编译</h2><p>输入【wmake】</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614001032908.png"alt="image-20230614001032908" /><figcaption aria-hidden="true">image-20230614001032908</figcaption></figure><p>编译成功之后开始使用</p><h1 id="使用">2、使用</h1><p>复制一份 cavity 案例</p><p>blockMesh 划分网格</p><p>myIcoFoam 求解</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614001314507.png"alt="image-20230614001314507" /><figcaption aria-hidden="true">image-20230614001314507</figcaption></figure><h1 id="进阶">3、进阶</h1><p>本案例修改 icoFoam 求解器，添加温度项。 <spanclass="math display">\[\frac{\partial T}{\partial t} + \bigtriangledown\cdot (UT)-{\bigtriangledown }^2(D_{T}T)=0\]</span></p><h2 id="修改源文件">3.1 修改源文件</h2><p>添加以下代码，及上述方程</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614005652819.png"alt="image-20230614005652819" /><figcaption aria-hidden="true">image-20230614005652819</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">fvScalarMatrix <span class="hljs-title">TEqn</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    fvm::ddt(T) + fvm::div(phi, T) - fvm::laplacian(DT, T)</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>TEqn.<span class="hljs-built_in">solve</span>();<br></code></pre></td></tr></table></figure><h2 id="修改场文件">3.2 修改场文件</h2><p>新增以下有关温度项的代码</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614005903552.png"alt="image-20230614005903552" /><figcaption aria-hidden="true">image-20230614005903552</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++">IOdictionary myProperties <span class="hljs-comment">// 新增一个myProperties项</span><br>(<br>    <span class="hljs-built_in">IOobject</span><br>    (<br>        <span class="hljs-string">&quot;myProperties&quot;</span>,<br>        runTime.<span class="hljs-built_in">system</span>(), <span class="hljs-comment">// 存储在system文件夹下</span><br>        mesh,<br>        IOobject::MUST_READ_IF_MODIFIED,<br>        IOobject::NO_WRITE<br>    )<br>);<br><br>dimensionedScalar DT <span class="hljs-comment">// 定义一个变量DT，从myProperties中获取</span><br>(<br>    <span class="hljs-string">&quot;DT&quot;</span>,<br>    myProperties.<span class="hljs-built_in">lookup</span>(<span class="hljs-string">&quot;DT&quot;</span>)<br>);<br><br>Info&lt;&lt; <span class="hljs-string">&quot;Reading field T\n&quot;</span> &lt;&lt; endl;<br>volScalarField T <span class="hljs-comment">// 定义一个变量T</span><br>(<br>    <span class="hljs-built_in">IOobject</span><br>    (<br>        <span class="hljs-string">&quot;T&quot;</span>,<br>        runTime.<span class="hljs-built_in">timeName</span>(),<br>        mesh,<br>        IOobject::MUST_READ,<br>        IOobject::AUTO_WRITE<br>    ),<br>    mesh<br>);<br></code></pre></td></tr></table></figure><h2 id="编译-1">3.3 编译</h2><p>修改完成之后，【wmake】编译</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010106515.png"alt="image-20230614010106515" /><figcaption aria-hidden="true">image-20230614010106515</figcaption></figure><h2 id="使用-1">3.4 使用</h2><h3 id="初始条件">3.4.1 初始条件</h3><p>复制 p 文件至 T，改变名称、单位、初始值和边界条件</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010203279.png"alt="image-20230614010203279" /><figcaption aria-hidden="true">image-20230614010203279</figcaption></figure><h3 id="自定义属性">3.4.2 自定义属性</h3><p>复制 constant 里的文件【transportProperties】文件至 system，修改名称myProperties</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010351434.png"alt="image-20230614010351434" /><figcaption aria-hidden="true">image-20230614010351434</figcaption></figure><h3 id="新增离散格式">3.4.3 新增离散格式</h3><p>新增 div(phi,T)的离散格式</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010458808.png"alt="image-20230614010458808" /><figcaption aria-hidden="true">image-20230614010458808</figcaption></figure><h3 id="新增求解项">3.4.4 新增求解项</h3><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010607465.png"alt="image-20230614010607465" /><figcaption aria-hidden="true">image-20230614010607465</figcaption></figure><h3 id="求解">3.4.5 求解</h3><p>划分网格：blockMesh</p><p>求解：myIcoFoam</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010711878.png"alt="image-20230614010711878" /><figcaption aria-hidden="true">image-20230614010711878</figcaption></figure><p>完成</p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Openfoam</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>Openfoam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯云+宝塔+Hexo搭建个人博客</title>
    <link href="/2024/03/19/011%20%E8%85%BE%E8%AE%AF%E4%BA%91+%E5%AE%9D%E5%A1%94+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/03/19/011%20%E8%85%BE%E8%AE%AF%E4%BA%91+%E5%AE%9D%E5%A1%94+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="服务器购买">1、服务器购买</h1><p>我这里买的是腾讯云的轻量服务器，选择 centos 版本。<ahref="https://cloud.tencent.com/act/pro/2024spring?from=21932">网站</a></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318092649737.png"alt="image-20240318092649737" /><figcaption aria-hidden="true">image-20240318092649737</figcaption></figure><p>购买完成可在服务器列表中查看</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318092813799.png"alt="image-20240318092813799" /><figcaption aria-hidden="true">image-20240318092813799</figcaption></figure><p>点击服务器卡片上【更多】-【查看详情】，进入服务器。可先重置密码</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318092956444.png"alt="image-20240318092956444" /><figcaption aria-hidden="true">image-20240318092956444</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093018683.png"alt="image-20240318093018683" /><figcaption aria-hidden="true">image-20240318093018683</figcaption></figure><p>重置密码后点击【一键登录】</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093052025.png"alt="image-20240318093052025" /><figcaption aria-hidden="true">image-20240318093052025</figcaption></figure><h1 id="宝塔安装">2、宝塔安装</h1><p>在终端输入宝塔的安装命令，<ahref="https://www.bt.cn/new/download.html">宝塔安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093320260.png"alt="image-20240318093320260" /><figcaption aria-hidden="true">image-20240318093320260</figcaption></figure><p>如果出现以下提示说明需要管理员权限。终端输入<code>su</code>进入管理员权限，然后执行安装。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093436581.png"alt="image-20240318093436581" /><figcaption aria-hidden="true">image-20240318093436581</figcaption></figure><p>安装好之后终端会显示宝塔访问端口号、账号和密码。输入【主机域名:端口号】进入宝塔面板，使用账号和密码登录。</p><h1 id="网站搭建">3、网站搭建</h1><p>登录成功后，安装 php 推荐套餐</p><p>添加站点</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110109451.png"alt="image-20240318110109451" /><figcaption aria-hidden="true">image-20240318110109451</figcaption></figure><p>填写域名和网站的目录</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110156648.png"alt="image-20240318110156648" /><figcaption aria-hidden="true">image-20240318110156648</figcaption></figure><p>在文件下面会看到刚才的文件夹【<code>qlbai.fun</code>】，把里面的文件全部删除。（如果没有自己创建一下）</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110239010.png"alt="image-20240318110239010" /><figcaption aria-hidden="true">image-20240318110239010</figcaption></figure><p>把该文件夹下的全部文件删除，在本地博客目录下运行，生成 public目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -g<br></code></pre></td></tr></table></figure><p>生成 public 目录后压缩一下，然后上传至宝塔解压缩</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110424392.png"alt="image-20240318110424392" /><figcaption aria-hidden="true">image-20240318110424392</figcaption></figure><p>然后启动项目</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110440540.png"alt="image-20240318110440540" /><figcaption aria-hidden="true">image-20240318110440540</figcaption></figure><blockquote><p>使用域名访问，需要先购买个域名，通过 DNS解析到该主机地址上，还需要备案才能访问，过程就不演示了。</p></blockquote><h1 id="修改宝塔默认端口">4、修改宝塔默认端口</h1><p>宝塔服务器使用的默认端口是80，则网站只能使用其他端口，在访问网站时就得在后面加端口号，很不方便。所以要修改服务器默认端口，这里改为1180，将网站的端口改为 80。</p><p>进入<code>/www/server/panel/vhost/nginx/</code>文件夹下，可看到以下几个配置文件，</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428161735189.png"alt="image-20240428161735189" /><figcaption aria-hidden="true">image-20240428161735189</figcaption></figure><p>修改默认服务器配置文件<code>0.default.conf</code>，默认端口号为<code>1180</code></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428161827572.png"alt="image-20240428161827572" /><figcaption aria-hidden="true">image-20240428161827572</figcaption></figure><p>修改<code>php</code>配置文件<code>phpfpm_status.conf</code>，默认端口号为<code>1180</code></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428161913605.png"alt="image-20240428161913605" /><figcaption aria-hidden="true">image-20240428161913605</figcaption></figure><p>修改网站配置文件<code>qlbai.fun.conf</code>，默认端口号为<code>80</code></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428162009848.png"alt="image-20240428162009848" /><figcaption aria-hidden="true">image-20240428162009848</figcaption></figure><p>之后需要在防火墙处打开<code>1180</code>端口号</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428162220684.png"alt="image-20240428162220684" /><figcaption aria-hidden="true">image-20240428162220684</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428162228031.png"alt="image-20240428162228031" /><figcaption aria-hidden="true">image-20240428162228031</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享一些常用的UDF</title>
    <link href="/2024/03/17/010%20%E5%B8%B8%E7%94%A8%E7%9A%84udf/"/>
    <url>/2024/03/17/010%20%E5%B8%B8%E7%94%A8%E7%9A%84udf/</url>
    
    <content type="html"><![CDATA[<p>下面分享一些简单的 udf，带领小白快速入门。</p><h1 id="lee">1、Lee</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sg_mphase.h&quot;</span>  <span class="hljs-comment">//包含体积分数的宏</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> T_SAT 30.27   <span class="hljs-comment">//饱和温度373.15 K</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LAT_HT 1.e3 <span class="hljs-comment">//汽化潜热1000 J/kg</span></span><br><br><br><span class="hljs-comment">// 液相质量源项</span><br>DEFINE_SOURCE(liq_src, cell, pri_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *sec_th;<br> real m_dot_l;<span class="hljs-comment">// 定义相变质量kg/(m2 s)</span><br> <span class="hljs-comment">// mix_th存储主相的Thread指针；sec_th存储次相指针，注意ID</span><br> mix_th = THREAD_SUPER_THREAD(pri_th); <span class="hljs-comment">//指向混合区域的主相</span><br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>); <span class="hljs-comment">//指向单相区的气相指针</span><br> thi_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">2</span>); <span class="hljs-comment">//指向单相区的液相指针</span><br> <span class="hljs-comment">// 温度大于饱和温度，表示为蒸发</span><br> <span class="hljs-keyword">if</span> (C_T(cell, sec_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">//计算蒸发量，注意液相质量流量为负值，0.1为coeff值</span><br>   m_dot_l = <span class="hljs-number">-0.25</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对体积分数求导</span><br>   dS[eqn] = <span class="hljs-number">-0.25</span> * C_R(cell, sec_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//计算冷凝量，液相质量分数为正值</span><br>   m_dot_l = <span class="hljs-number">0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) * <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, sec_th)) / T_SAT;<br>   <span class="hljs-comment">//若对体积分数求导得到的值为正，干脆直接赋零值</span><br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_l;<br>&#125;<br><br><br><br><span class="hljs-comment">// 气相质量源项，解释同上</span><br>DEFINE_SOURCE(vap_src, cell, sec_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *pri_th;<br> real m_dot_v;<br> mix_th = THREAD_SUPER_THREAD(pri_th); <span class="hljs-comment">//指向混合区域的主相</span><br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>); <span class="hljs-comment">//指向单相区的气相指针</span><br> thi_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">2</span>); <span class="hljs-comment">//指向单相区的液相指针</span><br> <span class="hljs-keyword">if</span> (C_T(cell, thi_th) &lt;= T_SAT)<br> &#123;<br>   m_dot_v = <span class="hljs-number">0.1</span> * C_VOF(cell,thi_th) * C_R(cell, thi_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, thi_th) - T_SAT) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   m_dot_v = <span class="hljs-number">-0.1</span> * C_VOF(cell, thi_th) * C_R(cell, thi_th) * <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, thi_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_R(cell, thi_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, thi_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_v;<br>&#125;<br><br><br><span class="hljs-comment">//混合相的能量源项</span><br>DEFINE_SOURCE(enrg_src, cell, mix_th, dS, eqn)<br>&#123;<br> Thread *pri_th, *sec_th, *thi_th;<br> real m_dot;<br> pri_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">0</span>);<br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>);<br> thi_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">2</span>);<br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">// 得到蒸发量，Lee模型</span><br>   m_dot = <span class="hljs-number">-0.25</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>           <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对温度求导，若为负则保留，否则赋值零</span><br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//得到冷凝量</span><br>   m_dot = <span class="hljs-number">0.1</span> * C_VOF(cell, thi_th) * C_R(cell, thi_th) *<br>           <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, thi_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, thi_th) * C_R(cell, thi_th) / T_SAT;<br> &#125;<br><br> <span class="hljs-comment">// 返回热量值，利用潜热与质量流量的乘积得到</span><br> <span class="hljs-keyword">return</span> LAT_HT * m_dot;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ke-模型">2、ke 模型</h1><h2 id="ke1">2.1 ke1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Cu 0.09</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Us 2.2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> zs 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> a 0.15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZG 350</span><br><br>DEFINE_PROFILE(k_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br><br>F_PROFILE(f,t,i) = <span class="hljs-built_in">pow</span>(Iz*Uz,<span class="hljs-number">2</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br><br>DEFINE_PROFILE(e_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz,kz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br>kz = <span class="hljs-built_in">pow</span>(Iz*Uz,<span class="hljs-number">2</span>);<br><br>F_PROFILE(f,t,i) = <span class="hljs-built_in">pow</span>(Cu,<span class="hljs-number">0.5</span>)*kz*Us/zs*a*<span class="hljs-built_in">pow</span>(z/zs,a<span class="hljs-number">-1</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ke2">2.2 ke2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Cu 0.09</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Us 2.2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> zs 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> a 0.10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZG 250</span><br><br>DEFINE_PROFILE(k_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br><span class="hljs-keyword">if</span>(z&lt;<span class="hljs-number">5</span>)<br>Iz = <span class="hljs-number">0.18</span>;<br><span class="hljs-keyword">else</span><br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br>F_PROFILE(f,t,i) = <span class="hljs-number">1.5</span>*<span class="hljs-built_in">pow</span>(Uz*Iz,<span class="hljs-number">2</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br><br>DEFINE_PROFILE(e_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz,kz,lz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br><span class="hljs-keyword">if</span>(z&lt;<span class="hljs-number">5</span>)<br>Iz = <span class="hljs-number">0.18</span>;<br><span class="hljs-keyword">else</span><br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br>kz = <span class="hljs-number">1.5</span>*<span class="hljs-built_in">pow</span>(Uz*Iz,<span class="hljs-number">2</span>);<br>F_PROFILE(f,t,i) = F_PROFILE(f,t,i) = <span class="hljs-built_in">pow</span>(Cu,<span class="hljs-number">0.5</span>)*kz*Us/zs*a*<span class="hljs-built_in">pow</span>(z/zs,a<span class="hljs-number">-1</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="质量入口">3、质量入口</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_mlih2,thread,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;<br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">38</span>)<br>F_PROFILE(f,thread,i) = <span class="hljs-number">4.76</span>*<span class="hljs-number">0.75</span>;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,i) = <span class="hljs-number">0</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br>DEFINE_PROFILE(inlet_mh2,thread,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;<br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">38</span>)<br>F_PROFILE(f,thread,i) = <span class="hljs-number">4.76</span>*<span class="hljs-number">0.25</span>;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,i) = <span class="hljs-number">0</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="速度入口">4、速度入口</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_x,thread,index)<br>&#123;<br>real y,v0,h0;<br>real x[ND_ND];<br><span class="hljs-type">face_t</span> f;<br>v0=<span class="hljs-number">2.2</span>;<br>h0=<span class="hljs-number">10</span>;<br>begin_f_loop(f,thread)<br>&#123;<br>F_CENTROID(x,f,thread);<br>y=x[<span class="hljs-number">2</span>];<br>F_PROFILE(f,thread,index) = v0*<span class="hljs-built_in">pow</span>(y/h0,<span class="hljs-number">0.10</span>);<br>&#125;<br>end_f_loop(f,thread)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="时间步长">5、时间步长</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br>DEFINE_DELTAT(mydeltat,domain)<br>&#123;<br>    real time_step;<br>    real flow_time = CURRENT_TIME;<br>    <span class="hljs-keyword">if</span>(flow_time&lt;<span class="hljs-number">120</span>)<br>        time_step = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        time_step = <span class="hljs-number">0.0005</span>;<br>    <span class="hljs-keyword">return</span> time_step;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UDF</tag>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UDF学习笔记</title>
    <link href="/2024/03/17/009%20UDF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/03/17/009%20UDF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>有时 fluent 自带的边界条件等不满足我们的需求，需要使用 udf进行更改，比如一个泄漏口流量随时间变化。对于大多数没有编程基础的小伙伴来说，直接看fluent udf 的官方文档比较吃力，花费大量的时间还找不到相关的函数。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204081531095.png"alt="image-20220408153144869" /><figcaption aria-hidden="true">image-20220408153144869</figcaption></figure><h2 id="udf-常见的循环宏">1、UDF 常见的循环宏</h2><p><strong>简写</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">d:：domin（指针）<br><br>ct,t：cell thread（指针）<br><br>ft,f_thread：face thread（指针）<br><br>c：cell thread（变量）<br><br>f：face thread（变量）<br></code></pre></td></tr></table></figure><h3 id="对域-d-中的所有单元循环">1.1 对域 d 中的所有单元循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">thread_loop_f(ft,d) &#123;  &#125;;<br></code></pre></td></tr></table></figure><h3 id="对域-d-中的所有面-thread-循环">1.2 对域 d 中的所有面 thread循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">thread_loop_f(ft,d) &#123;  &#125;;<br></code></pre></td></tr></table></figure><h3 id="对-thread-t-中的所有单元循环">1.3 对 thread t中的所有单元循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">begin_c_loop(c,t)<br>&#123;  &#125;<br>end_c_loop(c,t);<br></code></pre></td></tr></table></figure><h3 id="对面-thread-中所有面循环">1.4 对面 thread 中所有面循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">begin_f_loop(f,f_thread)<br>&#123;  &#125;<br>end_f_loop(f,f_thread)<br></code></pre></td></tr></table></figure><h2 id="相关案例">2、相关案例</h2><h3 id="风速随高度变化">2.1 风速随高度变化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_x,thread,index)<br>&#123;<br>real y,v0,h0;<br>real x[ND_ND];<span class="hljs-comment">//用来存储质心坐标</span><br><span class="hljs-type">face_t</span> f;<br>v0=<span class="hljs-number">1</span>;<br>h0=<span class="hljs-number">2</span>;<br>begin_f_loop(f,thread)<br>&#123;<br>        <span class="hljs-comment">//这里传入的x是质心</span><br>F_CENTROID(x,f,thread);<span class="hljs-comment">//F_CENTROID 获得面中心的坐标</span><br>y=x[<span class="hljs-number">2</span>];<br>F_PROFILE(f,thread,index) = v0*<span class="hljs-built_in">pow</span>(y/h0,<span class="hljs-number">0.2</span>);<br>end_f_loop(f,thread)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="速度随时间变化">2.2 速度随时间变化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_V,thread,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<span class="hljs-comment">// 定义一个面f</span><br>real flow_time = CURRENT_TIME;<span class="hljs-comment">//定义一个实数flow_time获取当前时间</span><br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &gt;=<span class="hljs-number">0</span> )<br>F_PROFILE(f,thread,i) = <span class="hljs-number">1.5</span>+<span class="hljs-number">0.5</span>*<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*<span class="hljs-number">3.14159</span>*<span class="hljs-number">0.1</span>*flow_time);<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,i) = <span class="hljs-number">1.5</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="压力随着高度变化">2.3 压力随着高度变化</h3><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021506327.png"alt="image-20220402150600314" /><figcaption aria-hidden="true">image-20220402150600314</figcaption></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br>DEFINE_PROFILE(pressure_profile,t,i)<br>&#123;<br>   real x[ND_ND];<br>   real y;<br>   <span class="hljs-type">face_t</span> f;<br>   begin_f_loop(f,t)<br>   &#123;<br>       F_CENTROID(X,f,t);<span class="hljs-comment">//F_CENTROID 获得面中心的坐标，用来计算每个面的压力</span><br>       y = x[<span class="hljs-number">1</span>];<span class="hljs-comment">// 获取y数值，0表示x，1表示y，2表示z</span><br>       F_FPOFILE(f,t,i) = <span class="hljs-number">1.1e5</span> - y*y/(<span class="hljs-number">.0745</span>*<span class="hljs-number">.0745</span>)*<span class="hljs-number">0.1e5</span>;<br>   &#125;<br>   end_f_loop(f,t)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="材料属性随温度变化">2.4 材料属性随温度变化</h3><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021508615.png"alt="image-20220402150830581" /><figcaption aria-hidden="true">image-20220402150830581</figcaption></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFILE_PROPERTY(steel_heat,c,t)<br>&#123;<br>real <span class="hljs-type">s_t</span>;<br>real = Tk = C_T(c,t);<span class="hljs-comment">//读取当前的温度</span><br><span class="hljs-keyword">if</span>(Tk&lt;=<span class="hljs-number">273.15</span>)<br><span class="hljs-type">s_t</span> = <span class="hljs-number">14</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Tk&lt;=<span class="hljs-number">1273.15</span>)<br><span class="hljs-type">s_t</span> = <span class="hljs-number">14</span>-(Tk<span class="hljs-number">-273.15</span>)*<span class="hljs-number">0.004</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-type">s_t</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-type">s_t</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021524675.png"alt="image-20220402152435617" /><figcaption aria-hidden="true">image-20220402152435617</figcaption></figure><h3 id="质量流量随时间变化">2.5 质量流量随时间变化</h3><p>以下名为 INTERT_MF 的 UDF 最初指定前 10 毫秒的质量流量为 3.0千克/秒，然后在接下来的 10 毫秒内将其增加到 4.0 千克/秒，之后指定 5.0千克/秒。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_mf,th,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;<span class="hljs-comment">/*查找当前流动的时间*/</span><br>begin_f_loop(f,th)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">0.01</span>)<br>F_PROFILE(f,th,i) = <span class="hljs-number">3.0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">0.02</span>)<br>F_PROFILE(f,th,i) = <span class="hljs-number">4.0</span>;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,th,i) = <span class="hljs-number">5.0</span>;<br>&#125;<br>end_f_loop(f,th);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间步长的改变">2.6 时间步长的改变</h3><p>DEFINE_DELTAT</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFINE <span class="hljs-title function_">DELTAT</span> <span class="hljs-params">(mydeltat,d)</span><br>&#123;<br>    real time_step;<br>    real flow_time = CURRENT_TIME;<br>    <span class="hljs-keyword">if</span> (flow_time <span class="hljs-number">0.5</span>)<br>        time_step = <span class="hljs-number">0.1</span>;<br>    <span class="hljs-keyword">else</span><br>        time_step = <span class="hljs-number">0.2</span>;<br>    <span class="hljs-keyword">return</span> time_step;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="蒸发冷凝模型源相">2.7 蒸发冷凝模型源相</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sg_mphase.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> T_SAT 373.15   <span class="hljs-comment">//饱和温度373.15 K</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LAT_HT 1.e3 <span class="hljs-comment">//汽化潜热1000 J/kg</span></span><br><span class="hljs-comment">// 液相质量源项</span><br>DEFINE_SOURCE(liq_src, cell, pri_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *sec_th;<br> real m_dot_l;<br> <span class="hljs-comment">// mix_th存储主相的Thread指针；sec_th存储次相指针，注意ID</span><br> mix_th = THREAD_SUPER_THREAD(pri_th);<br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>);<br> <span class="hljs-comment">// 温度大于饱和温度，表示为蒸发</span><br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">//计算蒸发量，注意液相质量流量为负值，0.1为coeff值</span><br>   m_dot_l = <span class="hljs-number">-0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, pri_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对体积分数求导</span><br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_R(cell, pri_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, pri_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//计算冷凝量，液相质量分数为正值</span><br>   m_dot_l = <span class="hljs-number">0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>             <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, mix_th)) / T_SAT;<br>   <span class="hljs-comment">//若对体积分数求导得到的值为正，干脆直接赋零值</span><br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_l;<br>&#125;<br><span class="hljs-comment">// 气相质量源项，解释同上</span><br>DEFINE_SOURCE(vap_src, cell, sec_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *pri_th;<br> real m_dot_v;<br> mix_th = THREAD_SUPER_THREAD(sec_th);<br> pri_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">0</span>);<br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   m_dot_v = <span class="hljs-number">0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, mix_th) - T_SAT) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   m_dot_v = <span class="hljs-number">-0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>             <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, mix_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_R(cell, sec_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_v;<br>&#125;<br><span class="hljs-comment">//混合相的能量源项</span><br>DEFINE_SOURCE(enrg_src, cell, mix_th, dS, eqn)<br>&#123;<br> Thread *pri_th, *sec_th;<br> real m_dot;<br> pri_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">0</span>);<br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>);<br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">// 得到蒸发量，Lee模型</span><br>   m_dot = <span class="hljs-number">-0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) *<br>           <span class="hljs-built_in">fabs</span>(C_T(cell, pri_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对温度求导，若为负则保留，否则赋值零</span><br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//得到冷凝量</span><br>   m_dot = <span class="hljs-number">0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>           <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, mix_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) / T_SAT;<br> &#125;<br><br> <span class="hljs-comment">// 返回热量值，利用潜热与质量流量的乘积得到</span><br> <span class="hljs-keyword">return</span> LAT_HT * m_dot;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数">3、函数</h2><h3 id="define_profile">3.1 DEFINE_PROFILE</h3><ol type="1"><li><p>使用 DEFINE_PROFILE定义一个<strong>自定义边界配置文件</strong>，该边界配置文件随空间坐标或时间的函数而变化。</p></li><li><p>边界的变量可以是速度、压力、温度、湍流动能、湍流耗散率、质量流率等（见手册2.3.17）</p></li></ol><p>用法<code>DEFINE_PROFILE (name,t,i)</code></p><p>thread *t：指向要应用边界条件的线程的指针。</p><p>int i：标识要定义的变量的索引。</p><h3 id="defile_property">3.2 DEFILE_PROPERTY</h3><ol type="1"><li><p>定义材料的属性</p></li><li><p>可以是密度、粘度、热导率、吸收和扩散系数、层流火焰速度、应变率等</p></li></ol><p><strong>对于多相流</strong></p><p>传热系数（Mixture）、颗粒或液滴直径（Mixture）</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021517069.png"alt="image-20220402151729022" /><figcaption aria-hidden="true">image-20220402151729022</figcaption></figure><p><strong>用法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFILE_PROPERTY(name,c,t)<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021518094.png"alt="image-20220402151838068" /><figcaption aria-hidden="true">image-20220402151838068</figcaption></figure><h2 id="常用宏">4、常用宏</h2><h3 id="流场变量宏">4.1 流场变量宏</h3><table><thead><tr><th style="text-align: center;">C_R(c,t)</th><th style="text-align: center;">密度（Density）</th></tr></thead><tbody><tr><td style="text-align: center;">C_P(c,t)</td><td style="text-align: center;">压力（Pressure）</td></tr><tr><td style="text-align: center;">C_U(c,t)</td><td style="text-align: center;">x 方向速度（U-velocity）</td></tr><tr><td style="text-align: center;">C_V(c,t)</td><td style="text-align: center;">y 方向速度（V-velocity）</td></tr><tr><td style="text-align: center;">C_W(c,t)</td><td style="text-align: center;">z 方向速度（W-velocity）</td></tr><tr><td style="text-align: center;">C_T(c,t)</td><td style="text-align: center;">温度（Temperature）</td></tr><tr><td style="text-align: center;">C_H(c,t)</td><td style="text-align: center;">焓（Enthalpy）</td></tr></tbody></table><p>其他</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204081421298.png"alt="image-20220408142156047" /><figcaption aria-hidden="true">image-20220408142156047</figcaption></figure><h3 id="几何和时间宏">4.2 几何和时间宏</h3><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204081424561.png"alt="image-20220408142424531" /><figcaption aria-hidden="true">image-20220408142424531</figcaption></figure><p>CURRENT_TIME；获取当前模拟时间的值；</p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UDF</tag>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式（c++版本）</title>
    <link href="/2024/03/17/002%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/03/17/002%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/baiqinglun/cpp_designPatten">github地址</a></p><h2 id="工厂模式">1、工厂模式</h2><h3 id="简单工厂">1.1 简单工厂</h3><ol type="1"><li>定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</li><li>定义一个工厂 Factory 用于创建图形.工厂中有个 create函数可以根据传入的参数 new 一个相应的图形并返回.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2.</span><br><span class="hljs-comment"> * 简单工厂模式</span><br><span class="hljs-comment"> * 1. 定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</span><br><span class="hljs-comment"> * 2. 定义一个工厂Factory用于创建图形.工厂中有个create函数可以根据传入的参数new一个相应的图形并返回.</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">GRAPHICS_TYPE</span>&#123;<br>    SPHERE,<br>    CUBE<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sphere</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制球形&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cube</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Graphics* <span class="hljs-title">createGraphics</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> GRAPHICS_TYPE type)</span></span>&#123;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> SPHERE:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Sphere;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CUBE:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cube;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Graphics* graphics = Factory::<span class="hljs-built_in">createGraphics</span>(GRAPHICS_TYPE::SPHERE);<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    graphics = Factory::<span class="hljs-built_in">createGraphics</span>(GRAPHICS_TYPE::CUBE);<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 绘制球形</span><br><span class="hljs-comment">// 绘制长方体</span><br><br></code></pre></td></tr></table></figure><h3 id="工厂方法模式">1.2 工厂方法模式</h3><p>简单工厂每次新增创建图形类，就需要修改 Factory工厂的创建方法,违反了开放开放封闭原则。</p><p>使用工厂模式为每个图形添加一个工厂。</p><ol type="1"><li>定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</li><li>定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2.</span><br><span class="hljs-comment"> * 工厂方法模式</span><br><span class="hljs-comment"> * 简单工厂每次新增创建图形类，就需要修改Factory工厂的创建方法,违反了开放开放封闭原则。</span><br><span class="hljs-comment"> * 1. 定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</span><br><span class="hljs-comment"> * 2. 定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sphere</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制球形&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cube</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Graphics* <span class="hljs-title">createGraphics</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SphereFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Graphics * <span class="hljs-title">createGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Sphere;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CubeFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Graphics * <span class="hljs-title">createGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cube;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Graphics* graphics;<br>    SphereFactory sphereFactory;<br>    graphics = sphereFactory.<span class="hljs-built_in">createGraphics</span>();<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    CubeFactory cubeFactory;<br>    graphics = cubeFactory.<span class="hljs-built_in">createGraphics</span>();<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 绘制球形</span><br><span class="hljs-comment">// 绘制长方体</span><br><br></code></pre></td></tr></table></figure><h3 id="抽象工厂">1.3 抽象工厂</h3><p>是工厂方法模式的一种演变。有时候我们需要创建静态或者会动的球形或者长方体，抽象工厂应运而生。</p><ol type="1"><li>定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</li><li>定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2.</span><br><span class="hljs-comment"> * 抽象工厂方法</span><br><span class="hljs-comment"> * 是工厂方法模式的一种演变。有时候我们需要创建静态或者会动的球形或者长方体，抽象工厂应运而生。</span><br><span class="hljs-comment"> * 1. 定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</span><br><span class="hljs-comment"> * 2. 定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-comment">// 静态图形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticGraphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticSphere</span> : <span class="hljs-keyword">public</span> StaticGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制静态球体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticCube</span> : <span class="hljs-keyword">public</span> StaticGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制静态长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 动态图形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicGraphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSphere</span> : <span class="hljs-keyword">public</span> DynamicGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制动态球体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicCube</span> : <span class="hljs-keyword">public</span> DynamicGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制动态长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 工厂方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> StaticGraphics* <span class="hljs-title">createStaticGraphics</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> DynamicGraphics* <span class="hljs-title">createDynamicGraphics</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 球体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SphereFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">StaticGraphics * <span class="hljs-title">createStaticGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StaticSphere;<br>    &#125;<br>    <span class="hljs-function">DynamicGraphics * <span class="hljs-title">createDynamicGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DynamicSphere;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CubeFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">StaticGraphics * <span class="hljs-title">createStaticGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StaticCube;<br>    &#125;<br>    <span class="hljs-function">DynamicGraphics * <span class="hljs-title">createDynamicGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DynamicCube;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 定义工厂和图形</span><br>    SphereFactory sphereFactory;<br>    CubeFactory cubeFactory;<br>    StaticGraphics* staticGraphics;<br>    DynamicGraphics* dynamicGraphics;<br><br>    <span class="hljs-comment">// 创建球体</span><br>    staticGraphics = sphereFactory.<span class="hljs-built_in">createStaticGraphics</span>();<br>    dynamicGraphics = sphereFactory.<span class="hljs-built_in">createDynamicGraphics</span>();<br>    staticGraphics-&gt;<span class="hljs-built_in">painter</span>();<br>    dynamicGraphics-&gt;<span class="hljs-built_in">painter</span>();<br><br>    <span class="hljs-comment">// 创建长方体</span><br>    staticGraphics = cubeFactory.<span class="hljs-built_in">createStaticGraphics</span>();<br>    dynamicGraphics = cubeFactory.<span class="hljs-built_in">createDynamicGraphics</span>();<br>    staticGraphics-&gt;<span class="hljs-built_in">painter</span>();<br>    dynamicGraphics-&gt;<span class="hljs-built_in">painter</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 绘制静态球体</span><br><span class="hljs-comment">// 绘制动态球体</span><br><span class="hljs-comment">// 绘制静态长方体</span><br><span class="hljs-comment">// 绘制动态长方体</span><br><br></code></pre></td></tr></table></figure><h2 id="策略模式">2、策略模式</h2><p>将一个类的行为委托给另一个类实现。</p><p><strong>策略模式是指定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换</strong>。这里以 Cache 中的替换算法举例。本案例中 Cache 中 replaceAlgorithm不自己实现，通过其他算法类实现。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230402154638.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>1、定义算法类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplaceAlgorithm</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FIFO_ReplaceAlgorithm</span> : <span class="hljs-keyword">public</span> ReplaceAlgorithm&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;FIFO_ReplaceAlgorithm被调用&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRU_ReplaceAlgorithm</span> : <span class="hljs-keyword">public</span> ReplaceAlgorithm&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;LRU_ReplaceAlgorithm被调用&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Random_ReplaceAlgorithm</span> : <span class="hljs-keyword">public</span> ReplaceAlgorithm&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Random_ReplaceAlgorithm被调用&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>实现 Cache 调用上述算法有 3 种方法</p><ul><li>构造函数传入算法对象；</li><li>构造函数传入算法类型，在构造函数中 new 一个算法；</li><li>避免传入参数，使用模板实现。</li></ul><p>方法一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 方法一</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    ReplaceAlgorithm *m_ra;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cache</span>(ReplaceAlgorithm *ra):<span class="hljs-built_in">m_ra</span>(ra)&#123;&#125;;<br>    ~<span class="hljs-built_in">Cache</span>()&#123;<br>        <span class="hljs-keyword">delete</span> m_ra;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;<br>        m_ra-&gt;<span class="hljs-built_in">replace</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-function">Cache <span class="hljs-title">cache</span><span class="hljs-params">(<span class="hljs-keyword">new</span> FIFO_ReplaceAlgorithm())</span></span>;<br>   <span class="hljs-function">Cache <span class="hljs-title">cache1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> LRU_ReplaceAlgorithm())</span></span>;<br>   <span class="hljs-function">Cache <span class="hljs-title">cache2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Random_ReplaceAlgorithm())</span></span>;<br>   cache.<span class="hljs-built_in">replaceAlgorithm</span>();<br>   cache1.<span class="hljs-built_in">replaceAlgorithm</span>();<br>   cache2.<span class="hljs-built_in">replaceAlgorithm</span>();<br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// FIFO_ReplaceAlgorithm被调用</span><br><span class="hljs-comment">// LRU_ReplaceAlgorithm被调用</span><br><span class="hljs-comment">// Random_ReplaceAlgorithm被调用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">ALGORITHM_TYPE</span>&#123;<br>    FIFO,<br>    LRU,<br>    RANDOM<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    ReplaceAlgorithm *m_ra;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cache</span>(<span class="hljs-keyword">enum</span> ALGORITHM_TYPE type)&#123;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> FIFO:<br>                m_ra = <span class="hljs-keyword">new</span> FIFO_ReplaceAlgorithm;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> LRU:<br>                m_ra = <span class="hljs-keyword">new</span> LRU_ReplaceAlgorithm;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> RANDOM:<br>                m_ra = <span class="hljs-keyword">new</span> Random_ReplaceAlgorithm;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                m_ra = <span class="hljs-literal">nullptr</span>;<br>        &#125;    &#125;;<br>    ~<span class="hljs-built_in">Cache</span>()&#123;<br>        <span class="hljs-keyword">delete</span> m_ra;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;<br>        m_ra-&gt;<span class="hljs-built_in">replace</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    方法二<br>   <span class="hljs-function">Cache <span class="hljs-title">cache</span><span class="hljs-params">(ALGORITHM_TYPE::FIFO)</span></span>;<br>   cache.<span class="hljs-built_in">replaceAlgorithm</span>();<br>   <span class="hljs-function">Cache <span class="hljs-title">cache1</span><span class="hljs-params">(ALGORITHM_TYPE::LRU)</span></span>;<br>   cache1.<span class="hljs-built_in">replaceAlgorithm</span>();<br>   <span class="hljs-function">Cache <span class="hljs-title">cache2</span><span class="hljs-params">(ALGORITHM_TYPE::RANDOM)</span></span>;<br>   cache2.<span class="hljs-built_in">replaceAlgorithm</span>();<br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// FIFO_ReplaceAlgorithm被调用</span><br><span class="hljs-comment">// LRU_ReplaceAlgorithm被调用</span><br><span class="hljs-comment">// Random_ReplaceAlgorithm被调用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>方法三</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">RA</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    RA m_ra;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cache</span>()&#123;&#125;;<br>    ~<span class="hljs-built_in">Cache</span>()&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;<br>        m_ra.<span class="hljs-built_in">replace</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Cache&lt;FIFO_ReplaceAlgorithm&gt; cache;<br>cache.<span class="hljs-built_in">replaceAlgorithm</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里需要注意，使用这一种方法时，m_ra不能是一个指针，写成指针的形式，只是将 FIFO_ReplaceAlgorithm传入过来，并没有实例化对象。如果非要写成指针形式，需要自己 new对象。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">RA</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    RA *m_ra = <span class="hljs-keyword">new</span> RA;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cache</span>()&#123;&#125;;<br>    ~<span class="hljs-built_in">Cache</span>()&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;<br>        m_ra-:&gt;<span class="hljs-built_in">replace</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Cache&lt;FIFO_ReplaceAlgorithm&gt; cache;<br>cache.<span class="hljs-built_in">replaceAlgorithm</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="适配器模式">3、适配器模式</h2><p>C++适配器模式（AdapterPattern）是一种结构型设计模式，它允许将不兼容的接口转换为客户端希望的接口。适配器模式通常使用在以下场景：</p><ol type="1"><li>当<strong>已有的类</strong>无法满足客户端的需求时，可以使用适配器模式<strong>对已有类的接口进行转换</strong>，以满足客户端的需求。</li><li>当需要使用某个类，但该类的接口与另一个类的接口不兼容时，可以使用适配器模式进行转换。</li></ol><p>适配器模式通常包含以下角色：</p><ol type="1"><li>目标接口（Target）：客户端希望使用的接口。</li><li>源接口（Adaptee）：已有的接口，需要被转换。</li><li>适配器（Adapter）：实现目标接口，并通过调用源接口的方法，实现目标接口与源接口的适配</li></ol><p>适配器模式可以分为类适配器模式和对象适配器模式：</p><ol type="1"><li>类适配器模式：使用继承的方式实现适配器。</li><li>对象适配器模式：使用组合的方式实现适配器。</li></ol><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230402170122.png"alt="image.png" /> <strong>代码示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2. * 适配器模式</span><br><span class="hljs-comment"> * 适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将不兼容的接口转换为客户端希望的接口。</span><br><span class="hljs-comment"> * STL实现了一种数据结构，称为双端队列（deque），支持前后两段的插入与删除。STL实现栈和队列时，没有从头开始定义它们，而是直接使用双端队列实现的。</span><br><span class="hljs-comment"> * 这里双端队列就扮演了适配器的角色。队列用到了它的后端插入，前端删除。而栈用到了它的后端插入，后端删除。</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Deque</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque push_back&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque push_front&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque pop_back&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque pop_front&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sequence</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> : <span class="hljs-keyword">public</span> Sequence&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-keyword">override</span></span>&#123;<br>        deque.<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        deque.<span class="hljs-built_in">pop_back</span>();<br>    &#125;;<br><span class="hljs-keyword">private</span>:<br>    Deque deque;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> : <span class="hljs-keyword">public</span> Sequence&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-keyword">override</span></span>&#123;<br>        deque.<span class="hljs-built_in">push_front</span>(x);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        deque.<span class="hljs-built_in">pop_front</span>();<br>    &#125;;<br><span class="hljs-keyword">private</span>:<br>    Deque deque;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Sequence *s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Stack</span>();<br>    Sequence *s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Queue</span>();<br>    s1-&gt;<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    s1-&gt;<span class="hljs-built_in">pop</span>();<br>    s2-&gt;<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    s2-&gt;<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// Deque push_back</span><br><span class="hljs-comment">// Deque pop_back</span><br><span class="hljs-comment">// Deque push_front</span><br><span class="hljs-comment">// Deque pop_front</span><br></code></pre></td></tr></table></figure><h2 id="单例模式">4、单例模式</h2><p>单例模式是一种常见的软件设计模式，它保证<em>一个类只有一个实例</em>，并且提供一个全局访问点来访问该实例。</p><p>在单例模式中，通常会将类的构造函数私有化，以避免外部代码直接创建该类的对象实例。同时，该类会定义一个静态方法或静态成员变量来访问类的唯一实例。如果该实例不存在，则该静态方法或成员变量会创建一个新的实例，并返回该实例；如果实例已经存在，则直接返回该实例。</p><p>单例模式的优点是：</p><ol type="1"><li>保证系统中只有一个实例，减少了资源的占用，避免了不必要的内存浪费。</li><li>对于某些需要频繁创建和销毁对象的场景，使用单例模式可以减少系统的开销。</li><li>单例模式可以全局访问，方便统一管理和调用。</li></ol><p>单例模式也存在一些缺点:</p><ol type="1"><li>单例模式会对代码的可测试性造成影响，因为单例实例在整个系统中只存在一个，很难进行单元测试。</li><li>单例模式的实现有时会牵扯到复杂的线程同步操作，如果实现不当，可能会导致死锁等问题。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 只有一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">static</span> Singleton *<span class="hljs-title">getInstance</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span></span>;<br>   <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>   ~<span class="hljs-built_in">Singleton</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Singleton析构函数调用&quot;</span> &lt;&lt; endl;<br>      singleton = <span class="hljs-literal">nullptr</span>;<br>      <span class="hljs-keyword">delete</span> singleton;<br>   &#125;;<br><br><span class="hljs-keyword">protected</span>:<br>   <span class="hljs-comment">// 这里的构造函数必须为protected，否则子类不法访问父类构造函数</span><br>   <span class="hljs-built_in">Singleton</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Singleton构造函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br><br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-type">static</span> Singleton *singleton;<br>&#125;;<br><br><span class="hljs-comment">// SingletonA</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonA</span> : <span class="hljs-keyword">public</span> Singleton<br>&#123;<br>   <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>; <span class="hljs-comment">// 必须为友元，否则父类无法访问子类的构造函数</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>      std::cout &lt;&lt; <span class="hljs-string">&quot;SingletonA的show调用&quot;</span> &lt;&lt; std::endl;<br>   &#125;<br><br>   ~<span class="hljs-built_in">SingletonA</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonA析构函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br><br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-built_in">SingletonA</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonA构造函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br>&#125;;<br><br><span class="hljs-comment">// SingletonB</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonB</span> : <span class="hljs-keyword">public</span> Singleton<br>&#123;<br>   <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>; <span class="hljs-comment">// 必须为友元，否则父类无法访问子类的构造函数</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>      std::cout &lt;&lt; <span class="hljs-string">&quot;SingletonB的show调用&quot;</span> &lt;&lt; std::endl;<br>   &#125;<br><br>   ~<span class="hljs-built_in">SingletonB</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonB析构函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br><br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-built_in">SingletonB</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonB构造函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 初始化静态成员变量singleton</span><br>Singleton *Singleton::singleton = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-comment">// 初始化实例函数</span><br><span class="hljs-function">Singleton *<span class="hljs-title">Singleton::getInstance</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">nullptr</span>)<br>   &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;singletonA&quot;</span>) == <span class="hljs-number">0</span>)<br>      &#123;<br>         singleton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SingletonA</span>();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;singletonB&quot;</span>) == <span class="hljs-number">0</span>)<br>      &#123;<br>         singleton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SingletonB</span>();<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>         singleton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> singleton;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   Singleton *st = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonA&quot;</span>);<br>   st-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-keyword">delete</span> st;<br>   st = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonB&quot;</span>);<br>   st-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不 delete 掉 st，再赋值为 singletonB 没有反应</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   Singleton *st = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonA&quot;</span>);<br>   st-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-comment">// st = nullptr;</span><br>   <span class="hljs-comment">// delete st;</span><br>   Singleton *st1 = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonB&quot;</span>);<br>   st1-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样也不行，还是只要 st 存在，就会返回 Singleton::singleton</p><h2 id="原型模式">5、原型模式</h2><ol type="1"><li>原型模式（PrototypePattern）是一种<strong>创建型设计模式</strong>，它允许通过复制现有对象来创建新的对象，而无需知道对象的具体实现细节。在原型模式中，我们可以将现有对象作为原型，然后通过复制该原型来创建新的对象。</li><li>使用原型模式的一个显著优点是可以避免重复创建相似的对象，从而提高程序的性能和效率。另外，原型模式也可以用来隐藏对象创建的细节，从而使代码更加简洁和易于维护。</li><li>在实现原型模式时，通常需要在原型类中定义一个clone()方法，用于创建并返回一个新的对象实例。<strong>clone()</strong>方法通常会先创建一个与原型对象相同类型的新对象，然后将原型对象的状态复制到新对象中，最后返回新对象。在C++中，我们可以使用拷贝构造函数或赋值运算符来实现对象的复制。</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405153846.png"alt="原型模式" /><figcaption aria-hidden="true">原型模式</figcaption></figure><p>代码示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Shape* <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Circle</span>() &#123;&#125;<br>    <span class="hljs-built_in">Circle</span>(<span class="hljs-type">const</span> Circle&amp; other) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Shape* <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// return new Circle(*this) 的作用是创建一个新的 Circle 对象，并返回该对象的指针，从而实现了原型模式的复制功能</span><br>        <span class="hljs-comment">// *this指的是当前的Circle对象</span><br>        <span class="hljs-comment">// new Circle(*this)会调用拷贝构造函数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Drawing a circle.\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Square</span>() &#123;&#125;<br>    <span class="hljs-built_in">Square</span>(<span class="hljs-type">const</span> Square&amp; other) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Shape* <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Square</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Drawing a square.\n&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><code>return new Circle(*this);</code></p><p>// return new Circle(*this) 的作用是创建一个新的 Circle对象，并返回该对象的指针，从而实现了原型模式的复制功能</p><p>// *this 指的是当前的 Circle 对象</p><p>// new Circle(*this)会调用拷贝构造函数</p></blockquote><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Circle* prototypeCircle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>();<br>  Square* prototypeSquare = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Square</span>();<br><br>  Shape* circle1 = prototypeCircle-&gt;<span class="hljs-built_in">clone</span>();<br>  Shape* circle2 = prototypeCircle-&gt;<span class="hljs-built_in">clone</span>();<br>  circle1-&gt;<span class="hljs-built_in">draw</span>();<br>  circle2-&gt;<span class="hljs-built_in">draw</span>();<br>  Shape* square1 = prototypeSquare-&gt;<span class="hljs-built_in">clone</span>();<br>  square1-&gt;<span class="hljs-built_in">draw</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建造者模式">6、建造者模式</h2><p>建造者模式（BuilderPattern）是一种创建型设计模式，它允许你使用相同的构建过程来创建不同的表示形式。</p><p>建造者模式的主要目的是将一个复杂对象的构建过程分离出来，使其可以独立于主要的业务逻辑而变化。通过使用建造者模式，我们可以更加灵活地创建复杂的对象，而不需要关心其具体的构建过程。</p><p>建造者模式通常由以下几个角色组成：</p><ol type="1"><li>Director（指挥者）：负责调用建造者来构建产品，并控制建造的流程。</li><li>Builder（建造者）：负责定义产品的构建过程，以及如何组装各个部件。</li><li>Concrete Builder（具体建造者）：负责实现 Builder接口，以定义产品的各个部件的具体构建方式。</li><li>Product（产品）：要创建的复杂对象，通常由多个部件组成。</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405160820.png"alt="建造者模式" /><figcaption aria-hidden="true">建造者模式</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 建造者模式</span><br><span class="hljs-comment"> * 将一个复杂对象的构建过程分离出来，使其可以独立于主要的业务逻辑而变化</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 要创建的复杂对象，通常由多个部件组成。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_part_a</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; part_a)</span> </span>&#123;<br>        part_a_ = part_a;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_part_b</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; part_b)</span> </span>&#123;<br>        part_b_ = part_b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_part_c</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; part_c)</span> </span>&#123;<br>        part_c_ = part_c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_parts</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Part A: &quot;</span> &lt;&lt; part_a_ &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Part B: &quot;</span> &lt;&lt; part_b_ &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Part C: &quot;</span> &lt;&lt; part_c_ &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    std::string part_a_;<br>    std::string part_b_;<br>    std::string part_c_;<br>&#125;;<br><br><span class="hljs-comment">// 负责定义产品的构建过程，以及如何组装各个部件。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_a</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_b</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_c</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">get_product</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 负责实现 Builder 接口，以定义产品的各个部件的具体构建方式。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteBuilder</span> : <span class="hljs-keyword">public</span> Builder &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteBuilder</span>() : <span class="hljs-built_in">product_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Product</span>()) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_a</span><span class="hljs-params">()</span> </span>&#123;<br>        product_-&gt;<span class="hljs-built_in">set_part_a</span>(<span class="hljs-string">&quot;Part A&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_b</span><span class="hljs-params">()</span> </span>&#123;<br>        product_-&gt;<span class="hljs-built_in">set_part_b</span>(<span class="hljs-string">&quot;Part B&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_c</span><span class="hljs-params">()</span> </span>&#123;<br>        product_-&gt;<span class="hljs-built_in">set_part_c</span>(<span class="hljs-string">&quot;Part C&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">get_product</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> product_;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    Product* product_;<br>&#125;;<br><br><span class="hljs-comment">// 负责调用建造者来构建产品，并控制建造的流程。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Director</span>(Builder* builder) : <span class="hljs-built_in">builder_</span>(builder) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">construct</span><span class="hljs-params">()</span> </span>&#123;<br>        builder_-&gt;<span class="hljs-built_in">build_part_a</span>();<br>        builder_-&gt;<span class="hljs-built_in">build_part_b</span>();<br>        builder_-&gt;<span class="hljs-built_in">build_part_c</span>();<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    Builder* builder_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteBuilder builder1;<br>    <span class="hljs-function">Director <span class="hljs-title">director</span><span class="hljs-params">(&amp;builder1)</span></span>;<br>    director.<span class="hljs-built_in">construct</span>();<br>    Product* product = builder1.<span class="hljs-built_in">get_product</span>();<br>    product-&gt;<span class="hljs-built_in">print_parts</span>();<br>    <span class="hljs-keyword">delete</span> product;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="外观模式">7、外观模式</h2><p>C++外观模式是一种设计模式，它提供了一个简单的接口，用于访问复杂系统的子系统。外观模式隐藏了系统的复杂性，并为客户端提供了一个简单的接口，以便于使用系统。</p><p>在C++中，外观模式通常涉及到一个外观类，该类封装了<strong>子系统</strong>的复杂性，并提供了一个简单的接口，用于访问子系统的功能。客户端只需要与外观类交互，并不需要了解子系统的工作原理。</p><p>下面以数值迷你过程举例，数值模拟一般包括建模、划分网格、计算和后处理4 部分。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405200558.png"alt="外观模式" /><figcaption aria-hidden="true">外观模式</figcaption></figure><p>示例代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 外观模式</span><br><span class="hljs-comment"> * 当一个系统很复杂时，系统提供给客户的是一个简单的对外接口，而把里面复杂的结构都封装了起来。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createModel</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;建模&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mesh</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createMesh</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;划分网格&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caculate</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">numericalCalculation</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;数值计算&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PostProcess</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pprocess</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;后处理&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Simulation</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Simulation</span>():<span class="hljs-built_in">model_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Model</span>()),<span class="hljs-built_in">mesh_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Mesh</span>()),<span class="hljs-built_in">cal_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Caculate</span>()),<span class="hljs-built_in">post_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">PostProcess</span>())&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">simulate</span><span class="hljs-params">()</span></span>&#123;<br>    model_-&gt;<span class="hljs-built_in">createModel</span>();<br>    mesh_-&gt;<span class="hljs-built_in">createMesh</span>();<br>    cal_-&gt;<span class="hljs-built_in">numericalCalculation</span>();<br>    post_-&gt;<span class="hljs-built_in">pprocess</span>();<br>  &#125;<br><span class="hljs-keyword">private</span>:<br>  Model *model_;<br>  Mesh *mesh_;<br>  Caculate *cal_;<br>  PostProcess *post_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Simulation s;<br>  s.<span class="hljs-built_in">simulate</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组合模式">8、组合模式</h2><p>C++组合模式是一种设计模式，它允许我们将对象组成<u><strong>树形</strong></u>结构，以表示“整体/部分”层次结构。组合模式使我们能够以一致的方式处理单个对象和对象的组合。</p><p>在C++中，组合模式通常涉及到一个组件类，该类定义了表示“整体/部分”层次结构的所有对象的通用接口。组件类可以是抽象的，也可以是具体的。</p><p>组件类可以有子类，这些子类可以是叶子节点，也可以是组合节点。叶子节点表示树中的单个对象，而组合节点表示树中的对象组合。组合节点可以包含一个或多个子节点，这些子节点可以是叶子节点，也可以是组合节点。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405205839.png"alt="组合模式" /><figcaption aria-hidden="true">组合模式</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 组合模式</span><br><span class="hljs-comment"> * 对象组合成树形结构以表示“部分-整体”的层次结构。组合使得用户对单个对象和组合对象的使用具有一致性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Item</span>(string name) : <span class="hljs-built_in">name_</span>(name)&#123;&#125;;<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Item</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(Item *aItem)</span></span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span>&#123;&#125;;<br><br><span class="hljs-keyword">protected</span>:<br>  string name_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Folder</span> : <span class="hljs-keyword">public</span> Item<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Folder</span>(string name) : <span class="hljs-built_in">Item</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">Folder</span>() <span class="hljs-keyword">override</span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(Item *aItem)</span></span><br><span class="hljs-function">  </span>&#123;<br>    item_list_.<span class="hljs-built_in">push_back</span>(aItem);<br>  &#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>    &#123;<br>      <span class="hljs-comment">/* code */</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>    cout &lt;&lt; name_ &lt;&lt; endl;<br>    list&lt;Item *&gt;::iterator iter = item_list_.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">for</span> (; iter != item_list_.<span class="hljs-built_in">end</span>(); iter++)<br>    &#123;<br>      <span class="hljs-comment">/* code */</span><br>      (*iter)-&gt;<span class="hljs-built_in">Show</span>(depth + <span class="hljs-number">2</span>);<br>    &#125;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  list&lt;Item *&gt; item_list_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicsA</span> : <span class="hljs-keyword">public</span> Item<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">GraphicsA</span>(string name) : <span class="hljs-built_in">Item</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">GraphicsA</span>() <span class="hljs-keyword">override</span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>    &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>    cout &lt;&lt; name_ &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicsB</span> : <span class="hljs-keyword">public</span> Item<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">GraphicsB</span>(string name) : <span class="hljs-built_in">Item</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">GraphicsB</span>() <span class="hljs-keyword">override</span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>    &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>    cout &lt;&lt; name_ &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Item *root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Folder</span>(<span class="hljs-string">&quot;总分组&quot;</span>);<br>  Item *b1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsA</span>(<span class="hljs-string">&quot;球1&quot;</span>);<br>  Item *c1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsB</span>(<span class="hljs-string">&quot;立方体1&quot;</span>);<br>  root-&gt;<span class="hljs-built_in">Add</span>(b1);<br>  root-&gt;<span class="hljs-built_in">Add</span>(c1);<br><br>  Item *f1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Folder</span>(<span class="hljs-string">&quot;分组1&quot;</span>);<br>  Item *b2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsA</span>(<span class="hljs-string">&quot;球2&quot;</span>);<br>  Item *c2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsB</span>(<span class="hljs-string">&quot;立方体2&quot;</span>);<br>  f1-&gt;<span class="hljs-built_in">Add</span>(b2);<br>  f1-&gt;<span class="hljs-built_in">Add</span>(c2);<br>  root-&gt;<span class="hljs-built_in">Add</span>(f1);<br><br>  root-&gt;<span class="hljs-built_in">Show</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">delete</span> root;<br>  <span class="hljs-keyword">delete</span> b1;<br>  <span class="hljs-keyword">delete</span> c1;<br>  <span class="hljs-keyword">delete</span> f1;<br>  <span class="hljs-keyword">delete</span> b2;<br>  <span class="hljs-keyword">delete</span> c2;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405204311.png"alt="组合模式" /><figcaption aria-hidden="true">组合模式</figcaption></figure><blockquote><p>注意这里的 show 函数传入了一个深度，深度递增+2.root 调用时 show传入的为 0，b1、c1 和 f1 传入时 show 调用的是 2，b2 和 c2 调用时传入的是4.</p><p>上面的实现方式有缺点，就是内存的释放不好，需要客户自己动手，非常不方便。有待改进，比较好的做法是让Folder 类来释放。因为所有的指针都是存在 Folder 类的链表中。</p></blockquote><h2 id="代理模式">9、代理模式</h2><p>允许我们提供一个代理对象来<u><strong>控制对另一个对象的访问</strong></u>。代理模式使我们能够在不改变原始对象的情况下，增强其功能或控制其访问。</p><p>在C++中，代理模式通常涉及到一个代理类和一个原始类。代理类实现了与原始类相同的接口，并在其内部维护一个对原始对象的引用。代理类可以拦截对原始对象的访问，并根据需要将其转发给原始对象。</p><p>主要分为（1）远程代理，（2）虚代理，（3）保护代理，（4）智能引用。本文主要介绍虚代理和智能引用两种情况。</p><h3 id="虚代理">9.1 虚代理</h3><figure><imgsrc="https://mmbiz.qpic.cn/mmbiz_jpg/8pECVbqIO0y4v6U2GWEqj1wOpq0tQgnKBOPUTlooMiaDichaA8sjurqucSvLElA54Ib0IayKdpXhia3p0Bz6ZwxpQ/640?wx_fmt=jpeg&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"alt="代理模式" /><figcaption aria-hidden="true">代理模式</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 代理模式</span><br><span class="hljs-comment"> * 允许我们提供一个代理对象来控制对另一个对象的访问。代理模式使我们能够在不改变原始对象的情况下，增强其功能或控制其访问。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 图片基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Image</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Image</span>(string name): <span class="hljs-built_in">imageName_</span>(name) &#123;&#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Image</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-keyword">protected</span>:<br>    string imageName_;<br>&#125;;<br><br><span class="hljs-comment">// 大图片</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BigImage</span>: <span class="hljs-keyword">public</span> Image<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">BigImage</span>(string name):<span class="hljs-built_in">Image</span>(name) &#123;&#125;<br>    ~<span class="hljs-built_in">BigImage</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;Show big image : &quot;</span>&lt;&lt;imageName_&lt;&lt;endl; &#125;<br>&#125;;<br><br><span class="hljs-comment">// 大图片代理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BigImageProxy</span>: <span class="hljs-keyword">public</span> Image<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    BigImage *bigImage_;  <span class="hljs-comment">// 大图片</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">BigImageProxy</span>(string name):<span class="hljs-built_in">Image</span>(name),<span class="hljs-built_in">bigImage_</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    ~<span class="hljs-built_in">BigImageProxy</span>() &#123; <span class="hljs-keyword">delete</span> bigImage_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(bigImage_ == <span class="hljs-literal">nullptr</span>)<br>            bigImage_ = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BigImage</span>(imageName_);<br>        bigImage_-&gt;<span class="hljs-built_in">Show</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Image *image = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BigImageProxy</span>(<span class="hljs-string">&quot;proxy.jpg&quot;</span>); <span class="hljs-comment">//代理</span><br>    image-&gt;<span class="hljs-built_in">Show</span>(); <span class="hljs-comment">//需要时由代理负责打开</span><br>    <span class="hljs-keyword">delete</span> image;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="引用代理">9.2 引用代理</h3><p>手写一个 auto_ptr</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">auto_ptr</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">auto_ptr</span><span class="hljs-params">(T *p = <span class="hljs-literal">nullptr</span>)</span> : pointee(p)&#123;</span>&#125;;<br>  <span class="hljs-built_in">auto_ptr</span>(auto_ptr&lt;T&gt; &amp;rhs) : <span class="hljs-built_in">pointee</span>(rhs.<span class="hljs-built_in">release</span>())&#123;&#125;;<br>  ~<span class="hljs-built_in">auto_ptr</span>() &#123; <span class="hljs-keyword">delete</span> pointee; &#125;;<br>  auto_ptr&lt;T&gt; &amp;<span class="hljs-keyword">operator</span>=(auto_ptr &amp;rhs)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;rhs)<br>      <span class="hljs-built_in">reset</span>(rhs.<span class="hljs-built_in">release</span>());<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  T &amp;<span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> *pointee; &#125;;<br>  T &amp;<span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> pointee; &#125;;<br>  <span class="hljs-function">T *<span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> pointee; &#125;;<br>  <span class="hljs-function">T *<span class="hljs-title">release</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    T *oldPointee = pointee;<br>    pointee = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">return</span> oldPointee;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(T *p = <span class="hljs-literal">nullptr</span>)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (pointee != p)<br>    &#123;<br>      <span class="hljs-keyword">delete</span> pointee;<br>      pointee = p;<br>    &#125;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  T *pointee;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-function">auto_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">42</span>))</span></span>;<br>  auto_ptr&lt;<span class="hljs-type">int</span>&gt; p2 = p1;<br>  cout &lt;&lt; *p2 &lt;&lt;endl;<br>  <span class="hljs-keyword">auto</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">50</span>);<br>  p2.<span class="hljs-built_in">reset</span>(p3);<br>  cout &lt;&lt; *p2 &lt;&lt;endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="享元模式">10、享元模式</h2><ol type="1"><li>C++中的享元模式是一种<strong>结构型设计模式</strong>，它旨在通过共享对象来最小化内存使用和对象创建的开销。</li><li>在享元模式中，对象的状态被分为<strong>内部状态</strong>和<strong>外部状态</strong>，其中内部状态是对象的固有属性，而外部状态则是在运行时由客户端传递给对象的信息。</li><li>在 C++中，实现享元模式需要定义一个享元工厂类和一个享元类。</li><li>享元工厂类负责创建和管理享元对象，而享元类则负责存储和处理对象的内部状态和外部状态。</li></ol><p>比如：在设计一款游戏时，里面有很多的怪物，这些怪物虽然分为不同的类别，但每种都有自己的血条、攻击力和防御力。</p><ol type="1"><li>定义一个 map，用于存储哥布林、兽人和龙；</li><li>创建哥布林对象，如果已经存在哥布林对象，返回已存在的哥布林的引用，否则新建哥布林对象；</li><li>可以验证 g1 和 g2 是同一个对象的引用。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 享元模式</span><br><span class="hljs-comment"> * C++中的享元模式是一种结构型设计模式，它旨在通过共享对象来最小化内存使用和对象创建的开销。</span><br><span class="hljs-comment"> * 在享元模式中，对象的状态被分为内部状态和外部状态，其中内部状态是对象的固有属性，而外部状态则是在运行时由客户端传递给对象的信息。</span><br><span class="hljs-comment"> * 在C++中，实现享元模式需要定义一个享元工厂类和一个享元类。</span><br><span class="hljs-comment"> * 享元工厂类负责创建和管理享元对象，而享元类则负责存储和处理对象的内部状态和外部状态。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Monster</span>(<span class="hljs-type">int</span> hp, <span class="hljs-type">int</span> atk, <span class="hljs-type">int</span> def) : <span class="hljs-built_in">hp_</span>(hp), <span class="hljs-built_in">atk_</span>(atk), <span class="hljs-built_in">def_</span>(def)&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stack</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> hp_;<br>  <span class="hljs-type">int</span> atk_;<br>  <span class="hljs-type">int</span> def_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MonsterFactory</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">Monster *<span class="hljs-title">getMonster</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;name)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">auto</span> it = monsterMap_.<span class="hljs-built_in">find</span>(name);<br>    <span class="hljs-keyword">if</span> (it != monsterMap_.<span class="hljs-built_in">end</span>())<br>    &#123;<br>      <span class="hljs-keyword">return</span> it-&gt;second;<br>    &#125;<br>    Monster *monster = <span class="hljs-built_in">createMonster</span>(name);<br>    monsterMap_[name] = monster;<br>    <span class="hljs-keyword">return</span> monster;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  std::map&lt;std::string, Monster *&gt; monsterMap_;<br>  <span class="hljs-function">Monster *<span class="hljs-title">createMonster</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;name)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;Goblin&quot;</span>)<br>    &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Monster</span>(<span class="hljs-number">50</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;Orc&quot;</span>)<br>    &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Monster</span>(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Monster</span>(<span class="hljs-number">200</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>);<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  MonsterFactory monsterFactory;<br>  Monster *g1 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Goblin&quot;</span>);<br>  Monster *g2 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Goblin&quot;</span>);<br>  Monster *o1 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Orc&quot;</span>);<br>  Monster *o2 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Orc&quot;</span>);<br>  Monster *d1 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Dragon&quot;</span>);<br>  Monster *d2 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Dragon&quot;</span>);<br><br>  cout &lt;&lt; (g1 == g2) &lt;&lt; endl;<br>  cout &lt;&lt; (o1 == o2) &lt;&lt; endl;<br>  cout &lt;&lt; (d1 == d2) &lt;&lt; endl;<br>  cout &lt;&lt; g1-&gt;second &lt;&lt; endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="绘制棋盘案例">绘制棋盘案例</h3><ol type="1"><li>虽然棋盘上有很多的棋子，但他们不是白色都是黑色，每种颜色的属性都一致，只是位置不同。我们将位置单独存放。</li><li>创建白色棋子时，如果已经存在一个对象，就直接向容器中添加位置；如果不存在，则需要先创建，再添加位置；</li><li>这样所有的白色只享一个对象，极大地节约内存空间。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//棋子颜色</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">PieceColor</span> &#123;BLACK, WHITE&#125;;<br><span class="hljs-comment">//棋子位置</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PiecePos</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-built_in">PiecePos</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b): <span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b) &#123;&#125;<br>&#125;;<br><span class="hljs-comment">//棋子定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Piece</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>    PieceColor m_color; <span class="hljs-comment">//颜色</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Piece</span>(PieceColor color): <span class="hljs-built_in">m_color</span>(color) &#123;&#125;<br>    ~<span class="hljs-built_in">Piece</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlackPiece</span>: <span class="hljs-keyword">public</span> Piece<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">BlackPiece</span>(PieceColor color): <span class="hljs-built_in">Piece</span>(color) &#123;&#125;<br>    ~<span class="hljs-built_in">BlackPiece</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;绘制一颗黑棋\n&quot;</span>; &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhitePiece</span>: <span class="hljs-keyword">public</span> Piece<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">WhitePiece</span>(PieceColor color): <span class="hljs-built_in">Piece</span>(color) &#123;&#125;<br>    ~<span class="hljs-built_in">WhitePiece</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;绘制一颗白棋\n&quot;</span>;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PieceBoard</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;PiecePos&gt; m_vecPos; <span class="hljs-comment">//存放棋子的位置</span><br>    <span class="hljs-comment">// 虽然棋盘上有很多的棋子，但他们不是白色都是黑色，每种颜色的属性都一致，只是位置不同。我们将位置单独存放。</span><br>    Piece *m_blackPiece;<br>    Piece *m_whitePiece;<br>    string m_blackName;<br>    string m_whiteName;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">PieceBoard</span>(string black, string white): <span class="hljs-built_in">m_blackName</span>(black), <span class="hljs-built_in">m_whiteName</span>(white)<br>    &#123;<br>        m_blackPiece = null;<br>        m_whitePiece = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    ~<span class="hljs-built_in">PieceBoard</span>() &#123; <span class="hljs-keyword">delete</span> m_blackPiece; <span class="hljs-keyword">delete</span> m_whitePiece;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetPiece</span><span class="hljs-params">(PieceColor color, PiecePos pos)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(color == BLACK)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(m_blackPiece == <span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//只有一颗黑棋</span><br>                m_blackPiece = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BlackPiece</span>(color);<br>            cout&lt;&lt;m_blackName&lt;&lt;<span class="hljs-string">&quot;在位置(&quot;</span>&lt;&lt;pos.x&lt;&lt;<span class="hljs-string">&#x27;,&#x27;</span>&lt;&lt;pos.y&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;<br>            m_blackPiece-&gt;<span class="hljs-built_in">Draw</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(m_whitePiece == <span class="hljs-literal">NULL</span>)<br>                m_whitePiece = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WhitePiece</span>(color);<br>            cout&lt;&lt;m_whiteName&lt;&lt;<span class="hljs-string">&quot;在位置(&quot;</span>&lt;&lt;pos.x&lt;&lt;<span class="hljs-string">&#x27;,&#x27;</span>&lt;&lt;pos.y&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;<br>            m_whitePiece-&gt;<span class="hljs-built_in">Draw</span>();<br>        &#125;<br>        m_vecPos.<span class="hljs-built_in">push_back</span>(pos);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">PieceBoard <span class="hljs-title">pieceBoard</span><span class="hljs-params">(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>)</span></span>;<br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(BLACK, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>));<br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(WHITE, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">4</span>, <span class="hljs-number">16</span>));<br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(BLACK, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">16</span>, <span class="hljs-number">4</span>));<br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(WHITE, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="桥接模式">11、桥接模式</h2><p>C++中的桥接模式是一种结构型设计模式，<strong>它旨在将抽象部分与实现部分分离开来，从而使它们可以独立地变化</strong>。在桥接模式中，抽象部分和实现部分通过一个桥接接口进行连接，从而实现解耦和灵活性。</p><p>在C++中，实现桥接模式需要定义一个-<strong>抽象基类</strong>和一个<strong>实现基类</strong>，其中抽象基类定义了抽象部分的接口，而实现基类定义了实现部分的接口。然后，我们通过继承和组合来实现不同的抽象部分和实现部分的组合。</p><p>举一个操作系统的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//操作系统</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OS</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowOS</span>: <span class="hljs-keyword">public</span> OS<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;安装Window操作系统&quot;</span>&lt;&lt;endl; &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinuxOS</span>: <span class="hljs-keyword">public</span> OS<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;安装Linux操作系统&quot;</span>&lt;&lt;endl; &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnixOS</span>: <span class="hljs-keyword">public</span> OS<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;安装Unix操作系统&quot;</span>&lt;&lt;endl; &#125;<br>&#125;;<br><br><br><span class="hljs-comment">//计算机</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DellComputer</span>: <span class="hljs-keyword">public</span> Computer<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123; os-&gt;<span class="hljs-built_in">InstallOS_Imp</span>(); &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleComputer</span>: <span class="hljs-keyword">public</span> Computer<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123; os-&gt;<span class="hljs-built_in">InstallOS_Imp</span>(); &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HPComputer</span>: <span class="hljs-keyword">public</span> Computer<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123; os-&gt;<span class="hljs-built_in">InstallOS_Imp</span>(); &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    OS *os1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WindowOS</span>();<br>    OS *os2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LinuxOS</span>();<br>    Computer *computer1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AppleComputer</span>();<br>    computer1-&gt;<span class="hljs-built_in">InstallOS</span>(os1);<br>    computer1-&gt;<span class="hljs-built_in">InstallOS</span>(os2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="绘制图形">绘制图形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 桥接模式</span><br><span class="hljs-comment"> * 它旨在将抽象部分与实现部分分离开来，从而使它们可以独立地变化。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">// 抽象部分的接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 抽象部分的实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Shape<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Circle</span>(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius, DrawingAPI *drawingAPI)<br>      : <span class="hljs-built_in">m_x</span>(x), <span class="hljs-built_in">m_y</span>(y), <span class="hljs-built_in">m_radius</span>(radius), <span class="hljs-built_in">m_drawingAPI</span>(drawingAPI) &#123;&#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    m_drawingAPI-&gt;<span class="hljs-built_in">drawCircle</span>(m_x, m_y, m_radius);<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">double</span> m_x;<br>  <span class="hljs-type">double</span> m_y;<br>  <span class="hljs-type">double</span> m_radius;<br>  DrawingAPI *m_drawingAPI;<br>&#125;;<br><br><span class="hljs-comment">// 抽象部分的实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> : <span class="hljs-keyword">public</span> Shape<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2, DrawingAPI *drawingAPI)<br>      : <span class="hljs-built_in">m_x1</span>(x1), <span class="hljs-built_in">m_y1</span>(y1), <span class="hljs-built_in">m_x2</span>(x2), <span class="hljs-built_in">m_y2</span>(y2), <span class="hljs-built_in">m_drawingAPI</span>(drawingAPI) &#123;&#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    m_drawingAPI-&gt;<span class="hljs-built_in">drawRectangle</span>(m_x1, m_y1, m_x2, m_y2);<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">double</span> m_x1;<br>  <span class="hljs-type">double</span> m_y1;<br>  <span class="hljs-type">double</span> m_x2;<br>  <span class="hljs-type">double</span> m_y2;<br>  DrawingAPI *m_drawingAPI;<br>&#125;;<br><br><span class="hljs-comment">// 实现部分的接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawingAPI</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius)</span> </span>= <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 具体的实现部分</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawingAPI1</span> : <span class="hljs-keyword">public</span> DrawingAPI<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API1.circle at &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; radius &lt;&lt; endl;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API1.rectangle at &quot;</span> &lt;&lt; x1 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y1 &lt;&lt; <span class="hljs-string">&quot; to &quot;</span> &lt;&lt; x2 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y2 &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 具体的实现部分</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawingAPI2</span> : <span class="hljs-keyword">public</span> DrawingAPI<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API2.circle at &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; radius &lt;&lt; endl;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API2.rectangle at &quot;</span> &lt;&lt; x1 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y1 &lt;&lt; <span class="hljs-string">&quot; to &quot;</span> &lt;&lt; x2 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y2 &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  DrawingAPI1 api1;<br>  DrawingAPI2 api2;<br><br>  <span class="hljs-function">Circle <span class="hljs-title">circle1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, &amp;api1)</span></span>;<br>  <span class="hljs-function">Rectangle <span class="hljs-title">rectangle1</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, &amp;api1)</span></span>;<br><br>  <span class="hljs-function">Circle <span class="hljs-title">circle2</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, &amp;api2)</span></span>;<br>  <span class="hljs-function">Rectangle <span class="hljs-title">rectangle2</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, &amp;api2)</span></span>;<br><br>  circle1.<span class="hljs-built_in">draw</span>();<br>  rectangle1.<span class="hljs-built_in">draw</span>();<br>  circle2.<span class="hljs-built_in">draw</span>();<br>  rectangle2.<span class="hljs-built_in">draw</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="装饰模式">12、装饰模式</h2><p>C++中的装饰器模式（DecoratorPattern）是一种结构型设计模式，它允许你在不改变对象自身的基础上，动态地给一个对象添加额外的职责。装饰器模式以对客户端透明的方式扩展对象的功能。</p><p>装饰器模式的核心思想是：将对象嵌套在一系列装饰器中，每个装饰器都为对象增加一些功能。装饰器和被装饰的对象都实现相同的接口，这样装饰器就可以完全替代被装饰的对象。</p><p>比如有一个手机，允许你为手机添加特性，比如增加挂件、屏幕贴膜等。一种灵活的设计方式是，将手机嵌入到另一对象中，由这个对象完成特性的添加，我们称这个嵌入的对象为装饰。这个装饰与它所装饰的组件接口一致，因此它对使用该组件的客户透明。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202304101648512.png"alt="装饰模式" /><figcaption aria-hidden="true">装饰模式</figcaption></figure><p>代码演示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 手机类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Phone</span>()&#123;&#125;;<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Phone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">iPhone</span> : <span class="hljs-keyword">public</span> Phone<br>&#123;<br><span class="hljs-keyword">private</span>:<br>  string m_name;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">iPhone</span>(string name) : <span class="hljs-built_in">m_name</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">iPhone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; cout &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot;的装饰：&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NokiiaPhone</span> : <span class="hljs-keyword">public</span> Phone<br>&#123;<br><span class="hljs-keyword">private</span>:<br>  string m_name;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">NokiiaPhone</span>(string name) : <span class="hljs-built_in">m_name</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">NokiiaPhone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; cout &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot;的装饰：&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-comment">// 装饰器基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorPhone</span> : <span class="hljs-keyword">public</span> Phone<br>&#123;<br><span class="hljs-keyword">private</span>:<br>  Phone *m_phone;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">DecoratorPhone</span>(Phone *phone) : <span class="hljs-built_in">m_phone</span>(phone)&#123;&#125;;<br>  ~<span class="hljs-built_in">DecoratorPhone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span> </span>&#123; m_phone-&gt;<span class="hljs-built_in">ShowDecorate</span>(); &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 挂件装饰器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorPhoneA</span> : <span class="hljs-keyword">public</span> DecoratorPhone<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">DecoratorPhoneA</span>(Phone *phone) : <span class="hljs-built_in">DecoratorPhone</span>(phone)&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    DecoratorPhone::<span class="hljs-built_in">ShowDecorate</span>();<br>    <span class="hljs-built_in">AddDecorate</span>();<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;增加挂件&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 贴膜装饰器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorPhoneB</span> : <span class="hljs-keyword">public</span> DecoratorPhone<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">DecoratorPhoneB</span>(Phone *phone) : <span class="hljs-built_in">DecoratorPhone</span>(phone)&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    DecoratorPhone::<span class="hljs-built_in">ShowDecorate</span>();<br>    <span class="hljs-built_in">AddDecorate</span>();<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;屏幕贴膜&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Phone *iphone = <span class="hljs-keyword">new</span> <span class="hljs-built_in">NokiiaPhone</span>(<span class="hljs-string">&quot;6300&quot;</span>);<br>  Phone *dpa = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DecoratorPhoneA</span>(iphone);<br>  Phone *dpb = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DecoratorPhoneB</span>(iphone);<br>  dpb-&gt;<span class="hljs-built_in">ShowDecorate</span>();<br>  <span class="hljs-keyword">delete</span> dpa;<br>  <span class="hljs-keyword">delete</span> dpb;<br>  <span class="hljs-keyword">delete</span> iphone;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><p>6300 的装饰：屏幕贴膜</p><h2 id="备忘录模式">13、备忘录模式</h2><p>备忘录模式是一种行为型设计模式，用于在不破坏封装性的前提下，捕获和恢复对象的内部状态。该模式常常被用于需要在某个时刻保存对象的状态，并在以后的某个时刻恢复该状态的情形。备忘录模式的核心是定义了一个备忘录对象，用于存储当前对象的状态，以便在需要恢复状态时使用。</p><p>在 C++ 中，实现备忘录模式通常需要定义三个角色：</p><ol type="1"><li>原始对象是需要保存状态的对象；</li><li>备忘录对象负责存储原始对象的状态；</li><li>管理者对象则负责管理备忘录对象，通常包括存储备忘录对象、撤销操作等功能。</li></ol><p>这样以后就可将该对象恢复到原先保存的状态。举个简单的例子，我们玩游戏时都会保存进度，所保存的进度以文件的形式存在。这样下次就可以继续玩，而不用从头开始。这里的进度其实就是游戏的内部状态，而这里的文件相当于是在游戏之外保存状态。这样，下次就可以从文件中读入保存的进度，从而恢复到原来的状态。这就是备忘录模式。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412115456.png"alt="备忘录" /><figcaption aria-hidden="true">备忘录</figcaption></figure><p>代码演示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//需保存的信息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_vitality; <span class="hljs-comment">//生命值</span><br>    <span class="hljs-type">int</span> m_attack;   <span class="hljs-comment">//进攻值</span><br>    <span class="hljs-type">int</span> m_defense;  <span class="hljs-comment">//防守值</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Memento</span>(<span class="hljs-type">int</span> vitality, <span class="hljs-type">int</span> attack, <span class="hljs-type">int</span> defense):<br>      <span class="hljs-built_in">m_vitality</span>(vitality),<span class="hljs-built_in">m_attack</span>(attack),<span class="hljs-built_in">m_defense</span>(defense)&#123;&#125;<br>    Memento&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Memento &amp;memento)<br>    &#123;<br>        m_vitality = memento.m_vitality;<br>        m_attack = memento.m_attack;<br>        m_defense = memento.m_defense;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//游戏角色</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> m_vitality;<br>    <span class="hljs-type">int</span> m_attack;<br>    <span class="hljs-type">int</span> m_defense;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">GameRole</span>(): <span class="hljs-built_in">m_vitality</span>(<span class="hljs-number">100</span>),<span class="hljs-built_in">m_attack</span>(<span class="hljs-number">100</span>),<span class="hljs-built_in">m_defense</span>(<span class="hljs-number">100</span>) &#123;&#125;<br>    <span class="hljs-function">Memento <span class="hljs-title">Save</span><span class="hljs-params">()</span>  <span class="hljs-comment">//保存进度，只与Memento对象交互，并不牵涉到Caretake</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">Memento <span class="hljs-title">memento</span><span class="hljs-params">(m_vitality, m_attack, m_defense)</span></span>;<br>        <span class="hljs-keyword">return</span> memento;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Load</span><span class="hljs-params">(Memento memento)</span>  <span class="hljs-comment">//载入进度，只与Memento对象交互，并不牵涉到Caretake</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_vitality = memento.m_vitality;<br>        m_attack = memento.m_attack;<br>        m_defense = memento.m_defense;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;vitality : &quot;</span>&lt;&lt; m_vitality&lt;&lt;<span class="hljs-string">&quot;, attack : &quot;</span>&lt;&lt; m_attack&lt;&lt;<span class="hljs-string">&quot;, defense : &quot;</span>&lt;&lt; m_defense&lt;&lt;endl; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; m_vitality -= <span class="hljs-number">10</span>; m_attack -= <span class="hljs-number">10</span>;  m_defense -= <span class="hljs-number">10</span>; &#125;<br>&#125;;<br><span class="hljs-comment">//保存的进度库</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretake</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Caretake</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Save</span><span class="hljs-params">(Memento menento)</span> </span>&#123; m_vecMemento.<span class="hljs-built_in">push_back</span>(menento); &#125;<br>    <span class="hljs-function">Memento <span class="hljs-title">Load</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> </span>&#123; <span class="hljs-keyword">return</span> m_vecMemento[state]; &#125;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;Memento&gt; m_vecMemento;<br>&#125;;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Caretake caretake;  <span class="hljs-comment">//保存的进度库</span><br>    GameRole role;  <span class="hljs-comment">//游戏角色</span><br>    role.<span class="hljs-built_in">Show</span>();   <span class="hljs-comment">//初始值</span><br>    caretake.<span class="hljs-built_in">Save</span>(role.<span class="hljs-built_in">Save</span>()); <span class="hljs-comment">//保存状态</span><br>    role.<span class="hljs-built_in">Attack</span>();<br>    role.<span class="hljs-built_in">Show</span>();  <span class="hljs-comment">//进攻后</span><br>    role.<span class="hljs-built_in">Load</span>(caretake.<span class="hljs-built_in">Load</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">//载入状态</span><br>    role.<span class="hljs-built_in">Show</span>();  <span class="hljs-comment">//恢复到状态0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中介者模式">14、中介者模式</h2><p>中介者模式是一种行为设计模式，它允许对象之间通过中介者进行通信，而不是直接互相通信。</p><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>通过 A 给 B 和 C 发信息,也可以通过 B 给 A 和 C 发信息</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412123204.png"alt="中介者模式" /><figcaption aria-hidden="true">中介者模式</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span>;<br><br><span class="hljs-comment">// 中介者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message, Colleague* colleague)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Colleague</span>(Mediator* mediator) : <span class="hljs-built_in">m_mediator</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>&#123;<br>        m_mediator-&gt;<span class="hljs-built_in">sendMessage</span>(message, <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    Mediator* m_mediator;<br>&#125;;<br><br><span class="hljs-comment">// 具体同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueA</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteColleagueA</span>(Mediator* mediator) : <span class="hljs-built_in">Colleague</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteColleagueA received message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueB</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteColleagueB</span>(Mediator* mediator) : <span class="hljs-built_in">Colleague</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteColleagueB received message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueC</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteColleagueC</span>(Mediator* mediator) : <span class="hljs-built_in">Colleague</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteColleagueC received message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 具体中介者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> : <span class="hljs-keyword">public</span> Mediator &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addColleague</span><span class="hljs-params">(Colleague* colleague)</span> </span>&#123;<br>        m_colleagues.<span class="hljs-built_in">push_back</span>(colleague);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message, Colleague* sender)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> colleague : m_colleagues) &#123;<br>            <span class="hljs-keyword">if</span> (colleague != sender) &#123;<br>                colleague-&gt;<span class="hljs-built_in">receiveMessage</span>(message);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;Colleague*&gt; m_colleagues;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteMediator mediator;<br><br>    <span class="hljs-function">ConcreteColleagueA <span class="hljs-title">colleagueA</span><span class="hljs-params">(&amp;mediator)</span></span>;<br>    <span class="hljs-function">ConcreteColleagueB <span class="hljs-title">colleagueB</span><span class="hljs-params">(&amp;mediator)</span></span>;<br>    <span class="hljs-function">ConcreteColleagueC <span class="hljs-title">colleagueC</span><span class="hljs-params">(&amp;mediator)</span></span>;<br><br>    mediator.<span class="hljs-built_in">addColleague</span>(&amp;colleagueA);<br>    mediator.<span class="hljs-built_in">addColleague</span>(&amp;colleagueB);<br>    mediator.<span class="hljs-built_in">addColleague</span>(&amp;colleagueC);<br><br>    colleagueA.<span class="hljs-built_in">sendMessage</span>(<span class="hljs-string">&quot;Hello, colleagueB和C!&quot;</span>);<br>    colleagueB.<span class="hljs-built_in">sendMessage</span>(<span class="hljs-string">&quot;Hi, colleagueA和C!&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412123322.png"alt="输出" /><figcaption aria-hidden="true">输出</figcaption></figure><p>房屋中介案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg)</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">GetMessage</span><span class="hljs-params">(string msg)</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetMediator</span><span class="hljs-params">(Mediator* mediator)</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">AddPerson</span><span class="hljs-params">(Person* person)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg,Person* person)</span></span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MediatorA</span> : <span class="hljs-keyword">public</span> Mediator&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;Person*&gt; person_vector_;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddPerson</span><span class="hljs-params">(Person* person)</span></span>&#123;<br>        person_vector_.<span class="hljs-built_in">push_back</span>(person);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg,Person* person)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> aPerson : person_vector_)&#123;<br>            <span class="hljs-keyword">if</span>(aPerson != person)&#123;<br>                aPerson-&gt;<span class="hljs-built_in">GetMessage</span>(msg);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonA</span> : <span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">protected</span>:<br>    Mediator *mediator_;<br>    string name_;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">PersonA</span>(string name):<span class="hljs-built_in">name_</span>(name)&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg)</span></span>&#123;<br>        mediator_-&gt;<span class="hljs-built_in">SendMessage</span>(msg,<span class="hljs-keyword">this</span>);<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetMessage</span><span class="hljs-params">(string msg)</span></span>&#123;<br>        cout &lt;&lt; name_ &lt;&lt; <span class="hljs-string">&quot;获得信息&quot;</span> &lt;&lt; msg &lt;&lt; endl;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetMediator</span><span class="hljs-params">(Mediator* mediator)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;mediator_ = mediator;<br>    &#125;;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MediatorA med1;<br>    Person *personA = <span class="hljs-keyword">new</span> <span class="hljs-built_in">PersonA</span>(<span class="hljs-string">&quot;person1&quot;</span>);<br>    Person *personB = <span class="hljs-keyword">new</span> <span class="hljs-built_in">PersonA</span>(<span class="hljs-string">&quot;person2&quot;</span>);<br>    Person *personC = <span class="hljs-keyword">new</span> <span class="hljs-built_in">PersonA</span>(<span class="hljs-string">&quot;person3&quot;</span>);<br><br>    personA-&gt;<span class="hljs-built_in">SetMediator</span>(&amp;med1);<br>    personB-&gt;<span class="hljs-built_in">SetMediator</span>(&amp;med1);<br><br>    med1.<span class="hljs-built_in">AddPerson</span>(personA);<br>    med1.<span class="hljs-built_in">AddPerson</span>(personB);<br>    med1.<span class="hljs-built_in">AddPerson</span>(personC);<br><br>    personA-&gt;<span class="hljs-built_in">SendMessage</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412184109.png"alt="房产中介" /><figcaption aria-hidden="true">房产中介</figcaption></figure><h2 id="职责链模式">15、职责链模式</h2><ol type="1"><li>是一种行为设计模式，它允许你将请求沿着处理者链进行发送，直到有一个处理者能够处理该请求为止。</li><li>在职责链模式中，你可以为多个对象设置处理请求的机会。这些对象形成一条链，请求在链上传递，直到链上的某个对象能够处理该请求为止。通常情况下，链上的每个对象都有其自己的处理逻辑，以及对下一个处理者的引用。</li><li>在实现职责链模式时，你需要创建一个抽象处理者类，用于定义请求的处理方法和下一个处理者的引用。然后，你需要为每个具体的处理者创建一个子类，实现其自己的处理逻辑。最后，你需要将这些处理者组成一条链，并将请求沿着链进行传递。</li><li>其思想很简单，考虑员工要求加薪。公司的管理者一共有三级，总经理、总监、经理，如果一个员工要求加薪，应该向主管的经理申请，如果加薪的数量在经理的职权内，那么经理可以直接批准，否则将申请上交给总监。总监的处理方式也一样，总经理可以处理所有请求。这就是典型的职责链模式，请求的处理形成了一条链，直到有一个对象处理请求。</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412232935.png"alt="职责链模式" /><figcaption aria-hidden="true">职责链模式</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//抽象管理者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>    Manager *m_manager;<br>    string m_name;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Manager</span>(Manager *manager, string name):<span class="hljs-built_in">m_manager</span>(manager), <span class="hljs-built_in">m_name</span>(name)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span>  </span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//经理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonManager</span>: <span class="hljs-keyword">public</span> Manager<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CommonManager</span>(Manager *manager, string name):<span class="hljs-built_in">Manager</span>(manager,name) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">500</span>) <span class="hljs-comment">//经理职权之内</span><br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;经理&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;批准&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;加薪&quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot;元&quot;</span>&lt;&lt;endl&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;经理&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;无法处理，交由总监处理&quot;</span>&lt;&lt;endl;<br>            m_manager-&gt;<span class="hljs-built_in">DealWithRequest</span>(name, num);<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//总监</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Majordomo</span>: <span class="hljs-keyword">public</span> Manager<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Majordomo</span>(Manager *manager, string name):<span class="hljs-built_in">Manager</span>(manager,name) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">1000</span>) <span class="hljs-comment">//总监职权之内</span><br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;总监&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;批准&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;加薪&quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot;元&quot;</span>&lt;&lt;endl&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;总监&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;无法处理，交由总经理处理&quot;</span>&lt;&lt;endl;<br>            m_manager-&gt;<span class="hljs-built_in">DealWithRequest</span>(name, num);<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//总经理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneralManager</span>: <span class="hljs-keyword">public</span> Manager<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">GeneralManager</span>(Manager *manager, string name):<span class="hljs-built_in">Manager</span>(manager,name) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span>  <span class="hljs-comment">//总经理可以处理所有请求</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;总经理&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;批准&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;加薪&quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot;元&quot;</span>&lt;&lt;endl&lt;&lt;endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Manager *general = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GeneralManager</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;A&quot;</span>); <span class="hljs-comment">//设置上级，总经理没有上级</span><br>    Manager *majordomo = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Majordomo</span>(general, <span class="hljs-string">&quot;B&quot;</span>); <span class="hljs-comment">//设置上级</span><br>    Manager *common = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CommonManager</span>(majordomo, <span class="hljs-string">&quot;C&quot;</span>); <span class="hljs-comment">//设置上级</span><br>    common-&gt;<span class="hljs-built_in">DealWithRequest</span>(<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-number">300</span>);   <span class="hljs-comment">//员工D要求加薪</span><br>    common-&gt;<span class="hljs-built_in">DealWithRequest</span>(<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">600</span>);<br>    common-&gt;<span class="hljs-built_in">DealWithRequest</span>(<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">delete</span> common; <span class="hljs-keyword">delete</span> majordomo; <span class="hljs-keyword">delete</span> general;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412233008.png"alt="输出" /><figcaption aria-hidden="true">输出</figcaption></figure><h2 id="观察者模式">16、观察者模式</h2><p>观察者模式（ObserverPattern）是一种行为型设计模式，它允许多个对象同时监听另一个对象，并在该对象发生状态改变时自动通知这些监听者，从而实现对象间的松耦合。</p><p>在 C++中，观察者模式通常包含以下几个部分：</p><ul><li>抽象主题（Subject）：被观察者，它维护了一系列的观察者，并提供了添加、删除和通知观察者的接口。</li><li>具体主题（ConcreteSubject）：具体的被观察者实现，它实现了抽象主题中的接口，并且维护了一个状态。</li><li>抽象观察者（Observer）：观察者的抽象类，它定义了接收通知的接口。</li><li>具体观察者（ConcreteObserver）：具体的观察者实现，它实现了抽象观察者中的接口，同时存储了一个指向具体主题的指针。</li></ul><p>举个博客订阅的例子，当博主发表新文章的时候，即博主状态发生了改变，那些订阅的读者就会收到通知，然后进行相应的动作，比如去看文章，或者收藏起来。博主与读者之间存在种一对多的依赖关系。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Observer</span>() &#123;&#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Observer</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Update</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Attach</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//博客</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Blog</span>() &#123;&#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Blog</span>() &#123;&#125;<br>    <span class="hljs-comment">//添加观察者</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Attach</span><span class="hljs-params">(Observer *observer)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_observers.<span class="hljs-built_in">push_back</span>(observer);cout &lt;&lt; <span class="hljs-string">&quot;订阅成功&quot;</span> &lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">//移除观察者</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">(Observer *observer)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_observers.<span class="hljs-built_in">remove</span>(observer);<br>        cout &lt;&lt; <span class="hljs-string">&quot;取消订阅&quot;</span> &lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">//通知观察者</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Notify</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        list&lt;Observer*&gt;::iterator iter = m_observers.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">for</span>(; iter != m_observers.<span class="hljs-built_in">end</span>(); iter++)<br>            (*iter)-&gt;<span class="hljs-built_in">Update</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetStatus</span><span class="hljs-params">(string s)</span> </span>&#123; m_status = s; &#125; <span class="hljs-comment">//设置状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">GetStatus</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_status; &#125;    <span class="hljs-comment">//获得状态</span><br><span class="hljs-keyword">private</span>:<br>    list&lt;Observer* &gt; m_observers; <span class="hljs-comment">//观察者链表</span><br><span class="hljs-keyword">protected</span>:<br>    string m_status; <span class="hljs-comment">//状态</span><br>&#125;;<br><br><span class="hljs-comment">//具体博客类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogCSDN</span> : <span class="hljs-keyword">public</span> Blog<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    string m_name; <span class="hljs-comment">//博主名称</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">BlogCSDN</span>(string name): <span class="hljs-built_in">m_name</span>(name) &#123;&#125;<br>    ~<span class="hljs-built_in">BlogCSDN</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetStatus</span><span class="hljs-params">(string s)</span> </span>&#123; m_status = <span class="hljs-string">&quot;CSDN通知 : &quot;</span> + m_name + s; &#125; <span class="hljs-comment">//具体设置状态信息</span><br>    <span class="hljs-function">string <span class="hljs-title">GetStatus</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_status; &#125;<br>&#125;;<br><span class="hljs-comment">//具体观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverBlog</span> : <span class="hljs-keyword">public</span> Observer<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    string m_name;  <span class="hljs-comment">//观察者名称</span><br>    Blog *m_blog;   <span class="hljs-comment">//观察的博客，当然以链表形式更好，就可以观察多个博客</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ObserverBlog</span>(string name,Blog *blog): <span class="hljs-built_in">m_name</span>(name), <span class="hljs-built_in">m_blog</span>(blog) &#123;&#125;<br>    ~<span class="hljs-built_in">ObserverBlog</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Update</span><span class="hljs-params">()</span>  <span class="hljs-comment">//获得更新状态</span></span><br><span class="hljs-function">    </span>&#123;<br>        string status = m_blog-&gt;<span class="hljs-built_in">GetStatus</span>();<br>        cout&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;-------&quot;</span>&lt;&lt;status&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Attach</span><span class="hljs-params">()</span></span>&#123;<br>        m_blog-&gt;<span class="hljs-built_in">Attach</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">()</span></span>&#123;<br>        m_blog-&gt;<span class="hljs-built_in">Remove</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//测试案例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Blog *blog = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BlogCSDN</span>(<span class="hljs-string">&quot;博客1&quot;</span>);<br>    Observer *observer1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ObserverBlog</span>(<span class="hljs-string">&quot;观察者1&quot;</span>, blog);<br>    <span class="hljs-comment">// 由粉丝调用</span><br>    observer1-&gt;<span class="hljs-built_in">Attach</span>();<br>    <span class="hljs-comment">// 由公众号经营者调用</span><br>    blog-&gt;<span class="hljs-built_in">SetStatus</span>(<span class="hljs-string">&quot;发表设计模式C++实现（15）——观察者模式&quot;</span>);<br>    <span class="hljs-comment">// 由公众号经营者调用</span><br>    blog-&gt;<span class="hljs-built_in">Notify</span>();<br>    <span class="hljs-comment">// 由粉丝调用</span><br>    observer1-&gt;<span class="hljs-built_in">Remove</span>();<br><br>    <span class="hljs-comment">// 取消订阅后，观察者不会接受</span><br>    blog-&gt;<span class="hljs-built_in">SetStatus</span>(<span class="hljs-string">&quot;发表设计模式C++实现（16）——观察者模式&quot;</span>);<br>blog-&gt;<span class="hljs-built_in">Notify</span>();<br><br>    <span class="hljs-keyword">delete</span> blog;<br>    <span class="hljs-keyword">delete</span> observer1;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="状态模式">17、状态模式</h2><p>C++中状态模式是一种行为设计模式，它允许一个对象在内部状态改变时改变它的行为，看起来似乎改变了它的类。在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的对象。状态模式主要解决的是在对象状态转换的时候带来的复杂性问题。通常当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，这时候可以考虑使用状态模式。</p><p>它有两种使用情况：</p><ol type="1"><li>一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为。</li><li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。</li></ol><p>实现：Context 类包含一个当前状态对象指针 m_state，当 Context 的Request()方法被调用时，会调用当前状态对象的Handle()方法来处理请求。同时，Context 类还提供了一个SetState()方法，用于切换状态对象。具体的状态对象实现了 State类的接口，并实现了它们自己的行为。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 抽象状态(State)基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Handle</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 具体状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateA</span> : <span class="hljs-keyword">public</span> State &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Handle state A.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateB</span> : <span class="hljs-keyword">public</span> State &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Handle state B.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 创建一个Context类，它包含一个当前状态对象和一些可以在状态对象之间转换的方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetState</span><span class="hljs-params">(State* state)</span> </span>&#123;<br>        m_state = state;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Request</span><span class="hljs-params">()</span> </span>&#123;<br>        m_state-&gt;<span class="hljs-built_in">Handle</span>();<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    State* m_state;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ConcreteStateA stateA;<br>    ConcreteStateB stateB;<br><br>    Context context;<br>    context.<span class="hljs-built_in">SetState</span>(&amp;stateA);<br>    context.<span class="hljs-built_in">Request</span>();<br><br>    context.<span class="hljs-built_in">SetState</span>(&amp;stateB);<br>    context.<span class="hljs-built_in">Request</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过使用状态模式，我们可以避免在对象状态转换时引入大量的条件分支和复杂的if-else语句，使代码更加简洁和易于维护。当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式了。</p><p>战争案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">War</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Prophase</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Metaphase</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Anaphase</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">End</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123;&#125;<br>&#125;;<br><span class="hljs-comment">//战争</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">War</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    State *m_state;  <span class="hljs-comment">//目前状态</span><br>    <span class="hljs-type">int</span> m_days;      <span class="hljs-comment">//战争持续时间</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">War</span>(State *state): <span class="hljs-built_in">m_state</span>(state), <span class="hljs-built_in">m_days</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>    ~<span class="hljs-built_in">War</span>() &#123; <span class="hljs-keyword">delete</span> m_state; &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetDays</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_days; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetDays</span><span class="hljs-params">(<span class="hljs-type">int</span> days)</span> </span>&#123; m_days = days; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetState</span><span class="hljs-params">(State *state)</span> </span>&#123; <span class="hljs-keyword">delete</span> m_state; m_state = state; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetState</span><span class="hljs-params">()</span> </span>&#123; m_state-&gt;<span class="hljs-built_in">CurrentState</span>(<span class="hljs-keyword">this</span>); &#125;<br>&#125;;<br><br><span class="hljs-comment">//战争结束</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EndState</span>: <span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">End</span><span class="hljs-params">(War *war)</span> <span class="hljs-comment">//结束阶段的具体行为</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;战争结束&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">End</span>(war); &#125;<br>&#125;;<br><span class="hljs-comment">//后期</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnaphaseState</span>: <span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Anaphase</span><span class="hljs-params">(War *war)</span> <span class="hljs-comment">//后期的具体行为</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(war-&gt;<span class="hljs-built_in">GetDays</span>() &lt; <span class="hljs-number">30</span>)<br>            cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;war-&gt;<span class="hljs-built_in">GetDays</span>()&lt;&lt;<span class="hljs-string">&quot;天：战争后期，双方拼死一搏&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            war-&gt;<span class="hljs-built_in">SetState</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">EndState</span>());<br>            war-&gt;<span class="hljs-built_in">GetState</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">Anaphase</span>(war); &#125;<br>&#125;;<br><span class="hljs-comment">//中期</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaphaseState</span>: <span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Metaphase</span><span class="hljs-params">(War *war)</span> <span class="hljs-comment">//中期的具体行为</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(war-&gt;<span class="hljs-built_in">GetDays</span>() &lt; <span class="hljs-number">20</span>)<br>            cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;war-&gt;<span class="hljs-built_in">GetDays</span>()&lt;&lt;<span class="hljs-string">&quot;天：战争中期，进入相持阶段，双发各有损耗&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            war-&gt;<span class="hljs-built_in">SetState</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">AnaphaseState</span>());<br>            war-&gt;<span class="hljs-built_in">GetState</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">Metaphase</span>(war); &#125;<br>&#125;;<br><span class="hljs-comment">//前期</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProphaseState</span>: <span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Prophase</span><span class="hljs-params">(War *war)</span>  <span class="hljs-comment">//前期的具体行为</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(war-&gt;<span class="hljs-built_in">GetDays</span>() &lt; <span class="hljs-number">10</span>)<br>            cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;war-&gt;<span class="hljs-built_in">GetDays</span>()&lt;&lt;<span class="hljs-string">&quot;天：战争初期，双方你来我往，互相试探对方&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            war-&gt;<span class="hljs-built_in">SetState</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MetaphaseState</span>());<br>            war-&gt;<span class="hljs-built_in">GetState</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">Prophase</span>(war); &#125;<br>&#125;;<br><br><span class="hljs-comment">//测试案例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    War *war = <span class="hljs-keyword">new</span> <span class="hljs-built_in">War</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">ProphaseState</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">40</span>;i += <span class="hljs-number">5</span>)<br>    &#123;<br>        war-&gt;<span class="hljs-built_in">SetDays</span>(i);<br>        war-&gt;<span class="hljs-built_in">GetState</span>();<br>    &#125;<br>    <span class="hljs-keyword">delete</span> war;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考链接：</p><ol type="1"><li><ahref="https://design-patterns.readthedocs.io/zh-cn/latest/index.html">图说设计模式</a></li><li><a href="https://zhuanlan.zhihu.com/p/128145128">知乎：快速记忆 23种设计模式</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础</title>
    <link href="/2024/03/17/001%20C++%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/17/001%20C++%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="关键字">1、关键字</h1><p><ahref="https://www.runoob.com/w3cnote/cpp-keyword-intro.html">菜鸟教程</a></p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202203282321032.jpg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=SHdFq&amp;originHeight=363&amp;originWidth=689&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" /></p><h1 id="数据类型">2、数据类型</h1><p>内置数据类型：算数类型和空类型</p><p>算数类型：整形和浮点型</p><h2 id="整型">2.1 整型</h2><ol type="1"><li>定义超出范围会溢出； | 数据类型 | 占用空间 | 取值范围 | | --- | ---| --- | | short（短整型） | 2 字节 | (-215~215-1) | | int（整型） | 4字节 | (-231~231-1) | | long（长整型） | win 为 4，linux 为 4（32位），8（64 位） | (-231~231-1） | | long long（长长整型） | 8 字节 |(-263~263-1) |</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">// 1.短整型</span><br><span class="hljs-type">short</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 2.整型</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 3.长整型</span><br><span class="hljs-type">long</span> c = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 4.长长整型</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> d = <span class="hljs-number">10</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num1=&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num2=&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num3=&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num4=&quot;</span> &lt;&lt; d &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实型">2.2 实型</h2><ol type="1"><li>用于表示小数；</li><li>单精度 float 和双精度 double；</li><li>小数默认为双精度，定义 float 时需要加f，如<code>float a =3.14f;</code>，否则会截断；</li><li>科学计数法，<code>float f2 = 3e2;//3*10^2</code><code>float f2 = 3e-2;//3*0.1^2</code></li></ol><p><strong>区别</strong></p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字类型</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>7 位有效数字</td></tr><tr><td>double</td><td>8 字节</td><td>15-16 位有效数字</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-type">float</span> a = <span class="hljs-number">3.14f</span>;<br><span class="hljs-type">double</span> b = <span class="hljs-number">3.14</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符型">2.3 字符型</h2><ol type="1"><li>表示形式<code>char ch = 'a';</code></li><li>单引号里面只能写一个字符；</li><li>只占用一个字节；</li><li>字符型进行存储时以 ASCII 存储；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 创建字符型变量</span><br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符为&quot;</span> &lt;&lt; ch &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符所占内存为&quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(ch) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符ch对应的ASCII编码为&quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)ch &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="转义字符">2.4 转义字符</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\a:蜂鸣，响铃</span><br><span class="hljs-string">\b:回退：向后退一格</span><br><span class="hljs-string">\f:换页</span><br><span class="hljs-string">\n:换行，光标到下行行首</span><br><span class="hljs-string">\r:回车，光标到本行行首</span><br><span class="hljs-string">\t:水平制表</span><br><span class="hljs-string">\v:垂直制表</span><br><span class="hljs-string">\\:反斜杠</span><br><span class="hljs-string">\&#x27;:单引号</span><br><span class="hljs-string">\&quot;:双引号</span><br><span class="hljs-string">\?:问号</span><br><span class="hljs-string">\ddd:三位八进制</span><br><span class="hljs-string">\xhh:二位十六进制</span><br><span class="hljs-string">\0:空字符(NULL),什么都不做</span><br></code></pre></td></tr></table></figure><h2 id="字符串型">2.5 字符串型</h2><ol type="1"><li>C 语言类型：<code>char 变量名[] = "字符串值";</code></li><li>C++类型：<code>string 变量名 = "字符串值";</code></li><li><code>iostream</code>已经隐式地包含了 string库，但最好还是显式一下，以免发生错误。头文件<code>#include&lt;string&gt;</code></li><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 1、C语言风格</span><br><span class="hljs-type">char</span> string1[] = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">// 2、C++风格</span><br><span class="hljs-built_in">string</span> string2 = <span class="hljs-string">&quot;world&quot;</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;string1=&quot;</span>&lt;&lt;string1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;string2=&quot;</span>&lt;&lt;string2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="布尔类型">2.6 布尔类型</h2><ol type="1"><li>true 和 false；</li><li>只占用 1 字节；</li><li>实质上 true 为 1，false 为 0；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// bool</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出为flag=1</span><br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输入">2.7 输入</h2><ol type="1"><li><code>cin 变量名</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 1、整型</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; a;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a之后=&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">// 2、字符串</span><br><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;helllo&quot;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1=&quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; str;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str2=&quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="decltype-类型指示符">2.8 decltype 类型指示符</h2><ol type="1"><li>从表达式的类型推算出要定义变量的类型，而不使用该对象的初始化变量；</li><li><code>decltype(f()) sum = 0;</code>sum 的类型就是f()函数返回值类型；</li></ol><p><strong>关于引用类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ci = <span class="hljs-number">0</span>, &amp; cj = ci;<br>decltype(ci) x = ci; <span class="hljs-comment">//x类型是const int</span><br>decltype(cj) y = x; <span class="hljs-comment">//y类型是const int&amp;</span><br><span class="hljs-comment">// decltype(cj) z; //错误，z的类型为引用，必须初始化；</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>指针解引用</strong></p><ol type="1"><li>解引用之后得到引用类型</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">42</span>, * p = &amp;i, &amp; r = i;<br>decltype(r + <span class="hljs-number">0</span>) b;<br><span class="hljs-comment">//decltype(*p) c; //错误，*p解引用之后类型为引用，即int&amp;</span><br></code></pre></td></tr></table></figure><p><strong>多层括号</strong></p><ol type="1"><li>双层括号永远是引用</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">42</span>;<br><span class="hljs-comment">//decltype((i)) d; // 错误，加括号之后（i）为表达式，得到引用类型</span><br>decltype(i) d;<br></code></pre></td></tr></table></figure><h1 id="运算符">3、运算符</h1><h2 id="算数运算符">3.1 算数运算符</h2><ol type="1"><li>两个小数不能做取模运算； | 运算符 | 描述 | 实例 | | --- | --- | ---| | + | 把两个操作数相加 | A + B 将得到 30 | | - |从第一个操作数中减去第二个操作数 | A - B 将得到 -10 | | _ |把两个操作数相乘 | A _ B 将得到 200 | | / | 分子除以分母 | B / A 将得到2 | | % | 取模运算符，整除后的余数 | B % A 将得到 0 | | ++ | <ahref="https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html">自增运算符</a>，整数值增加 1 | A++ 将得到 11 | | -- | <ahref="https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html">自减运算符</a>，整数值减少 1 | A-- 将得到 9 |</li></ol><p><strong>前置自增和后置自增</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">int</span> a = <span class="hljs-number">21</span>;<br>   <span class="hljs-type">int</span> c ;<br><br>   <span class="hljs-comment">// a 的值在赋值之前不会自增</span><br>   c = a++;<br>   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Line 1 - Value of a++ is :&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span> ;<br><br>   <span class="hljs-comment">// 表达式计算之后，a 的值增加 1</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Line 2 - Value of a is :&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span> ;<br><br>   <span class="hljs-comment">// a 的值在赋值之前自增</span><br>   c = ++a;<br>   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Line 3 - Value of ++a is  :&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span> ;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Line</span> <span class="hljs-number">1</span> - Value of a++ is :<span class="hljs-number">21</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">2</span> - Value of a is :<span class="hljs-number">22</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">3</span> - Value of ++a is  :<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符">3.2 赋值运算符</h2><table><thead><tr><th>算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td>C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td>+=</td><td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td>C += A 相当于 C = C + A</td></tr><tr><td>-=</td><td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td>C -= A 相当于 C = C - A</td></tr><tr><td>*=</td><td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td>C <em>= A 相当于 C = C </em> A</td></tr><tr><td>/=</td><td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td>C /= A 相当于 C = C / A</td></tr><tr><td>%=</td><td>求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td>C %= A 相当于 C = C % A</td></tr><tr><td>&lt;&lt;=</td><td>左移且赋值运算符</td><td>C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td><td>C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td><td>C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td><td>C ^= 2 等同于 C = C ^ 2</td></tr><tr><td>|=</td><td>按位或且赋值运算符</td><td>C |= 2 等同于 C = C | 2</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">8</span>;<br>a &gt;&gt;= <span class="hljs-number">2</span>;<span class="hljs-comment">// 等于8/2^2</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="比较运算符">3.3 比较运算符</h2><ol type="1"><li>输出时加括号；<code>(a==b);</code></li><li>计算时可加可不加； | 运算符 | 描述 | 实例 | | --- | --- | --- | | ==| 检查两个操作数的值是否相等，如果相等则条件为真。 | (A == B) 不为真。 || != | 检查两个操作数的值是否相等，如果不相等则条件为真。 | (A != B)为真。 | | &gt; |检查左操作数的值是否大于右操作数的值，如果是则条件为真。 | (A &gt; B)不为真。 | | &lt; |检查左操作数的值是否小于右操作数的值，如果是则条件为真。 | (A &lt; B)为真。 | | &gt;= |检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。 | (A&gt;= B) 不为真。 | | &lt;= |检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。 | (A&lt;= B) 为真。 |</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; (a==b) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-type">bool</span> c = a != b;<br><span class="hljs-built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">line</span> <span class="hljs-number">1</span>:<span class="hljs-number">0</span><br><span class="hljs-attribute">line</span> <span class="hljs-number">2</span>:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符">3.4 逻辑运算符</h2><p>假设变量 A 的值为 1，变量 B 的值为 0，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作数都 true，则条件为 true。</td><td>(A &amp;&amp; B) 为 false。</td></tr><tr><td>||</td><td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为true。</td><td>(A || B) 为 true。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true则逻辑非运算符将使其为 false。</td><td>!(A &amp;&amp; B) 为 true。</td></tr></tbody></table><h2 id="按位赋值操作">3.5 按位赋值操作</h2><ol type="1"><li>按位与（&amp;=）运算符，它是二进制的“与”操作，即两数中对应位都为 1时为 1，其他情况都为 0。例如，3 &amp; 5 的结果为1。而按位与赋值操作就是将左操作数和右操作数进行按位与操作，然后将结果赋给左操作数，即a &amp;= b 等价于 a = a &amp; b。</li><li>其次是按位或（|=）运算符，它是二进制的“或”操作，即两数中对应位有一个为1 时为 1，其他情况都为 0。例如，3 | 5 的结果为7。而按位或赋值操作就是将左操作数和右操作数进行按位或操作，然后将结果赋给左操作数，即a |= b 等价于 a = a | b。</li><li>接下来是按位异或（^=）运算符，它是二进制的“异或”操作，即两数中对应位相同时为0，不同时为 1。例如，3 ^ 5 的结果为6。而按位异或赋值操作就是将左操作数和右操作数进行按位异或操作，然后将结果赋给左操作数，即a ^= b 等价于 a = a ^ b。</li><li>第四个是左移位（&lt;&lt;=）运算符，它可以将一个数左移 n位，相当于将其乘以 2 的 n 次方。例如，3 &lt;&lt; 5 的结果为96。而左移位赋值操作就是将左操作数左移右操作数位数个位置，然后将结果赋给左操作数，即a &lt;&lt;= b 等价于 a = a &lt;&lt; b。</li><li>第五个是右移位（&gt;&gt;=）运算符，它可以将一个数右移 n位，相当于将其除以 2 的 n 次方。例如，16 &gt;&gt; 2 的结果为4。而右移位赋值操作就是将左操作数右移右操作数位数个位置，然后将结果赋给左操作数，即a &gt;&gt;= b 等价于 a = a &gt;&gt; b。</li><li>第六个是取反（<sub>）运算符，它可以将一个数的二进制码按位取反，例如，</sub>3的结果为-4。而按位与取反（&amp;~）赋值运算符是 a &amp;= ~b的简写，即先按位取反 b，然后与 a 进行按位与操作，最后将结果赋给 a</li></ol><h1 id="程序流程结构">4、程序流程结构</h1><ol type="1"><li>顺序结构、选择结构、循环结构</li></ol><h2 id="选择结构">4.1 选择结构</h2><ol type="1"><li>if</li><li>if...else</li><li>if...else if..else if...</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入分数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; score;<br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;及格了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>顺序计数器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> currVal = <span class="hljs-number">0</span>, val = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; currVal) &#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; val) &#123;<br><span class="hljs-keyword">if</span> (val == currVal)<br>++cnt;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; currVal &lt;&lt; <span class="hljs-string">&quot; occurs &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot; times&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>currVal = val;<br>cnt = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; currVal &lt;&lt; <span class="hljs-string">&quot; occurs &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot; times&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三目运算符">4.2 三目运算符</h2><ol type="1"><li>做简单的判断；</li><li><code>a &gt; b ? a : b ;</code>a 比 b 大则为 a，否则为 b；</li></ol><h2 id="switch">4.3 switch</h2><ol type="1"><li>switch 选择结构；</li><li>switch 只能判断整型或者字符型，不能是区间；</li><li>switch 效率较高；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入分数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; score;<br><span class="hljs-keyword">switch</span> (score) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;经典&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;还行&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;不行&quot;</span>&lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="while">4.4 while</h2><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/GmU91p2bXekIsBN.jpg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=ssv2m&amp;originHeight=463&amp;originWidth=414&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" /></p><ol type="1"><li><code>while(循环条件)&#123;循环结构&#125;</code></li></ol><p><strong>while 语句</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, val = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (val &lt;=<span class="hljs-number">10</span>)<br>&#123;<br>sum += val;<br>++val;<br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Sum of 1 to 10 inclusive is &quot;</span><br>&lt;&lt; sum &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：um of 1 to 10 inclusive is 55</p><p><strong>猜数字</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> numRam = rand() % <span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">// 生成1-100的随机数</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入数字&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; num;<br><span class="hljs-keyword">while</span> (num != numRam) &#123;<br><span class="hljs-keyword">if</span> (num &gt; numRam) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;大了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; num;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;小了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; num;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;猜对了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="do...while">4.5 do...while</h2><ol type="1"><li><code>do&#123; 循环语句 &#125; while &#123; 循环条件 &#125;;</code></li><li>会先执行一次；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br>a = num / <span class="hljs-number">100</span>;<br>b = num / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>c = num % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (a*a*a + b*b*b + c*c*c == num) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;是水仙花数&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>num++;<br>&#125; <span class="hljs-keyword">while</span> (num &gt;= <span class="hljs-number">100</span> &amp;&amp; num &lt; <span class="hljs-number">1000</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for-循环">4.6 for 循环</h2><ol type="1"><li><code>for( 起始表达式； 条件表达式；循环语句 )&#123; 循环语句 &#125;</code></li><li>可以用来读取一组数据；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num = <span class="hljs-number">1</span>; num &lt; <span class="hljs-number">100</span>; num++) &#123;<br>a = num / <span class="hljs-number">10</span>;<br>b = num % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">7</span> || b == <span class="hljs-number">7</span> || num % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;敲桌子&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>读取输入不定的输入数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, value = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; value)<br>&#123;<br>sum += value;<br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Sum is: &quot;</span> &lt;&lt; sum &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入：1 2 3 4 5 6 8 da 输出：Sum is: 29</p><blockquote><p>或者 ctrl+z，再按 Enter，表示输入结束</p></blockquote><p>输入：1 2 3 4^z 输出：Sum is: 10</p><p><strong>乘法口诀</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; j &lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i &lt;&lt;<span class="hljs-string">&quot;=&quot;</span> &lt;&lt;i*j&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="break-和-continue">4.7 break 和 continue</h2><ol type="1"><li>break 跳出循环体；</li><li>continue，执行到本行不往下执行，但是循环会继续，只是跳出本次执行块；</li></ol><h2 id="goto">4.8 goto</h2><ol type="1"><li>需要一个表示符，标识符命名规范同变量；</li><li>标识符一般大写；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">goto</span> FLAG;<br><br>FLAG:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;跳转执行到这&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><h1 id="数组">5、数组</h1><ol type="1"><li>存放相同类型的数据；</li><li>索引从 0 开始；</li></ol><h2 id="一维数组">5.1 一维数组</h2><ol type="1"><li>定义</li></ol><ul><li><code>数据类型 数组名[ 数组长度 ];</code></li><li><code>数据类型 数组名[ 数组长度 ] = &#123; 值1 ，值2 ，值3...&#125;;</code></li><li><code>数组类型 数组名[] = &#123;值1 ，值2，值3...&#125;;</code></li></ul><ol start="2" type="1"><li>获取数组中的数据<code>arr[i]</code>；</li><li>数组占居内存大小<code>sizeof(arr)</code>；</li><li>元素个数<code>sizeof(arr)/sizeof(arr[0])</code>；</li><li>直接打印arr，输出为首地址；元素地址为<code>&amp;arr[0]</code>；</li></ol><h1 id="引用">6、引用</h1><h2 id="基本介绍">6.1 基本介绍</h2><ol type="1"><li>引用是变量的别名；</li><li>本质就是一个指针常量；</li><li>应用必须初始化，初始化后不能改变；</li><li>可以使用引用进行地址传递；</li></ol><p><strong>基本使用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; b = a;<br>b = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="种交换函数">6.2 3 种交换函数</h2><ol type="1"><li>地址传递；</li><li>引用的好处就是不需要解引用，在作为函数实参后，需要用到值时，直接使用引用名，而指针需要加*。</li><li>每次使用引用实际上是解引用的操作。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 值传递</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">// 地址传递</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">int</span> *a ,<span class="hljs-type">int</span>*b)</span> &#123;<br><span class="hljs-type">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125;<br><br><span class="hljs-comment">// 引用传递</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span> &#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//f1(a, b);</span><br><span class="hljs-comment">//f2(&amp;a, &amp;b);</span><br>f3(a, b);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用函数函数返回值">6.3 引用函数函数返回值</h2><ol type="1"><li>不要返回局部变量的引用（较老的版本中）；</li><li>函数的调用可以作为左值；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>&amp; <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">return</span> a; <span class="hljs-comment">//返回引用地址</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>&amp; res = test02();<br><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br>test02() = <span class="hljs-number">1000</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出为</p><p>20</p><p>1000</p><h2 id="常量引用">6.4 常量引用</h2><ol type="1"><li>使用场景：用来修饰形参，防止误操作；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-comment">// 不能再修改</span><br><span class="hljs-comment">// a = 20;</span><br><span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 编译器会修改为 int temp= 10；const int &amp;a = temp;只不过这个临时变量我们不知道</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; a = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 修改a会报错,a已为只读</span><br><span class="hljs-comment">// a = 20;</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br>f1(b);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结构体">7、结构体</h1><h2 id="结构体概念">7.1 结构体概念</h2><ol type="1"><li>用户自定义数据类型；</li></ol><h2 id="结构体使用">7.2 结构体使用</h2><ol type="1"><li><code>struct 结构体名称 &#123; 结构体成员列表 &#125;</code></li><li>实例化的三种方法</li></ol><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = {成员 1 值，成员 2 值...}</li><li>定义结构体时顺便创建</li></ul><p><strong>创建结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> score;<br>&#125;s3;<br></code></pre></td></tr></table></figure><p><strong>实例化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//1. struct 结构体名 变量名</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s1</span>;</span><br>s1.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>s1.age = <span class="hljs-number">18</span>;<br>s1.score = <span class="hljs-number">78.5</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; s1.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s1.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s1.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//2. struct 结构体名 变量名 = &#123;&#125;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s2</span> =</span> &#123; <span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">80.0</span> &#125;;<br><span class="hljs-built_in">cout</span> &lt;&lt; s2.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s2.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s2.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-comment">//3. 创建结构体时创建变量s3</span><br>s3.name = <span class="hljs-string">&quot;王五&quot;</span>;<br>s3.age = <span class="hljs-number">23</span>;<br>s3.score = <span class="hljs-number">90.0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; s3.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s3.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s3.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><h2 id="结构体数组">7.3 结构体数组</h2><ol type="1"><li><code>struct Student stuArray[2] = &#123;&#123;"张三",18,60&#125;,&#123;"李四",20,80&#125;&#125;;</code></li><li>索引从第 0 个开始</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//1. 定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//2. 创建结构体数组</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stuArray</span>[3] =</span> &#123;<br>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>&#125;,<br>&#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>&#125;,<br>&#123;<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>&#125;,<br>&#125;;<br><br><span class="hljs-comment">//3. 赋值</span><br>stuArray[<span class="hljs-number">2</span>].name = <span class="hljs-string">&quot;赵六&quot;</span>;<br>stuArray[<span class="hljs-number">2</span>].age = <span class="hljs-number">20</span>;<br>stuArray[<span class="hljs-number">2</span>].score = <span class="hljs-number">30</span>;<br><br><span class="hljs-comment">//4. 遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; stuArray[i].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; stuArray[i].age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; stuArray[i].score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/dXKQRcAVmEWfrhx.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=mjoK4&amp;originHeight=767&amp;originWidth=1470&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" /></p><h2 id="结构体指针">7.4 结构体指针</h2><ol type="1"><li>指向结构体<code>struct Student* p = &amp;s;</code>,其中<code>struct</code>可以省略；</li><li>访问结构体指针访问<code>p-&gt;name</code>;</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//1.定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//2.创建结构体变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">80</span>&#125;;<br><br><span class="hljs-comment">//3.通过指针指向结构体变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>* <span class="hljs-title">p</span> =</span> &amp;s;<br><br><span class="hljs-comment">//4.通过指针访问结构体变量</span><br><span class="hljs-built_in">cout</span> &lt;&lt; p-&gt;name &lt;&lt;<span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;age&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体嵌套结构体">7.5 结构体嵌套结构体</h2><ol type="1"><li>结构体 1 作为结构体 2 的成员变量；</li><li>结构体 1 应该定义在结构体 2 前面；</li><li>结构体里结构体赋值<code>t.stu.score = 80;</code>或者<code>t.stu = &#123; "张三",20,100 &#125;;</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-comment">// 定义老师的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> &#123;</span><br><span class="hljs-type">int</span> id;<br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-comment">//将另一个结构体作为本结构体的成员</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span><br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>Teacher t;<br>t.id = <span class="hljs-number">01</span>;<br>t.name = <span class="hljs-string">&quot;老师1&quot;</span>;<br>t.age = <span class="hljs-number">45</span>;<br>t.stu.name = <span class="hljs-string">&quot;学生1&quot;</span>;<br>t.stu.age = <span class="hljs-number">18</span>;<br>t.stu.score = <span class="hljs-number">80</span>;<br><span class="hljs-comment">//或者</span><br>t.stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span> &#125;;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; t.stu.name &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体做函数参数">7.6 结构体做函数参数</h2><ol type="1"><li>将结构体作为参数传递到函数里；</li><li>值传递,不会修改原对象值；</li><li>地址传递，会改变原对象值；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-comment">// 值传递,不会修改原对象值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStudent</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student s)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1.打印信息：&quot;</span> &lt;&lt; s.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;;<br><span class="hljs-comment">// 地址传递，会改变原对象值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStudent</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student *p)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2.打印信息：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span>&#125;;<br>printStudent(s);<br>printStudent(&amp;s);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体-const">7.7 结构体 const</h2><p>在某些时候我们需要将结构体变量传入到一个函数内，如果使用值传递就会占用大量的内存空间，因为每调用一次函数，计算机就会赋值出一个新的结构体变量，大小和原变量相同，所以应采用地址传递来节省空间，因为指针只占用4个字节。但是使用地址传递会带来一个隐患，即可以在函数体内修改原结构体变量的值，这对数据来说是不安全的，我们需要用const 进行修饰，使结构体变量不可更改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-comment">// 加上const修饰，就可以避免在地址传递时，函数体内修改原变量的属性</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStu</span><span class="hljs-params">(<span class="hljs-type">const</span> Student* p)</span> &#123;<br><br><span class="hljs-comment">//p-&gt;age = 20;//错误，不能修改</span><br><span class="hljs-built_in">cout</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//创建结构体变量</span><br>Student s = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span> &#125;;<br>printStu(&amp;s);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体案例-1">7.8 结构体案例 1</h2><ol type="1"><li>注意字符串字面量和字符相加，使用+=比较好；</li><li>随机数种子；</li><li>判断数据类型<code>typeid(i).name();</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><br><br><span class="hljs-comment">// 老师的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br>Student stuArray[<span class="hljs-number">5</span>];<br>&#125;;<br><br><br><span class="hljs-comment">// 给老师和学生赋值函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">allocateSpace</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Teacher teaArray[], <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-built_in">string</span> nameSpace = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-built_in">string</span> tname = <span class="hljs-string">&quot;Teacher_&quot;</span> ;<br>tname += nameSpace[i];<br>teaArray[i].name =  tname;<br><span class="hljs-comment">// 学生赋值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j= <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br><span class="hljs-built_in">string</span> sname = <span class="hljs-string">&quot;Student_&quot;</span> ;<br>sname += +nameSpace[j];<br><span class="hljs-type">int</span> sscore = rand() % <span class="hljs-number">61</span> + <span class="hljs-number">40</span>;<span class="hljs-comment">//40~100</span><br>teaArray[i].stuArray[j].name = sname;<br>teaArray[i].stuArray[j].score = sscore;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printFor</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Teacher teaArray[], <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; teaArray[i].name &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; teaArray[i].stuArray[j].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; teaArray[i].stuArray[j].score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-comment">// 随机数种子</span><br>srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)time(<span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 创建3名老师</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> <span class="hljs-title">teaArray</span>[3];</span><br><br><span class="hljs-comment">// 给老师的学生赋值</span><br><span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(teaArray) / <span class="hljs-keyword">sizeof</span>(teaArray[<span class="hljs-number">0</span>]);<br>allocateSpace(teaArray, len); <span class="hljs-comment">//数组本身就是地址传递</span><br>printFor(teaArray, len);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体案例-2">7.9 结构体案例 2</h2><ol type="1"><li>冒泡排序；</li><li>临时变量 temp，类型为 hero；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 设计结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-built_in">string</span> sex;<br>&#125;;<br><br><span class="hljs-comment">// 冒泡排序函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rink</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> hero heroArray[],<span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len<span class="hljs-number">-1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - i - <span class="hljs-number">1</span>; j++) &#123;<br><span class="hljs-keyword">if</span> (heroArray[j].age &gt; heroArray[j+<span class="hljs-number">1</span>].age) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> <span class="hljs-title">temp</span> =</span> heroArray[j];<br>heroArray[j] = heroArray[j+<span class="hljs-number">1</span>];<br>heroArray[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 打印输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printHero</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> hero heroArray[], <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; heroArray[i].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; heroArray[i].age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; heroArray[i].sex &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-comment">// 创建英雄</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> <span class="hljs-title">heroArray</span>[5] =</span> &#123;<br>&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 数组排序</span><br><span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(heroArray) / <span class="hljs-keyword">sizeof</span>(heroArray[<span class="hljs-number">0</span>]);<br>rink(heroArray, len);<br><br><span class="hljs-comment">// 打印输出</span><br>printHero(heroArray, len);<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简单链表">7.10 简单链表</h2><p>链表：需要的时候就分配一块空间，内存是动态变化的。而数组长度是固定不变的。</p><p><strong style="color:#00b050;">实现</strong></p><ol type="1"><li>定义一个超女结构体，含有编号、姓名、下一个超女的指针；</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span><br>&#123;<span class="hljs-comment">// 定义编号、姓名和下一个超女的指针</span><br><span class="hljs-type">int</span> no;<br>string name;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span>* next;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><p>初始化头号超女 header、尾部超女 tail 、临时超女temp;<code>SuperGril* header = nullptr, * tail = nullptr, * temp = nullptr;</code></p></li><li><p>使用临时节点创建超女，并给 header 和 tail 赋值</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 分配第一个节点，并赋值</span><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">1</span>,<span class="hljs-string">&quot;西施&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>header = tail = temp;<br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">2</span>,<span class="hljs-string">&quot;冰冰&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">3</span>,<span class="hljs-string">&quot;丽英&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>遍历链表</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 遍历链表</span><br>temp = header;<br><span class="hljs-keyword">while</span> (temp!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;编号&quot;</span> &lt;&lt; temp-&gt;no &lt;&lt; <span class="hljs-string">&quot;\t姓名&quot;</span> &lt;&lt;temp-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t下一个节点&quot;</span> &lt;&lt; temp-&gt;next &lt;&lt; endl;<br>temp = temp-&gt;next; <span class="hljs-comment">// 向后查找</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>释放链表内存</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 释放链表内存</span><br><span class="hljs-keyword">while</span> (header!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>temp = header;<br>header = header-&gt;next;<br><span class="hljs-keyword">delete</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong style="color:#00b050;">全部代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::string; <span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span><br>&#123;<span class="hljs-comment">// 定义编号、姓名和下一个超女的指针</span><br><span class="hljs-type">int</span> no;<br>string name;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span>* next;<br>&#125;;<br><br>SuperGril* header = <span class="hljs-literal">nullptr</span>, * tail = <span class="hljs-literal">nullptr</span>, * temp = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-comment">// 分配第一个节点，并赋值</span><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">1</span>,<span class="hljs-string">&quot;西施&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>header = tail = temp;<br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">2</span>,<span class="hljs-string">&quot;冰冰&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">3</span>,<span class="hljs-string">&quot;丽英&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br><br><span class="hljs-comment">// 传统赋值</span><br><span class="hljs-comment">//temp-&gt;no = 1;</span><br><span class="hljs-comment">//temp-&gt;name = &quot;西施&quot;;</span><br><span class="hljs-comment">//temp-&gt;next = nullptr;</span><br><br><span class="hljs-comment">// c++11推荐</span><br><span class="hljs-comment">//*(temp) = &#123; 1,&quot;西施&quot;,nullptr &#125;;</span><br><br><span class="hljs-comment">// 遍历链表</span><br>temp = header;<br><span class="hljs-keyword">while</span> (temp!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;编号&quot;</span> &lt;&lt; temp-&gt;no &lt;&lt; <span class="hljs-string">&quot;\t姓名&quot;</span> &lt;&lt;temp-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t下一个节点&quot;</span> &lt;&lt; temp-&gt;next &lt;&lt; endl;<br>temp = temp-&gt;next; <span class="hljs-comment">// 向后查找</span><br>&#125;<br><br><span class="hljs-comment">// 释放链表内存</span><br><span class="hljs-keyword">while</span> (header!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>temp = header;<br>header = header-&gt;next;<br><span class="hljs-keyword">delete</span> temp;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;释放完毕\n&quot;</span>);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="共同体">8、共同体</h1><ol type="1"><li>共同体占用的内存大小是成员占用内存最大的大小；（内存对齐）</li><li>全部成员使用一块内存；</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::string; <span class="hljs-keyword">using</span> std::cout; <span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">union</span> <span class="hljs-title class_">MyUnion</span><br>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">double</span> b;<br><span class="hljs-type">char</span> c[<span class="hljs-number">21</span>];<br>&#125;;<br>MyUnion data;<br><br><span class="hljs-comment">// 占用大小</span><br>cout &lt;&lt; <span class="hljs-string">&quot;内存占用大小=&quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(data) &lt;&lt; endl; <span class="hljs-comment">//24</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;内存地址data.a=&quot;</span> &lt;&lt; (<span class="hljs-type">void</span>*) &amp;data.a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;内存地址data.b=&quot;</span> &lt;&lt; (<span class="hljs-type">void</span>*) &amp;data.b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;内存地址data.c=&quot;</span> &lt;&lt; (<span class="hljs-type">void</span>*) &amp;data.c &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20221023115211935.png"alt="image-20221023115211935" /><figcaption aria-hidden="true">image-20221023115211935</figcaption></figure><h1 id="枚举">9、枚举</h1><p><strong><u>创建常量的一种方式</u></strong></p><p><strong style="color:#00b050;">创建常量的方法：</strong></p><ol type="1"><li>宏常量，用预处理指令#define 创建</li><li>用 const 关键字创建；</li><li>枚举</li></ol><p><strong style="color:#00b050;">注意事项：</strong></p><ol type="1"><li>枚举创建的变量取值只能在枚举范围之内；</li><li>枚举的作用域与变量的作用域相同；</li><li>可以设置枚举量的值</li><li>整型强制转为枚举量：<code>Colors cc = Colors(1);</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::string; <span class="hljs-keyword">using</span> std::cout; <span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span><br>&#123;<br>red=<span class="hljs-number">0</span>,yellow,blue,other<br>&#125;;<br><br><span class="hljs-comment">// 创建一个枚举变量，只能为Colors中的一个</span><br>Colors color = red;<br><br><span class="hljs-keyword">switch</span> (color) <span class="hljs-comment">// color是整数，可以用来switch</span><br>&#123;<br><span class="hljs-keyword">case</span> red: <span class="hljs-comment">// red是整型常量，可用来case</span><br>cout &lt;&lt; <span class="hljs-string">&quot;红色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> yellow:<br>cout &lt;&lt; <span class="hljs-string">&quot;黄色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> blue:<br>cout &lt;&lt; <span class="hljs-string">&quot;蓝色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> other:<br>cout &lt;&lt; <span class="hljs-string">&quot;红色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;未知&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="指针">10、指针</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> dval;<br><span class="hljs-type">double</span>* pd = &amp;dval;<br><span class="hljs-type">double</span>* pd2 = pd;<br>*pd2 = <span class="hljs-number">2.0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dval是&quot;</span>&lt;&lt;dval &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dval的地址是&quot;</span>&lt;&lt;&amp;dval &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*pd是&quot;</span>&lt;&lt;*pd &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pd的地址是&quot;</span>&lt;&lt;&amp;pd &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pd本身是&quot;</span>&lt;&lt;pd &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pd2是&quot;</span>&lt;&lt;*pd2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><p>dval 是 2 dval 的地址是 0000004D63EFF808 pd 是 2 pd 的地址是0000004D63EFF828 pd 本身是 0000004D63EFF808 pd2 是 2</p><h1 id="函数">11、函数</h1><h2 id="函数默认值">11.1 函数默认值</h2><ol type="1"><li>如果一个形参位置已经有默认值，则后面的形参都得有默认值；</li><li>如果函数声明中形参已经有默认值，在函数定义时就不能给默认值，否则会报错；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>, <span class="hljs-type">int</span> c = <span class="hljs-number">30</span>)</span><br>&#123;<br><span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>f1(<span class="hljs-number">10</span>); <span class="hljs-comment">//可以只传递一个，因为在函数中b、c已经给过值</span><br>f1(<span class="hljs-number">10</span>,<span class="hljs-number">60</span>); <span class="hljs-comment">//如果给b传了值，则用传入的</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>声明和定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>,<span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span><br>&#123;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>f2();<br>&#125;<br></code></pre></td></tr></table></figure><p>报错：f2 重定义默认参数</p><h2 id="函数占位参数">11.2 函数占位参数</h2><ol type="1"><li>c++函数形参列表可以有站位参数，但调用函数时必须补齐该位置；</li><li>语法：<code>数据类型int 函数名f(数据类型int)</code>；</li><li>占位参数也可以有默认参数；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;你好&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>f(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>默认参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> = <span class="hljs-number">10</span>)</span><br>&#123;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;你好&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>f();<span class="hljs-comment">//这里就可以不用传</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数的重载">11.3 函数的重载</h2><blockquote><ul><li>同一个作用域内；</li><li>函数名相同；</li><li>函数参数<strong>类型不同</strong>或者<strong>个数不同</strong>或者<strong>顺序不同</strong>；</li></ul></blockquote><ol type="1"><li>函数名可以相同，提高复用性；</li><li>返回值不可以作为重载的条件；<code>void f()和int f()</code>；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f()调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int a,int b)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">double</span> b)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(double b)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>f();<br>f(<span class="hljs-number">10</span>);<br>f(<span class="hljs-number">10.0</span>);<br>f(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-03-27_21-09-09.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=h6clW&amp;originHeight=1016&amp;originWidth=2489&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" /></p><h2 id="函数重载注意事项">11.4 函数重载注意事项</h2><ol type="1"><li>引用作为重载的条件；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int &amp;a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(const int &amp;a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>f(a); <span class="hljs-comment">// f(int &amp;a)调用了！</span><br>f(<span class="hljs-number">10</span>);<span class="hljs-comment">// f(const int &amp;a)调用了！</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>函数重载遇见默认参数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a,<span class="hljs-type">int</span> &amp;b = <span class="hljs-number">10</span>)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int &amp;a ,int &amp;b = 10)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(const int &amp;a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>f(a); <span class="hljs-comment">// 错误</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内联函数">11.5 内联函数</h2><p>函数声明之后定义，在主函数中被多次调用，原始写法：这样的写法会使程序在函数之间来回跳转，消耗一定的执行速度代价。使用内联函数的方法可以将show 函数放在 main函数里，避免来回跳转；但会占用一定的内存；使用较小的函数体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout; <span class="hljs-keyword">using</span> std::endl; <span class="hljs-keyword">using</span> std::string;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">show</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-built_in">show</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-built_in">show</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;亲爱的&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;号，&quot;</span> &lt;&lt; message &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>内联函数：相当于把函数嵌入进去</p><ol type="1"><li>内联函数不能递归</li><li>函数体太大的函数，编译器不会将其作为内联函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">show</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//short num = 1;</span><br><span class="hljs-comment">//string message = &quot;我是啥啥鸟&quot;;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;亲爱的&quot; &lt;&lt; num &lt;&lt; &quot;号，&quot; &lt;&lt; message &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-built_in">show</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//short num = 1;</span><br><span class="hljs-comment">//string message = &quot;我是啥啥鸟&quot;;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;亲爱的&quot; &lt;&lt; num &lt;&lt; &quot;号，&quot; &lt;&lt; message &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-built_in">show</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//short num = 1;</span><br><span class="hljs-comment">//string message = &quot;我是啥啥鸟&quot;;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;亲爱的&quot; &lt;&lt; num &lt;&lt; &quot;号，&quot; &lt;&lt; message &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;亲爱的&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;号，&quot;</span> &lt;&lt; message &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
