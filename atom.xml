<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大白的个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-02-08T11:39:14.900Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>DB</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust学习笔记</title>
    <link href="http://example.com/2025/02/08/037%20Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2025/02/08/037%20Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2025-02-08T07:43:00.000Z</published>
    <updated>2025-02-08T11:39:14.900Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 晚上</p>          </div><h1 id="安装与配置">1、安装与配置</h1><h2 id="安装">1.1 安装</h2><p><ahref="https://www.rust-lang.org/zh-CN/learn/get-started">官网下载</a></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028185911269.png"alt="image-20241028185911269" /><figcaption aria-hidden="true">image-20241028185911269</figcaption></figure><p>双击打开会弹出命令行窗口，直接回车即可。</p><p>查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup --version<br></code></pre></td></tr></table></figure><p>查看rust版本环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup show<br></code></pre></td></tr></table></figure><p>安装生产版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup install nightly<br></code></pre></td></tr></table></figure><p>切换版本环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup default nightly<br>or<br>rustup default stable<br></code></pre></td></tr></table></figure><h2 id="编译命令">1.2 编译命令</h2><p>文件编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustc 被编译文件名 -o 输出文件名<br>rustc main.rs -o hello<br></code></pre></td></tr></table></figure><h1 id="包管理">2、包管理</h1><h2 id="包管理工具cargo">2.1 包管理工具<code>Cargo</code></h2><p><strong><u>创建项目</u></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo new project_name<br>cargo new --lib project_lib_name<br></code></pre></td></tr></table></figure><p><strong><u>构建项目</u></strong></p><p>会出现一个名为<code>target</code>文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>cargo build --release  这个性能较好<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028191914203.png"alt="image-20241028191914203" /><figcaption aria-hidden="true">image-20241028191914203</figcaption></figure><p><strong><u>检测</u></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo check<br></code></pre></td></tr></table></figure><p><strong><u>运行/测试</u></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo run<br>cargo <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><strong><u>项目结构</u></strong></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028190911111.png"alt="image-20241028190911111" /><figcaption aria-hidden="true">image-20241028190911111</figcaption></figure><h2 id="cargo.toml文件">2.2 Cargo.toml文件</h2><ul><li>package<ul><li>设置版本名</li><li>版本等</li></ul></li><li>dependencies<ul><li>设置依赖</li><li>[build-dependencies]列出了在构建项目时需要的依赖项</li><li>[dev-dependencies]列出了只在开发时需要的依赖项</li></ul></li></ul><h2 id="加载库">2.3 加载库</h2><p>填写依赖项后保存会自动加载依赖项</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028192529489.png"alt="image-20241028192529489" /><figcaption aria-hidden="true">image-20241028192529489</figcaption></figure><p>推荐使用<code>cargo-edit</code></p><p>安装<code>cargo-edit</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo install cargo-edit<br></code></pre></td></tr></table></figure><p>添加库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add dependency_name<br></code></pre></td></tr></table></figure><p>安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add dependency_name@1.2.3<br></code></pre></td></tr></table></figure><p>添加开发时用的依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add --dev dev_dependency_name<br></code></pre></td></tr></table></figure><p>添加构建时用的依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo add --build build_dependency_name<br></code></pre></td></tr></table></figure><p>删除库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo <span class="hljs-built_in">rm</span> dependency_name<br></code></pre></td></tr></table></figure><h2 id="设置国内源">2.4 设置国内源</h2><p>推荐使用<code>rsproxy</code></p><p>在<code>C:\Users\23984\.cargo\.config</code></p><p>但是我没有找到</p><h1 id="基本类型">3、基本类型</h1><h2 id="变量与不可变性">3.1 变量与不可变性</h2><ol type="1"><li>使用<code>let</code>声明变量</li><li>后置类型定义</li><li>变量使用蛇形命名法，枚举和结构体命名使用帕斯卡命名法</li><li>强制类型转换<code>Casting a Value to a Different Type</code></li><li>使用<code>mut</code>关键词将变量置为可变</li><li></li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028194646626.png"alt="image-20241028194646626" /><figcaption aria-hidden="true">image-20241028194646626</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028194723176.png"alt="image-20241028194723176" /><figcaption aria-hidden="true">image-20241028194723176</figcaption></figure><h2 id="常量与静态变量">3.2 常量与静态变量</h2><p><strong><u>常量</u></strong></p><ol type="1"><li>常量的值在编译时已知，必须指定类型与值</li><li>与C不同，Rust的const常量值被直接嵌入到生成的底层机器代码中，而不是简单字符替换</li><li>常量名与静态变量名必须全部大写，单词之间加下划线</li><li>常来那个的作用域是块级作用域，只在声明他们的作用域内可见</li></ol><p><strong><u>static静态变量</u></strong></p><ol type="1"><li>在运行时分配内存</li><li>并不是不可变的，可使用unsafe修改</li><li>静态变量的生命周期为整个程序的运行时间</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028200046092.png"alt="image-20241028200046092" /><figcaption aria-hidden="true">image-20241028200046092</figcaption></figure><h2 id="基本数据类型">3.3 基本数据类型</h2><ul><li><code>Integer types</code> ： 默认推断为<code>i32</code><ul><li>i8、i16、i32、i64、i128</li></ul></li><li><code>Unsigned Integer types</code><ul><li>u8、u16、u32、u64、u128</li></ul></li><li>platform-specific integer type（由平台决定）<ul><li>usize</li><li>isize</li></ul></li><li>Float Types<ul><li>f32与f64</li><li>尽量用f64</li></ul></li><li>Boolean Values<ul><li>true</li><li>false</li></ul></li><li>Character Types<ul><li>Rust支持Unicode字符</li><li>表示char类型使用单引号</li></ul></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">u32</span>::MAX);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">u32</span>::MIN);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">usize</span>::MAX);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">usize</span>::MIN);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;isize is &#123;&#125; bytes&quot;</span>,std::mem::size_of::&lt;<span class="hljs-type">isize</span>&gt;());<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028200813404.png"alt="image-20241028200813404" /><figcaption aria-hidden="true">image-20241028200813404</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241028200822258.png"alt="image-20241028200822258" /><figcaption aria-hidden="true">image-20241028200822258</figcaption></figure><p>该2.4了</p><p>https://www.bilibili.com/video/BV15y421h7j7?spm_id_from=333.788.videopod.episodes&amp;vd_source=33b50a4dd201d7564e6e63d321809ce9&amp;p=7</p><h2 id="元祖和数组">3.4 元祖和数组</h2><p>相同点：</p><ul><li>都是复合类型Compound Types，而Vec和Map都是集合类型CollectionTypes</li><li>元组和数组长度都是固定的</li></ul><p>不同点：</p><ul><li>Tuples：不同类型的数据类型</li><li>Arrays：同一类型的数据类型</li></ul><p><u><strong>数组：</strong></u></p><ul><li><p>创建方式</p><ul><li><p><code>[a,b,c]</code></p></li><li><p><code>[value;size]</code></p></li></ul></li><li><p>获取元素<code>arr[index]</code></p></li><li><p>获取长度<code>arr.len()</code></p></li></ul><p><strong><u>元组：</u></strong></p><ul><li>获取数据：tup.index</li><li>没有len()</li><li>默认返回值<code>Emoty Tuple()</code></li></ul><blockquote><ul><li>元组和数组都是可以直接打印的；<code>println!("&#123;:?&#125;",arr);</code></li><li>赋值默认都是<code>copy</code>操作；</li></ul></blockquote><p>string赋值时是<code>move</code>操作，会转移所有权，不能再打印。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241029191648931.png"alt="image-20241029191648931" /><figcaption aria-hidden="true">image-20241029191648931</figcaption></figure><h1 id="ownership与结构体枚举">4、Ownership与结构体、枚举</h1><h2 id="rust的内存管理模型">4.1 Rust的内存管理模型</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241029191949573.png"alt="image-20241029191949573" /><figcaption aria-hidden="true">image-20241029191949573</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241029192441011.png"alt="image-20241029192441011" /><figcaption aria-hidden="true">image-20241029192441011</figcaption></figure><p><strong><u>1、所有权系统</u></strong></p><ul><li>每个值都有一个与之关联的变量，该变量是该值的所有者</li><li>同一时间只能有一个所有者</li><li>当所有者离开作用域时，它拥有的值将被丢弃</li></ul><p><strong><u>2、RAII原则</u></strong></p><p>资源获取即初始化原则。当对象被创建时，它会获取必要的资源，并在生命周期结束时释放这些资源。</p><blockquote><p>https://blog.csdn.net/CrystalLawson/article/details/138190719</p></blockquote>]]></content>
    
    
    <summary type="html">Rust基础</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Rust" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Rust/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>深度学习基础</title>
    <link href="http://example.com/2025/02/08/036%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E5%90%B4%E6%81%A9%E8%BE%BE%EF%BC%89/"/>
    <id>http://example.com/2025/02/08/036%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E5%90%B4%E6%81%A9%E8%BE%BE%EF%BC%89/</id>
    <published>2025-02-08T07:11:00.000Z</published>
    <updated>2025-02-08T11:39:07.393Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 晚上</p>          </div><span class="label label-primary">梯度下降</span><span class="label label-info">线性回归</span><span class="label label-warning">学习率</span><hr /><a class="btn" href="https://github.com/kaieye/2022-Machine-Learning-Specialization"  title="Github资料" target="_blank">Github资料</a><h2 id="机器学习分类">1、机器学习分类</h2><p>分为监督学习和无监督学习</p><h3 id="监督学习">1.1 监督学习</h3><ul><li>定义：在给定的数据集中学习出一个函数，当输入新的x时，能够预测输出结果y。</li><li>两种主要类型：回归和分类</li><li>学习技术：逻辑回归、线性回归、决策树和神经网络。</li></ul><h3 id="无监督学习">1.2 无监督学习</h3><ul><li>无监督学习算法会使用未标记的数据进行训练。</li><li>无监督学习可用于将新闻文章分类</li><li>学习技术：集群、关联规则学习、概率密度和降维</li></ul><h3 id="区别">1.3 区别</h3><ul><li>监督学习是一种目的明确的训练方式，你知道得到的是什么；而<strong>无监督学习则是没有明确目的的训练方式，你无法提前知道结果是什么</strong>。</li><li>监督学习由于目标明确，所以可以衡量效果；而<strong>无监督学习几乎无法量化效果如何</strong>。</li></ul><div class="note note-info">            <ol type="1"><li><ahref="https://aws.amazon.com/cn/compare/the-difference-between-machine-learning-supervised-and-unsupervised/">有监督学习和无监督学习有什么区别</a></li><li><ahref="https://easyai.tech/ai-definition/unsupervised-learning/">无监督学习– Unsupervised learning | UL</a></li></ol>          </div><h2 id="线性回归">2、线性回归</h2><h3 id="定义">2.1 定义</h3><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161210625.png"></p></div><p>任何预测数字之间的监督学习模型都可被称作回归问题。线性回归时回归模型中的一个用例。模型可以有无限可能的输出。</p><p>Training : Data used to train the model</p><ul><li>x : 输入</li><li>y : 输出</li><li>m : 训练集的数量</li><li>(x,y) : 单个训练样本</li><li>$ (x<sup>{i},y</sup>{i}) $ : 第i个训练样本fs</li><li><span class="math inline">\(\hat{y}\)</span> : 预测值</li><li>f : 函数模型</li><li><span class="math inline">\(\hat{y}-y\)</span> : error</li></ul><blockquote><p>另一种机器学习类别是分类，分类问题时预测类别或者离散类别，如预测图片是猫还是狗。在分类问题中，只有少量可能的输出。</p></blockquote><h3 id="损失函数">2.2 损失函数</h3><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161303796.png"></p></div><p>模型 <span class="math display">\[f_{w,b}(x)=wx+b\]</span> 参数为w和b <span class="math display">\[J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}\bigl(f_{w,b}\bigl(x^{(i)}\bigr)-y^{(i)}\bigr)^{2}\]</span></p><blockquote><p><span class="math inline">\(J(w,b)\)</span>最小化</p></blockquote><p>为方便举例，假设只有一个参数w。如图所示，当参数w为1时，J(w)时是最小的</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161301562.png"></p></div><p>如果参数有w和b则</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161303421.png"></p></div><p>或者</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161307927.png"></p></div><p>完整对应关系</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161309467.png"></p></div><h2 id="梯度下降">3、梯度下降</h2><p>有时我们的损失值J并不是规则的，如图所示，存在诸多小峰和低谷。机器学习的目标就是找到最低点，如何快速找到最低点至关重要。</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202409161313907.png"></p></div><p>假设你站在一个山坡上，如何找到最快的下坡路线？即朝哪个方向迈出一步？每走一步都要再次确认下一步往哪迈。</p><blockquote><p>实现梯度下降</p></blockquote><p><span class="math display">\[w=w-\alpha\frac\partial{\partial w}J(w,b)\]</span></p><p><span class="math display">\[b=b-\alpha\frac\partial{\partial b}J(w,b)\]</span></p><p>学习率<spanclass="math inline">\(\alpha\)</span>决定下坡的步数大小</p><blockquote><p>对于某个特定步的两个量(w,b)的更新，<spanclass="math inline">\(\frac\partial{\partialw}J(w,b)\)</span>要一致。</p></blockquote><p><span class="math display">\[tmp_w = w-\alpha\frac\partial{\partial w}J(w,b)\]</span></p><p><span class="math display">\[tmp_b = b-\alpha\frac\partial{\partial b}J(w,b)\]</span></p><p><span class="math display">\[w = tmp_w\]</span></p><p><span class="math display">\[b = tmp_b\]</span></p><p><strong>直观理解梯度下降</strong></p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185034.png"></p></div><h3 id="学习率">3.1 学习率</h3><p>学习率的值至关重要，太小和太大会产生什么影响呢？</p><ul><li>太小学习很慢</li><li>太大可能会离最小值越来越远，导致发散</li></ul><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185505.png"></p></div><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185512.png"></p></div><p>固定的学习率，下降的步长会越来越小，因为导数在变小</p><div style="width: 60%; margin: auto"><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240918185832.png"></p></div><h3 id="线性回归中的梯度下降">3.2 线性回归中的梯度下降</h3><p><span class="math display">\[f_{w,b}(x)=wx+b\]</span></p><p><span class="math display">\[J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-y^{(i)})^{2}\]</span></p><p><span class="math display">\[w=w-\alpha\frac{\partial}{\partial w}J(w,b)\]</span></p><p><span class="math display">\[b=b-\alpha\frac{\partial}{\partial b}J(w,b)\]</span></p><p>而</p><p><span class="math display">\[\frac{\partial}{\partial w}J(w,b) =\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}\big(x^{(i)}\big)-y^{(i)})x^{(i)}\]</span></p><p><span class="math display">\[\frac{\partial}{\partial w}J(w,b) =\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}\big(x^{(i)}\big)-y^{(i)})\]</span></p><p>则</p><p><span class="math display">\[w=w-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-y^{(i)}) x^{(i)}\]</span></p><p><span class="math display">\[b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-y^{(i)})\]</span></p><blockquote><p>梯度下降只能找到局部最小值，而不能找到全局最小值。对于凸函数只有一个最小值，梯度下降是适用的</p></blockquote><h2 id="多元线性回归">4、多元线性回归</h2><p>多元线性回归模型中有多个特征值。比如房间的价格Y不止与面积X1有关，还与地段X2、房间数X3等有关。此时的X实际为一个向量[X1,X2,X3]。此时模型可以定义为</p><p><span class="math display">\[f_{\overrightarrow{w},b}(\overrightarrow{X})=w_{1}X_{1}+w_{2}X_{2}+w_{3}X_{3}+b\]</span></p><p><span class="math display">\[\overrightarrow{w} = [X1,X2,X3]\]</span></p><p><span class="math display">\[f_{\overrightarrow{w},b}(\overrightarrow{X})=\overrightarrow{w}\cdot\overrightarrow{X}+ b\]</span></p><p><strong>向量化</strong></p><p><spanclass="math display">\[f=w[0]*x[0]+w[1]*x[1]+w[2]*x[2]+b\]</span>代码表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,n):<br>  f = f + w[j] * x[j]<br>f = f + b<br><br>// 也可以使用numpy，这种方式计算效率高，因为numpy可以并行计算<br>f = np.dot(w,x) + b<br></code></pre></td></tr></table></figure><p><strong>向量中的梯度算法</strong></p><a class="btn" href="https://www.bilibili.com/video/BV1Bq421A74G?p=24&vd_source=33b50a4dd201d7564e6e63d321809ce9"  title="视频讲解" target="_blank">视频讲解</a><p>多个特征值</p><p><span class="math display">\[\begin{align*} \text{repeat}&amp;\text{ until convergence:} \; \lbrace\newline\;&amp; w_j = w_j -  \alpha \frac{\partial J(\mathbf{w},b)}{\partial w_j}\tag{5}  \; &amp; \text{for j = 0..n-1}\newline&amp;b\ \ = b -  \alpha \frac{\partial J(\mathbf{w},b)}{\partial b} \newline \rbrace\end{align*}\]</span></p><p><span class="math display">\[\frac{\partial J(\mathbf{w},b)}{\partialw_j}=\frac{1}{m}\sum_{i=0}^{m-1}(f_{\mathbf{w},b}(\mathbf{x}^{(i)})-y^{(i)})x_j^{(i)}\]</span></p><p><span class="math display">\[\frac{\partial J(\mathbf{w},b)}{\partialb}=\frac{1}{m}\sum_{i=0}^{m-1}(f_{\mathbf{w},b}(\mathbf{x}^{(i)})-y^{(i)})\]</span></p><h3 id="梯度下降特征放缩">4.1 梯度下降:特征放缩</h3><p>如果两个特征值在量级上相差较大，如房间数和面积，房间数一般在1<sub>5，而面积在100</sub>150，这时绘制出的w1和w2的J(w,b)呈现椭圆形，在梯度下降时会来回反弹。最有利的方式是将特征值进行放缩，使得两个特征值在相同量级。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240924084546.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><h3 id="如何缩放">4.2 如何缩放</h3><p><strong>最值归一化</strong></p><p>除以特征值取值的最大值，数据会映射到0~1之间。 <spanclass="math display">\[x_{scale}=\frac{x-x_{min}}{x_{max}-x_{min}}\]</span>最值归一化只适用于有明显边间的情况。</p><p><strong>均值归一化</strong></p><p><span class="math display">\[x_{scale}=\frac{x-\mu}S\]</span>其中<span class="math inline">\(x\)</span>为要归一化的值，<spanclass="math inline">\(x_{scale}\)</span>为归一化之后的值。<spanclass="math inline">\(\mu\)</span> 为样本的平均值，<spanclass="math inline">\(S\)</span>为样本的标准差。</p><p><strong>均值方差归一化</strong></p><p><span class="math display">\[Y_i=\sigma\cdot X_i+\mu \]</span>其中，X为标准正态分布中的元素，<spanclass="math inline">\(\mu\)</span>为平均值，<spanclass="math inline">\(\sigma\)</span>为标准差。</p><h3 id="学习曲线">4.3 学习曲线</h3><p>可以判断何时停止训练特定模拟</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240927140525.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><h3 id="学习率选择">4.4 学习率选择</h3><p>一个小的学习率，J应该是持续减小的。在选择学习率时，可从小的开始，每次增加10倍改变，如0.001、0.01、0.1、1、10...</p>]]></content>
    
    
    <summary type="html">跟着吴恩达学习深度学习基础</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="大模型" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="吴恩达" scheme="http://example.com/tags/%E5%90%B4%E6%81%A9%E8%BE%BE/"/>
    
  </entry>
  
  <entry>
    <title>AI生成代码</title>
    <link href="http://example.com/2025/02/08/035%20AI%E9%97%AE%E7%AD%94%E5%BD%A2%E5%BC%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2025/02/08/035%20AI%E9%97%AE%E7%AD%94%E5%BD%A2%E5%BC%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</id>
    <published>2025-02-08T07:06:00.000Z</published>
    <updated>2025-02-08T11:39:20.848Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 晚上</p>          </div><h2 id="ai问答形式生成代码">AI问答形式生成代码</h2><p>今天无意间在b站看到一位up主用AI写代码的过程，无比惊讶，不需要会前端，就能使用问答的形式生成好看的前端页面。我也亲自体验了一下。</p><p>https://v0.dev/chat/</p><p>这是我使用这个网站生成的前端页面，但是每天有限制次数，<u>一定要谨慎使用，想好了问题再问。</u></p><h2 id="预览">预览</h2><p>https://v0.dev/chat/GvO3hYBppbW</p><h2 id="问答生成">问答生成</h2><p>有样学样，首先给他生成网站的目的及类型。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> want <span class="hljs-selector-tag">to</span> make an app for university applicants. <span class="hljs-selector-tag">To</span> learn about major. <span class="hljs-selector-tag">I</span> want <span class="hljs-selector-tag">to</span> <span class="hljs-attribute">display</span> <span class="hljs-selector-tag">a</span> list of major, and their coresponging subject, and comparisons between majors. Now generate the major list page.<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143611587.png"alt="image-20241123143611587" />​</p><p>但显示的内容过于多，而不是自己想要的，我想要在主页面能呈现更多的专业</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">but </span>make it more concise, <span class="hljs-keyword">because </span>there are <span class="hljs-keyword">bundreds </span>of majors i want to <span class="hljs-keyword">display </span>in the home page<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143748042.png"alt="image-20241123143748042" />​</p><p>它还贴心的加上了搜索功能，但是我想着美化一下，添加一个主题颜色</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-keyword">use</span> clean <span class="hljs-built_in">color</span> themes<br></code></pre></td></tr></table></figure><p>但是单词打错了，<code>clear</code>写成了<code>clean</code>，它把所有颜色删除了。当时我没意识到，只是让它在搜索栏右侧添加一个筛选按钮，可以筛选分类。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">add </span>a category <span class="hljs-keyword">button </span><span class="hljs-built_in">at</span> search <span class="hljs-keyword">box </span>right, I can choose <span class="hljs-keyword">different </span>category<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144043521.png"alt="image-20241123144043521" />​</p><p>还是不甘心，加点颜色主题吧</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-keyword">use</span> gradient <span class="hljs-built_in">color</span> theme<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144129571.png"alt="image-20241123144129571" />​</p><p>但这个紫色系不是我想要的，想要个蓝色系的。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">use gradient <span class="hljs-keyword">color</span> theme <span class="hljs-keyword">about</span> blue<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144236324.png"alt="image-20241123144236324" />​</p><p>生成一个详情页面</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">generate</span> a <span class="hljs-keyword">new</span> page <span class="hljs-keyword">for</span> major detail, <span class="hljs-keyword">this</span> page should contain subjects related to <span class="hljs-number">10</span> majors.<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144410492.png"alt="image-20241123144410492" />​</p><p>这个页面有些简单，增加一下问答功能</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">detail page should have comment <span class="hljs-keyword">and</span> question / answer seciotn <span class="hljs-keyword">below</span><br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144451374.png"alt="image-20241123144451374" />​</p><p>但是推荐的专业里面推荐的是大分类，想改成大分类中的小分类</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The recommended major is <span class="hljs-keyword">the</span> minor major <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> larger category <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> detail page<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144604904.png"alt="image-20241123144604904" />​</p><p>生成专业对比页面</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">generate a new page about major <span class="hljs-built_in">compare</span>. Side-<span class="hljs-keyword">by-side </span><span class="hljs-built_in">compare</span> <span class="hljs-number">2</span> major majors interm of suject to study, related <span class="hljs-keyword">jobs, </span><span class="hljs-keyword">and </span>more. <span class="hljs-keyword">be </span>creative.<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144639352.png"alt="image-20241123144639352" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123144650053.png"alt="image-20241123144650053" />​</p><p>还想优化一下，但是今日的生成次数用尽了。总之这个网站对我的冲击还是比较大的。一时间让我感觉自己之前学的东西都白费了，自己一天写的网站，它使用几分钟就能搞定，而且还美观。不得不惊叹目前AI发展的速度，自己还是要掌握一些核心技能，不然免不了被淘汰。</p><h2 id="全部页面">全部页面</h2><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143233687.png"alt="image-20241123143233687" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143249198.png"alt="image-20241123143249198" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143259159.png"alt="image-20241123143259159" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143337907.png"alt="image-20241123143337907" />​</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20241123143346607.png"alt="image-20241123143346607" />​</p>]]></content>
    
    
    <summary type="html">使用v0.dev.chat以问答形式生成代码测试</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="AI代码生成" scheme="http://example.com/tags/AI%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
    
    <category term="大模型" scheme="http://example.com/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="v0.chat" scheme="http://example.com/tags/v0-chat/"/>
    
  </entry>
  
  <entry>
    <title>在powershell上禁止运行脚本</title>
    <link href="http://example.com/2025/02/08/034%20Powershell%E9%99%90%E5%88%B6/"/>
    <id>http://example.com/2025/02/08/034%20Powershell%E9%99%90%E5%88%B6/</id>
    <published>2025-02-08T06:33:00.000Z</published>
    <updated>2025-02-08T11:39:29.438Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文最新更新于 2025/02/08 下午</p>          </div><p>在使用<code>tabby</code>运行<code>PowerShell</code>时，输入命令行<code>hexo s</code>出现如下报错</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/picgo/image-20250208144105189.png"alt="image-20250208144105189" /><figcaption aria-hidden="true">image-20250208144105189</figcaption></figure><p><strong>分析原因</strong></p><p><code>PowerShell</code>执行策略是<code>Restricted</code>。<code>Restricted</code> 执行策略不允许任何脚本运行。</p><p>查看执行策略<code>get-executionpolicy</code></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/picgo/image-20250208143829255.png"alt="image-20250208143829255" /><figcaption aria-hidden="true">image-20250208143829255</figcaption></figure><p><strong>解决方法</strong></p><p>管理员身份打开<code>PowerShell</code> 输入<code>set-executionpolicy remotesigned</code>更改执行策略</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/picgo/image-20250208143928799.png"alt="image-20250208143928799" /><figcaption aria-hidden="true">image-20250208143928799</figcaption></figure>]]></content>
    
    
    <summary type="html">解决在powershell禁止运行脚本问题</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="powershell" scheme="http://example.com/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>The Spalart-Allmaras Turbulence Model</title>
    <link href="http://example.com/2024/07/30/033%20%E6%B9%8D%E6%B5%81%E6%A8%A1%E5%9E%8B%E4%B9%8BSpalart-Allmaras/"/>
    <id>http://example.com/2024/07/30/033%20%E6%B9%8D%E6%B5%81%E6%A8%A1%E5%9E%8B%E4%B9%8BSpalart-Allmaras/</id>
    <published>2024-07-30T11:26:00.000Z</published>
    <updated>2025-02-08T06:47:20.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="历史发展">1、历史发展</h1><p>流体动力学中描述流体在外力作用下流动的主要控制方程是<strong>纳维-斯托克斯方程</strong>。这些方程的强大之处在于它们能够描述作用在流体上的任何力的影响以及由此产生的流动行为。然而，<em>它们不能针对每个系统或流量情况以封闭形式求解。</em></p><p>由于最早 1973 年提出的 ke 模型无法准确预测逆压力梯度 adverse pressuregradient 下的边界层运动，Spalart-Allmaras Model（1994）、（1998）以及（1994）分别被提出。</p><p>在物理学中，Spalart-Allmaras模型是一种单方程模型，可求解运动涡流湍流粘度的模拟输运方程。在其原始形式中，该模型实际上是一个低雷诺数模型，需要正确解析边界层的粘度影响区域（y+~1个网格）。它没有针对一般工业流动进行标定，对于一些自由剪切流，尤其是平面和圆形射流，确实会产生较大的误差。此外，不能依靠它来预测均匀、各向同性湍流的衰减。</p><h1 id="基本形式">2、基本形式</h1><p><spanclass="math display">\[\tau_{ij}=2\mu_t\left(S_{ij}-\frac{1}{3}\frac{\partialu_k}{\partial x_k}\delta_{ij}\right)-\frac{2}{3}\rhok\delta_{ij}\]</span></p><p>Spalart-Allmaras 湍流模型遵循一个描述运动粘度类变量（称为Spalart-Allmaras 变量）的动态方程：</p><p><span class="math display">\[\frac{\partial\bar{v}}{\partialt}+u_{j}\frac{\partial\bar{v}}{\partialx_{j}}=C_{b,1}(1-f_{t,2})\hat{S}\bar{v}-[c_{w,1}f_{w}-\frac{c_{b,1}}{\kappa^{2}}f_{t,2}](\frac{\bar{v}}{d})^{2}+\frac{1}{\sigma}[\frac{\partial}{\partialx_{j}}((v+\bar{v})\frac{\partial\bar{v}}{\partialx_{j}})+c_{b,2}\frac{\partial\bar{v}}{\partialx_{i}}\frac{\partial\bar{v}}{\partial x_{i}}]\]</span></p><p>该方程的目标是确定湍流涡流粘度，其由以下公式确定：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194639.png" /></p><p>在这些方程中，分子运动粘度为 𝜈 = μ/⍴，流体密度为 ⍴，μ是流体的分子动力粘度。模型中的其他参数以场点到最近壁 d的距离和涡度大小给出</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194722.png" /></p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194738.png" /></p><p>以下定义：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194758.png" /></p><p>从上面的定义中可以看出几个常量。这些常量定义如下：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194819.png" /></p><p>由于所考虑的系统以墙为界，因此沿着墙的表面有一个固定边界条件。其他边界条件可能会施加在系统的其他地方，尽管这些边界条件是否会干扰解决远离壁本身的涡流可能值得怀疑。最后，我们对远场Spalart-Allmaras 变量有以下条件：</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240730194845.png" /></p><p>优点：</p><ol type="1"><li>降维可以降低问题的复杂性和整体模拟时间。</li><li>无需使用沿湍流的剪切层的局部厚度来计算长度尺度。</li><li>对于具有<strong>任意压力梯度</strong>的边界层流很有用。</li><li>稳健；对于低雷诺数 k - ε模型不收敛甚至发散的相对粗糙的网格，它可以给出合理的结果</li></ol><p>缺点：</p><ol type="1"><li>不适用于涉及喷射状自由剪切区域的应用</li><li></li></ol><h1 id="用途">3、用途</h1><h1 id="注意事项">4、注意事项</h1><p>参考：</p><ol type="1"><li>https://resources.system-analysis.cadence.com/blog/msa2024-what-is-the-spalart-allmaras-turbulence-model</li><li>https://www.cfd-online.com/Wiki/Spalart-Allmaras_model</li><li>https://www.youtube.com/watch?v=Xivc0EIGFQw</li><li>https://zhuanlan.zhihu.com/p/408434524</li></ol>]]></content>
    
    
    <summary type="html">介绍The Spalart-Allmaras Turbulence Model的历史及公式</summary>
    
    
    
    <category term="模拟" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="Fluent" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/Fluent/"/>
    
    
    <category term="Fluent" scheme="http://example.com/tags/Fluent/"/>
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="湍流模型" scheme="http://example.com/tags/%E6%B9%8D%E6%B5%81%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python自动执行fluent</title>
    <link href="http://example.com/2024/07/30/032%20Python%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8Cfluent/"/>
    <id>http://example.com/2024/07/30/032%20Python%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8Cfluent/</id>
    <published>2024-07-30T10:53:00.000Z</published>
    <updated>2025-02-08T06:47:20.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tui-命令">TUI 命令</h1><p>TUI 命令包括 Fluent 中的全部设置，见上一篇 Fluent TUI 命令。</p><p>最重要的是要包含推出程序命令，即<code>exit ok</code></p><p>全部 TUI 命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs tui">; 1、读取网格文件<br>rc fluent.msh<br>mesh/check<br>mesh/quality<br><br><br>display mesh-outline<br><br>; 2、勾选瞬态<br>/define/models/unsteady-2nd-order yes<br><br>; 3、设置重力加速度<br>/define/operating-conditions/gravity yes 0 -9.81 0<br><br>; 4、开启能量方程<br>/define/models/energy y y y<br><br>; 5、湍流模型<br>/define/models/viscous/spalart-allmaras y<br><br>; 6、新增混合气体<br>/define/models/species/species-transport y hydrogen-air<br>/define/materials/change-create hydrogen-air hydrogen-air y 2 h2 air 0 0 n n n n n n<br><br>; 7、管道材料及土壤材料<br>/define/materials/copy/solid/steel<br>/define/materials/change-create aluminum soil y constant 2650 y constant 789 y constant 2.9 y<br><br>; 8、设置边界条件<br>/define/boundary-conditions/fluid solid fluid no no no no no  0 no 0 no 0 no  0 no 0 no 0 no no no no yes no no 1 no 0 no 0 no  0 no 1 no 0 yes no 245000000000 no 245000000000 no 245000000000 no no 502000 no 502000 no 502000 0 0 no 0.43 constant 1 yes no no no<br><br>/define/boundary-conditions/zone-type inlet pressure-inlet<br>/define/boundary-conditions/set/pressure-inlet inlet () p0 no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () supersonic/initial-gauge-pressure no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () ke-spec no no no yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () turb-hydraulic-diam 0.01 q<br>/define/boundary-conditions/set/pressure-inlet inlet () t0 no 288.15 q<br>/define/boundary-conditions/set/pressure-inlet inlet () species-in-mole-fractions yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () mf no 1 q<br><br>/define/boundary-conditions/set/pressure-outlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 () t0 no 288.15 q<br><br>/define/boundary-conditions wall pipe 0 no 0 yes steel no no 0 no no no no no 0 no 0.5 yes no 1<br>/define/boundary-conditions wall ground 0 no 0 yes soil no no 0 no no no no no 0 no 0.5 yes no 1<br><br>; 9、创建并设置监测点和面<br>surf point-surf point-1 0 0.4 0 q<br>surf point-surf point-2 0 0.5 0 q<br>surf point-surf point-3 2 0.4 0 q<br><br>/solve/report-definitions add report1 surface-vertexavg field molef-h2 surface-names point-1 () q<br><br>/surface/plane plane1 0 0 0 0 1 0 0 0 1<br><br>; 10、初始化<br>/solve/initialize/set-defaults/ temperature 288.15<br>/solve/initialize/set-defaults/ pressure 0<br>/solve/initialize/set-defaults/ species-0 0<br><br>/solve/initialize initialize-flow ok<br>; 显示一下contour<br>;/display/contour molef-h2 0 1<br><br><br>; 11、设置保存格式及频率<br>; 设置数据保存内容<br>/file/data-file-options molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q<br>; 保存tecplot文件<br>/file/transient-export/tecplot  C:/Users/23984/Desktop/tui_test/tecplot1 ground inlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 pipe () molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q tecplot1 10 time-step<br><br>; 12、创建contour并保存动画<br>/display/objects/create contour &quot;contour-1&quot; filled yes field molef-h2 surfaces-list plane1 () q<br>/solve/animate/objects/create &quot;animation-1&quot; animate-on contour-1 storage-dir C:\Users\23984\Desktop\tui_test frequency-of &quot;Time Step&quot; q<br><br>; 13、设置迭代参数<br>/solve/set/max-iterations-per-time-step 50<br>/solve/set/time-step 1<br>/solve/set/number-of-time-steps 1000<br>/file/write-case/setting1.cas<br><br>; 14、开始计算<br>/solve/dual-time-iterate 1 2<br><br>exit ok<br></code></pre></td></tr></table></figure><h1 id="python-代码">Python 代码</h1><p>含注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 获取python文件运行的目录文件夹</span><br>path, filename = os.path.split(os.path.abspath(__file__))<br><br><span class="hljs-comment"># 定义fluent.exe的目录</span><br>fluent_path = <span class="hljs-string">&quot;D:\\ANSYS18\\ANSYS Inc\\v180\\fluent\\ntbin\\win64&quot;</span><br><br><span class="hljs-comment"># 定义要运行的命令</span><br>command_list = []<br>command_list.append(<span class="hljs-string">f&#x27;&quot;<span class="hljs-subst">&#123;fluent_path&#125;</span>\\fluent.exe&quot; 3ddp -t4 -i jou1.jou&#x27;</span>)<br>command_list.append(<span class="hljs-string">f&#x27;&quot;<span class="hljs-subst">&#123;fluent_path&#125;</span>\\fluent.exe&quot; 3ddp -t4 -i jou2.jou&#x27;</span>)<br><br>time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 定义fluent程序循环</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_fluent</span>(<span class="hljs-params">command,path</span>):<br>    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, shell=<span class="hljs-literal">True</span>, universal_newlines=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 持续监控输出，如果检测到程序结束就往下执行</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        output = process.stdout.readline()<br>        <span class="hljs-keyword">if</span> output == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> process.poll() <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> output:<br>            <span class="hljs-built_in">print</span>(output.strip())<br>    rc = process.poll()<br><br>count = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,count):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;开始循环第<span class="hljs-subst">&#123;i&#125;</span>个&quot;</span>)<br>  run_fluent(command_list[i],path)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;i&#125;</span>个循环结束&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序结束&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>这里如果想使用 python算一些变量，然后传入程序中自动执行，这里提供一种方法，就是修改 tui文件（.jou）内的内容。</p></blockquote>]]></content>
    
    
    <summary type="html">基于python的subprocess线程库和TUI命令自动运行fluent算例</summary>
    
    
    
    <category term="模拟" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="Fluent" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/Fluent/"/>
    
    
    <category term="Fluent" scheme="http://example.com/tags/Fluent/"/>
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="TUI" scheme="http://example.com/tags/TUI/"/>
    
    <category term="自动化" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>TUI命令</title>
    <link href="http://example.com/2024/07/27/031%20Fleunt%20Tui%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2024/07/27/031%20Fleunt%20Tui%E5%91%BD%E4%BB%A4/</id>
    <published>2024-07-27T13:29:00.000Z</published>
    <updated>2025-02-08T06:47:20.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tui-命令基本认识">1、TUI 命令基本认识</h1><p>Fluent 中的 Tui 命令能使 Fluent自动化操作，包括文件设置、案例读取、参数设置等功能。</p><h1 id="基本操作">2、基本操作</h1><p>在 Fluent 中的命令行可进行 tui 命令操作</p><ul><li>回车可查看命令提示；</li><li>q：返回上一级</li></ul><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240727213342.png" /></p><h1 id="案例">3、案例</h1><p>案例中包含注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs jou">; 1、读取网格文件<br>rc fluent.msh<br>mesh/check<br>mesh/quality<br><br><br>display mesh-outline<br><br>; 2、勾选瞬态<br>/define/models/unsteady-2nd-order yes<br><br>; 3、设置重力加速度<br>/define/operating-conditions/gravity yes 0 -9.81 0<br><br>; 4、开启能量方程<br>/define/models/energy y y y<br><br>; 5、湍流模型<br>/define/models/viscous/spalart-allmaras y<br><br>; 6、新增混合气体<br>/define/models/species/species-transport y hydrogen-air<br>/define/materials/change-create hydrogen-air hydrogen-air y 2 h2 air 0 0 n n n n n n<br><br>; 7、管道材料及土壤材料<br>/define/materials/copy/solid/steel<br>/define/materials/change-create aluminum soil y constant 2650 y constant 789 y constant 2.9 y<br><br>; 8、设置边界条件<br>/define/boundary-conditions/fluid solid fluid no no no no no  0 no 0 no 0 no  0 no 0 no 0 no no no no yes no no 1 no 0 no 0 no  0 no 1 no 0 yes no 245000000000 no 245000000000 no 245000000000 no no 502000 no 502000 no 502000 0 0 no 0.43 constant 1 yes no no no<br><br>/define/boundary-conditions/zone-type inlet pressure-inlet<br>/define/boundary-conditions/set/pressure-inlet inlet () p0 no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () supersonic/initial-gauge-pressure no 400000 q<br>/define/boundary-conditions/set/pressure-inlet inlet () ke-spec no no no yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () turb-hydraulic-diam 0.01 q<br>/define/boundary-conditions/set/pressure-inlet inlet () t0 no 288.15 q<br>/define/boundary-conditions/set/pressure-inlet inlet () species-in-mole-fractions yes q<br>/define/boundary-conditions/set/pressure-inlet inlet () mf no 1 q<br><br>/define/boundary-conditions/set/pressure-outlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 () t0 no 288.15 q<br><br>/define/boundary-conditions wall pipe 0 no 0 yes steel no no 0 no no no no no 0 no 0.5 yes no 1<br>/define/boundary-conditions wall ground 0 no 0 yes soil no no 0 no no no no no 0 no 0.5 yes no 1<br><br>; 9、创建并设置监测点和面<br>surf point-surf point-1 0 0.4 0 q<br>surf point-surf point-2 0 0.5 0 q<br>surf point-surf point-3 2 0.4 0 q<br><br>/solve/report-definitions add report1 surface-vertexavg field molef-h2 surface-names point-1 () q<br><br>/surface/plane plane1 0 0 0 0 1 0 0 0 1<br><br>; 10、初始化<br>/solve/initialize/set-defaults/ temperature 288.15<br>/solve/initialize/set-defaults/ pressure 0<br>/solve/initialize/set-defaults/ species-0 0<br><br>/solve/initialize initialize-flow ok<br>; 显示一下contour<br>;/display/contour molef-h2 0 1<br><br><br>; 11、设置保存格式及频率<br>; 设置数据保存内容<br>/file/data-file-options molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q<br>; 保存tecplot文件<br>/file/transient-export/tecplot  C:/Users/23984/Desktop/tui_test/tecplot1 ground inlet outlet_x1 outlet_x2 outlet_y1 outlet_z1 outlet_z2 pipe () molef-h2 molef-air absolute-pressure air h2 velocity-magnitude mesh-x-velocity mesh-y-velocity mesh-z-velocity pressure density total-pressure total-temperature  x-velocity y-velocity z-velocity viscosity-eff viscosity-lam viscosity-ratio viscosity-turb vorticity-mag q tecplot1 10 time-step<br><br>; 12、创建contour并保存动画<br>/display/objects/create contour &quot;contour-1&quot; filled yes field molef-h2 surfaces-list plane1 () q<br>/solve/animate/objects/create &quot;animation-1&quot; animate-on contour-1 storage-dir C:\Users\23984\Desktop\tui_test frequency-of &quot;Time Step&quot; q<br><br>; 13、设置迭代参数<br>/solve/set/max-iterations-per-time-step 50<br>/solve/set/time-step 1<br>/solve/set/number-of-time-steps 1000<br>/file/write-case/setting.cas<br><br>; 14、开始计算<br>/solve/dual-time-iterate 1000 20<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习Fluent的TUI命令基础知识以及如何自己写TUI</summary>
    
    
    
    <category term="模拟" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="Fluent" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/Fluent/"/>
    
    
    <category term="Fluent" scheme="http://example.com/tags/Fluent/"/>
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="TUI" scheme="http://example.com/tags/TUI/"/>
    
  </entry>
  
  <entry>
    <title>库朗数</title>
    <link href="http://example.com/2024/07/26/030%20%E5%BA%93%E6%9C%97%E6%95%B0/"/>
    <id>http://example.com/2024/07/26/030%20%E5%BA%93%E6%9C%97%E6%95%B0/</id>
    <published>2024-07-26T11:34:00.000Z</published>
    <updated>2025-02-08T06:47:20.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间步长的确定">时间步长的确定</h1><p>https://blog.csdn.net/staywithmoon/article/details/124253642</p><p>https://blog.csdn.net/weixin_45560646/article/details/126922667</p><p>https://www.youtube.com/watch?v=WBWY46ynRk0</p><h2 id="库朗数">1、库朗数</h2><h3 id="基本概念">1.1 基本概念</h3><p>库朗数是用来衡量数值计算稳定性的一个物理量，也被称为<code>CFL</code>数、<code>CFL</code>准则。</p><p><span class="math display">\[Courant=\frac{u\Delta t}{\Deltax}\]</span></p><p>u 为流体速度；Δt 为时间步长；Δx 为网格尺寸；</p><blockquote><p><code>u*Δt</code>表示流体在 Δt时间内流动的距离，除以网格尺寸，则表示流体在一个时间步长内流过了多少个网格。</p></blockquote><p>一般取值在<strong>1~10</strong>之间比较合适，当然要根据实际情况，如收敛性比较差，可适当降低这个数值。收敛性比较好，收敛速度慢，可适当增加库朗数。Fluent帮助文档认为对于大多数问题，库朗数设置为 1 能够满足要求。</p><p>实际上，Fluent 很多案例的库朗数都是50，这主要是选择了隐式算法的原因</p><h3 id="库朗数的设置">1.2 <strong>库朗数的设置</strong></h3><ul><li>显示格式 Explicit Formulation：默认是 1，对于 2维问题可适当增加库朗数，但不要超过2.0。如果设置没有问题，但是计算发散了，或者残差上升得非常快，就必须降低Courant number，可能需要降低到 0.5，甚至0.1。但如果收敛性很好，就可以增加 Courant number。</li><li>隐式格式 Implicit Formulation：默认库朗数为 5.0。通常可以 增加到10、20、100 甚至更高。与显示一样可根据收敛情况进行更改。</li></ul><blockquote><p>对于隐式非定常格式：对于不可压流动，在每个时间步内，不可压解必须迭代直至收敛。</p><p>对于显式非定常格式：每一个迭代就是一个时间步</p></blockquote><p>每个时间步内结果没有得到收敛，则很有可能你所得到的结果是不真实的</p><h3 id="库朗数推荐">1.3 库朗数推荐</h3><ul><li>Large Eddy Simulation(0.5-1)</li><li>Free Surface Flows(&lt;1)</li><li>Compressible Flows(depends on speed of sound)</li><li>Turbomachinery(&lt;80)</li><li>Explicit Time Stepping(&lt;1)</li></ul>]]></content>
    
    
    <summary type="html">库朗数基本介绍及推荐值</summary>
    
    
    
    <category term="模拟" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="Fluent" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/Fluent/"/>
    
    
    <category term="Fluent" scheme="http://example.com/tags/Fluent/"/>
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="库朗数" scheme="http://example.com/tags/%E5%BA%93%E6%9C%97%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>DPM颗粒模型</title>
    <link href="http://example.com/2024/07/26/029%20Fluent%20DPM%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2024/07/26/029%20Fluent%20DPM%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-07-26T11:33:00.000Z</published>
    <updated>2025-02-08T06:47:20.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习笔记">1 学习笔记</h1><h2 id="fluent-颗粒流">0、Fluent 颗粒流</h2><p>Fluent 有 3 种颗粒模拟方法</p><ol type="1"><li>欧拉颗粒流（双流体模型）：把颗粒当做连续介质处理，优点是计算量小，但需要更多的相互作用模型，比如阻力等，多用于流化床。</li><li>DPM 模型（离散相模型）：DPM模型之间不考虑碰撞也不考虑体积空间，适用于流体占主导作用的，颗粒占比不超过10%。模拟一般灰尘、气溶胶等小颗粒的运动，也经常配合化学反应。</li><li>DDPM 模型（稠密离散相模型）：DDPM 是 Dense Discrete Phase Model的缩写，是专门用来模拟例如流化床这种稠密颗粒流的模型，可以理解为简化了的DEM。他和 DPM的区别就是考虑了<strong>体积分数</strong>，是有孔隙率的，后处理中能够查看颗粒所占的体积分数，在相间相互作用力也可以考虑颗粒之间的碰撞，但是对于碰撞的计算是进行了模化的，不是用软球模型计算真实的碰撞过程，颗粒间的碰撞产生的力是根据KTGF 下颗粒的 stress tensori 计算得到。</li><li>DEM 离散元模型：可考虑颗粒的真实碰撞，可采用弹性 弹性阻尼 赫兹赫兹阻尼碰撞模型，一般 DDPM+DEM 一起使用</li></ol><h2 id="耦合">1、耦合</h2><ol type="1"><li>单向耦合</li><li>双向耦合</li></ol><h3 id="单向耦合">1.1 单向耦合</h3><p>单向耦合：离散相对连续相影响很小无需设置相间耦合.</p><p>单向耦合问题：只要在加入离散相粒子前计算连续相流场直至收敛，然后打开离散相模型，加入离散相粒子，无需迭代计算因为已经计算收敛流场稳定了.</p><p>连续相（也就是流场）计算可以是 steady（定常/稳态流场）也可以是unsteady（非定常/瞬态/transient）。这两种连续相的流场中离散相计算都可以用非耦合粒子计算。</p><p>单相耦合计算不考虑离散相对连续相的影响，离散相的动量、质量、温度等信息不会反馈给流场，因为流场事先已经计算收敛了，不能变了，当开DPM 时候，就是通过流场的信息计算 DPM 了，简单说是流场产生 DPM场的概念。</p><h3 id="双向耦合">1.2 双向耦合</h3><p>耦合计算的步骤：</p><ol type="1"><li>求解连续相流场（在引入离散相之前））</li><li>通过计算每个离散相注入的粒子轨迹来引入离散相。</li><li>使用先前粒子计算期间确定的动量、热量和质量的相间交换，重新计算连续相流。</li><li>重新计算修改的连续相流场中的离散相轨迹。</li><li>重复前两个步骤，直到获得收敛解，其中连续相流场和离散相颗粒轨迹在每次附加计算中都保持不变。</li></ol><h2 id="dpm-边界条件">2、DPM 边界条件</h2><ol type="1"><li>escape 逃逸：颗粒离开流体域</li><li>trap：被捕获吸收</li><li>reflect：反弹，一般用于壁面上，需要指定反射系数</li><li>wall jet：壁面射流，颗粒触碰壁面后会分成更小的颗粒继续流动</li><li>wall film：需要打开壁面液膜模型，与 wall jet 相似</li><li>reinject：当颗粒达到某个计算域边界时，将粒子重新引入域。</li></ol><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291658664.png"alt="image-20230829165815567" /><figcaption aria-hidden="true">image-20230829165815567</figcaption></figure><h2 id="粒子方向">3、粒子方向</h2><p>Inject Using Face NormalDirection：开启这个选项后，粒子在入射时的速度方向将与面法向一致，这样就无需定义颗粒在x、y、z 三个方向的速度分量，只需要定义速度值； <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202309020913147.png"alt="image.png" /></p><h2 id="粒子射入类型">4、粒子射入类型</h2><p>https://zhuanlan.zhihu.com/p/532180420 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202309020914955.png"alt="image.png" /></p><h2 id="颗粒碰撞">5、颗粒碰撞</h2><p>https://zhuanlan.zhihu.com/p/621078742</p><h2 id="颗粒其他作用">6、颗粒其他作用</h2><h1 id="案例颗粒搅拌">2 案例：颗粒搅拌</h1><h2 id="重力项">1、重力项</h2><h2 id="离散相模型">2、离散相模型</h2><p>打开【交互】-【与连续相的交互】</p><ul><li>每次流动迭代更新 DPM 源项：意思是每 10个流动迭代更新一下颗粒的数量变化，这个都给他勾选上，颗粒破碎，被壁面捕获，更改质量流量都会使数量发生变化。</li><li>DPM 迭代间隔：连续相每次迭代 10步，开始进行离散相的计算。（不收敛可调小）</li><li>颗粒时时间步大小：如为 0.001s 代表颗粒相每 0.001s追踪一次，但是，在开始计算阶段，粒子一边释放一边追踪，释放完成后也在追踪。（不收敛可调小）</li><li>最大步数和步长因子：Max number of steps 和 Specify LengthScale，每一次轨迹跟踪的最大积分时间步数和积分长度标尺，都是为了确定积分时间步长∆t。选择 Specify Length Scale选项以确定积分时间步长时，积分时间步长约等于所给的长度尺度（LengthScale）除以颗粒相对于连续相的速度大小。而积分步数约等于颗粒时间步长（ParticleTime Step Size）除以积分时间步长，但以 Max Number of Steps为限（因此：积分时间步长 ∆t&lt;颗粒时间步长 Particle Time StepSize∆tp）。所以，如 Max Number of Steps不够大，则未到颗粒时间步长就结束一个颗粒时间步，并转入下一个颗粒时间步，因而颗粒终了状态报告为incomplete。</li></ul><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291040314.png"alt="image-20230829104022213" /><figcaption aria-hidden="true">image-20230829104022213</figcaption></figure><p>设置喷射源</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291041115.png"alt="image-20230829104130041" /><figcaption aria-hidden="true">image-20230829104130041</figcaption></figure><h2 id="追踪颗粒轨迹">3、追踪颗粒轨迹</h2><p>创建颗粒轨迹</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291541393.png"alt="image-20230829154138243" /><figcaption aria-hidden="true">image-20230829154138243</figcaption></figure><p>创建颗粒场景并保存</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291542031.png"alt="image-20230829154239921" /><figcaption aria-hidden="true">image-20230829154239921</figcaption></figure><p>创建解决方案动画</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291543657.png"alt="image-20230829154309557" /><figcaption aria-hidden="true">image-20230829154309557</figcaption></figure><h2 id="导出颗粒数据">4、导出颗粒数据</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291543784.png"alt="image-20230829154336663" /><figcaption aria-hidden="true">image-20230829154336663</figcaption></figure><h1 id="喷头模拟">3 喷头模拟</h1><h2 id="碳酸氢钠性质">碳酸氢钠性质</h2><p>密度：2.16 g/mL 直径：在 0.1-10mm 之间</p><h2 id="section">20230829</h2><p>使用之前的网格，只有喷嘴和场域，出口 5MPa 和出口 2MPa 都发散。想到昨天尝试的将出口都改为压力出口（包括计算域的edge）计算较好，今天再试一下，但还是发散。使用昨天的设置再跑一边，只不过加入离散相。但是昨天加入了 VOF模型，现在关闭了。 <strong>成功设置</strong> 1、瞬态 2、能量 3、标准k-e，标准壁面 4、离散相模型： <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291913883.png"alt="image.png" /> 直径 0.0001，温度 300K，停止时间 1e-5，总流量 100000<imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291913817.png"alt="image.png" /> 5、材料 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291914553.png"alt="image.png" /> 6、边界条件 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291915645.png"alt="image.png" /> 压力进口（ecapse） <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291916777.png"alt="image.png" /> 压力出口 edge（reflect） <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291916237.png"alt="image.png" /> <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291917062.png"alt="image.png" /> 7、方法 PISO 方法 <imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202308291917948.png"alt="image.png" /> 8、残差 1e-06 9、步长 时间步长 0.01 时间步数 100</p><h2 id="section-1">20230905</h2><p>截止今日，在雪研师姐电脑上已经模拟完成渐扩喷头 2MPa 和5MPa，在自己电脑上渐扩喷头（带孔）2MPa，步长 1e-6，共 1000步。但是模拟出的粒子速度太大，现在想要使用 udf改变压力边界条件，呈现一个递减的趋势，气体使用真实气体状态方程进行模拟，密度基求解器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_x,thread,index)<br>&#123;<br>real y,v0,h0;<br>real x[ND_ND];<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;  <span class="hljs-comment">// 获取当前模拟的时间</span><br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &gt;=<span class="hljs-number">0</span> &amp;&amp; flow_time &lt;= <span class="hljs-number">0.05</span> )<br>F_PROFILE(f,thread,index) = <span class="hljs-number">2000000</span> - <span class="hljs-number">40000000</span> * flow_time;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,index) = <span class="hljs-number">0</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><p>为了能使粒子喷出后分散均匀，共设计 6种喷头结构，分别为渐扩喷头、渐扩喷头（带孔）、拉法尔喷头、拉法尔喷头（带孔）、蘑菇喷头和蘑菇喷头（带孔）。喷嘴尺寸：</p><p>喷嘴网格：</p><h3 id="空气">空气</h3><p>使用高压空气作为驱动气充入喷粉罐中，空气携带粒子以 2MPa 和 5MPa的压力喷出。压力以 40MPa/s 速度衰减，在 50ms 时衰减为 0。使用理想气体，密度变化。</p><h3 id="粒子">粒子</h3><p>抑爆剂粒子选用 NaHCO3 粒子，密度为 2.16g/cm³，比热为 2170J/(kg K)粒子的直径分布在 1~100um 范围内，平均直径为 50um，共 10 种粒子大小。粒子总质量 100g，在 50ms 内喷完。即产生速率为 2kg/s。（假设阀门 50ms打开） 粒子速度为 0.1m/s 从壁面出来 双向耦合，考虑粒子的碰撞</p><h3 id="求解器设置">求解器设置：</h3><p>因喷出速度较大，求解器选用密度基。</p>]]></content>
    
    
    <summary type="html">对Fluent中的DPM模型基本介绍，模拟固体颗粒通过喷头喷出的效果</summary>
    
    
    
    <category term="模拟" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="Fluent" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/Fluent/"/>
    
    
    <category term="Fluent" scheme="http://example.com/tags/Fluent/"/>
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="DPM" scheme="http://example.com/tags/DPM/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门</title>
    <link href="http://example.com/2024/06/30/028%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2024/06/30/028%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</id>
    <published>2024-06-30T14:45:00.000Z</published>
    <updated>2025-02-08T07:10:13.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本配置">基本配置</h1><p><ahref="https://github.com/baiqinglun/pytorch_learning.git">github</a></p><p><ahref="https://www.bilibili.com/video/BV1Z8411R7PH/?spm_id_from=333.788&amp;vd_source=33b50a4dd201d7564e6e63d321809ce9">学习视频地址</a></p><h2 id="环境配置">环境配置</h2><ol type="1"><li>在 anaconda中新建虚拟环境<code>conda create -n Pytorch python=3.9</code></li><li>激活虚拟环境并安装 numpy、matplotlib、pandas 库</li><li>在终端命令行输入：<code>nvidia-smi</code>查看 CUNDA 版本，在安装pytorch 时需要注意版本：CONDA &gt; conda</li></ol><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301747100.png" /></p><h2 id="更改-jupyter-默认打开目录">更改 jupyter 默认打开目录</h2><ol type="1"><li>首先使用以下命令生成 jupyter配置文件，生成的文件一般在<code>C:\Users\用户名\.jupyter</code>文件夹内</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jupyter notebook --generate-config<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><p>查找该文件中的<code>c.NotebookApp.notebook_dir</code>更改为<code>c.NotebookApp.notebook_dir = 'F:\Jupyter'</code>并保存，此时默认路径就更改为<code>'F:\Jupyter'</code></p></li><li><p>修改 jupyter快捷方式的打开方式，删除后面的环境变量，至此修改成功。</p></li></ol><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301822505.png" /></p><h2 id="将-conda-虚拟环境关联至-jupyter">将 conda 虚拟环境关联至jupyter</h2><p>安装 ipykernel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate pytorch<br>pip install ipykernel<br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m ipykernel install --user --name=pytorch<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301827885.png" /></p><h2 id="测试-conda-是否可用">测试 conda 是否可用</h2><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301828813.png" /></p><h1 id="dnn-基本原理">2、DNN 基本原理</h1><p>主要可分为以下 4 个步骤：</p><ol type="1"><li>划分数据集</li><li>训练网络</li><li>测试网络</li><li>使用网络</li></ol><h2 id="划分数据集">2.1 划分数据集</h2><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301841002.png" /></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301841606.png"alt="神经网络的结构" /><figcaption aria-hidden="true">神经网络的结构</figcaption></figure><p>考虑到 Python 列表、NumPy 数组以及 PyTorch张量都是从索引[0]开始，再加之输入层没有内部参数（权重 ω 与偏置b），所以习惯将输入层称之为第 0 层。</p><h2 id="训练网络">2.2 训练网络</h2><p>神经网络的训练过程，就是经过很多次前向传播与反向传播的轮回，最终不断调整其内部参数（权重ω 与偏置 b），以拟合任意复杂函数的过程。内部参数一开始是随机的（如Xavier 初始值、He 初始值），最终会不断优化到最佳。</p><p>习惯把内部参数称为参数，外部参数称为超参数。</p><p>（1）前向传播</p><p>将单个样本的 3个输入特征送入神经网络的输入层后，神经网络会逐层计算到输出层，最终得到神经网络预测的3 个输出特征。</p><p>该神经元节点的计算过程为<spanclass="math inline">\(y=\omega_1x_1+\omega_2x_2+\omega_3x_3+b\)</span>。你可以理解为，每一根线就是一个权重 ω，每一个神经元节点也都有它自己的偏置b。当然，每个神经元节点在计算完后，由于这个方程是线性的，因此必须在外面套一个非线性的函数：<spanclass="math inline">\(y=\sigma\left(\omega_1x_1+\omega_2x_2+\omega_3x_3+b\right)\)</span>，σ 被称为激活函数。<strong>如果你不套非线性函数，那么即使 10层的网络，也可以用 1 层就拟合出同样的方程。</strong></p><p>（2）反向传播</p><p>经过前向传播，网络会根据当前的内部参数计算出输出特征的预测值。为计算预测值与真实值之间的差距，需要一个损失函数。</p><p>损失函数计算好后，逐层退回求梯度。即看每一个内部参数是变大还是变小，才会使得损失函数变小。这样就达到了优化内部参数的目的。</p><p>关键参数：外部参数叫学习率。学习率越大，内部参数的优化越快，但过大的学习率可能会使损失函数越过最低点，并在谷底反复横跳。</p><p>（3）batch_size</p><p>前向传播与反向传播一次时，有三种情况：</p><ul><li>批量梯度下降（Batch GradientDescent，BGD），把所有样本一次性输入进网络，这种方式计算量开销很大，速度也很慢。</li><li>随机梯度下降（Stochastic GradientDescent，SGD），每次只把一个样本输入进网络，每计算一个样本就更新参数。这种方式虽然速度比较快，但是收敛性能差，可能会在最优点附近震荡，两次参数的更新也有可能抵消。</li><li>小批量梯度下降（Mini-Batch GradientDecent，MBGD）是为了中和上面二者而生，这种办法把样本划分为若干个批，按批来更新参数。</li></ul><blockquote><p>PyTorch 只支持批量与小批量</p></blockquote><p>（4）epochs</p><p>1 个 epoch 就是指全部样本进行 1 次前向传播与反向传播。</p><p>假设有 10240 个训练样本，batch_size 是 1024，epochs 是 5。那么：</p><ul><li>全部样本将进行 5 次前向传播与反向传播；</li><li>1 个 epoch，将发生 10 次（10240x1024）前向传播与反向传播；</li><li>一共发生 50 次（105）前向传播和反向传播。</li></ul><h2 id="测试网络">2.3 测试网络</h2><p>目的：防止过拟合。过拟合：网络优化好的内部参数支队本训练样本有效。</p><p>测试集时，只需要一次前向传播。</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406301948453.png" /></p><h2 id="使用网络">2.4 使用网络</h2><p>直接将样本进行 1 次前向传播。</p><h1 id="dnn-的实现">3、DNN 的实现</h1><h2 id="制作数据集">3.1 制作数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 展示高清图</span><br><span class="hljs-keyword">from</span> matplotlib_inline <span class="hljs-keyword">import</span> backend_inline<br>backend_inline.set_matplotlib_formats(<span class="hljs-string">&#x27;svg&#x27;</span>)<br><br>X1 = torch.rand(<span class="hljs-number">10000</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 输入特征1</span><br>X2 = torch.rand(<span class="hljs-number">10000</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 输入特征2</span><br>X3 = torch.rand(<span class="hljs-number">10000</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 输入特征3</span><br><br>Y1 = ( (X1+X2+X3)&lt;<span class="hljs-number">1</span> ).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># 输出特征1</span><br>Y2 = ( (<span class="hljs-number">1</span>&lt;(X1+X2+X3)) &amp; ((X1+X2+X3)&lt;<span class="hljs-number">2</span>) ).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># 输出特征2</span><br>Y3 = ( (X1+X2+X3)&gt;<span class="hljs-number">2</span> ).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># 输出特征3</span><br>Data = torch.cat([X1,X2,X3,Y1,Y2,Y3],axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 整合数据集</span><br>Data = Data.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 把数据集搬到GPU 上</span><br><br><span class="hljs-comment"># 划分训练集与测试集</span><br>train_size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(Data) * <span class="hljs-number">0.7</span>) <span class="hljs-comment"># 训练集的样本数量</span><br>test_size = <span class="hljs-built_in">len</span>(Data) - train_size <span class="hljs-comment"># 测试集的样本数量</span><br>Data = Data[torch.randperm( Data.size(<span class="hljs-number">0</span>)) , : ] <span class="hljs-comment"># 打乱样本的顺序</span><br>train_Data = Data[ : train_size , : ] <span class="hljs-comment"># 训练集样本</span><br>test_Data = Data[ train_size : , : ] <span class="hljs-comment"># 测试集样本</span><br>train_Data.shape, test_Data.shape<br></code></pre></td></tr></table></figure><h2 id="搭建神经网络">3.2 搭建神经网络</h2><p>通常以 nn.Module作为父类，自己的神经网络可直接继承父类的方法和属性。</p><p>在定义神经网络时通常需要包含 2个方法，<code>__init__</code>和<code>forward</code></p><ul><li><code>__init__</code>：用于构建自己的神经网络</li><li><code>forward</code>：用于输入数据进行向前传播</li></ul><p><strong>（1）搭建神经网络结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>            nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第1 层：全连接层</span><br>            nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第2 层：全连接层</span><br>            nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第3 层：全连接层</span><br>            nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># 第4 层：全连接层</span><br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br></code></pre></td></tr></table></figure><p><strong>代码解析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), nn.ReLU()<br></code></pre></td></tr></table></figure><ul><li>表示一个隐藏层，第一个隐藏层为线性层，搜嘎会给你一个神经元节点数是3，这层节点数是 5</li><li>后面的<code>nn.ReLU()</code>表示一个激活函数</li></ul><p><strong>代码解析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第1 层：全连接层</span><br>nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第2 层：全连接层</span><br>nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), nn.ReLU(), <span class="hljs-comment"># 第3 层：全连接层</span><br>nn.Linear(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># 第4 层：全连接层</span><br></code></pre></td></tr></table></figure><p>第二层的第一个数要和第一层的第二个数对应</p><p><strong>（2）创建神经网络</strong></p><p>创建 model 实例，并将其转移掉 gpu 上</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302117031.png" /></p><ul><li>每个隐藏层都有一个激活函数。</li><li>各层的神经元节点数位 3 5 5 5 3</li></ul><blockquote><p>输入层的神经元数量必须与每个样本的输入特征数量一致，输出层的神经数量必须与每个样本的输出特征数量一致。</p></blockquote><h2 id="网络的内部参数">3.3 网络的内部参数</h2><p>权重与偏置</p><p>查看网络内部参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> name,param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;参数:<span class="hljs-subst">&#123;name&#125;</span>\n形状:<span class="hljs-subst">&#123;param.shape&#125;</span>\n数值:<span class="hljs-subst">&#123;param&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302123628.png" /></p><ul><li>net.0.weight 权重形状为[5,3]，5 表示自己的节点数，3表示前一层的节点数</li><li><code>device='cuda:0'</code>表示在 gpu 上</li><li><code>requires_grad=True</code>表示打开梯度计算功能</li></ul><h2 id="网络外部参数">3.4 网络外部参数</h2><p>又叫超参数。</p><ul><li>搭建网络时的超参数：网络的层数、各隐藏层节点数、各节点激活函数、内部参数的初始值等。</li><li>训练网络时的超参数：损失函数、学习率、优化算法、batch_size、epochs等。</li></ul><p><strong>（1）激活函数</strong></p><p>引入非线性因素，从而使神经网络能够学习和表达更加复杂的函数关系。</p><p><ahref="https://pytorch.org/docs/2.3/nn.html#non-linear-activations-weighted-sum-nonlinearity">官网</a></p><p>https://cloud.tencent.com/developer/article/1797190</p><p><strong>（2）损失函数</strong></p><p>计算神经网络每次迭代的前向计算结果与真实值的差距，从而指导下一步的训练向正确的方向进行。</p><p><a href="https://pytorch.org/docs/2.3/optim.html">官网</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 损失函数的选择</span><br>loss_fn = nn.MSELoss()<br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.01</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)<br></code></pre></td></tr></table></figure><h2 id="训练网路">3.5 训练网路</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">1000</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-comment"># 给训练集划分输入与输出</span><br>X = train_Data[ : , :<span class="hljs-number">3</span> ] <span class="hljs-comment"># 前3 列为输入特征</span><br>Y = train_Data[ : , -<span class="hljs-number">3</span>: ] <span class="hljs-comment"># 后3 列为输出特征</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    loss = loss_fn(Pred, Y) <span class="hljs-comment"># 计算损失函数</span><br>    losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>    optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>    loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>    optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(epochs), losses)<br>plt.ylabel(<span class="hljs-string">&#x27;loss&#x27;</span>), plt.xlabel(<span class="hljs-string">&#x27;epoch&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302139653.png" /></p><h2 id="测试神网络">3.6 测试神网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试网络</span><br><span class="hljs-comment"># 给测试集划分输入与输出</span><br>X = test_Data[:, :<span class="hljs-number">3</span>] <span class="hljs-comment"># 前3 列为输入特征</span><br>Y = test_Data[:, -<span class="hljs-number">3</span>:] <span class="hljs-comment"># 后3 列为输出特征</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    Pred[:,torch.argmax(Pred, axis=<span class="hljs-number">1</span>)] = <span class="hljs-number">1</span><br>    Pred[Pred!=<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>    correct = torch.<span class="hljs-built_in">sum</span>( (Pred == Y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) ) <span class="hljs-comment"># 预测正确的样本</span><br>    total = Y.size(<span class="hljs-number">0</span>) <span class="hljs-comment"># 全部的样本数量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="保存与导入网络">3.7 保存与导入网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存网络</span><br>torch.save(model,<span class="hljs-string">&#x27;model.pth&#x27;</span>)<br><br><span class="hljs-comment"># 导入网络</span><br>new_model =torch.load(<span class="hljs-string">&#x27;model.pth&#x27;</span>)<br><br><span class="hljs-comment"># 测试新网络</span><br><span class="hljs-comment"># 给测试集划分输入与输出</span><br>X = test_Data[:, :<span class="hljs-number">3</span>] <span class="hljs-comment"># 前3 列为输入特征</span><br>Y = test_Data[:, -<span class="hljs-number">3</span>:] <span class="hljs-comment"># 后3 列为输出特征</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    Pred = new_model(X) <span class="hljs-comment"># 用新模型进行一次前向传播</span><br>    Pred[:,torch.argmax(Pred, axis=<span class="hljs-number">1</span>)] = <span class="hljs-number">1</span><br>    Pred[Pred!=<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>    correct = torch.<span class="hljs-built_in">sum</span>( (Pred == Y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) ) <span class="hljs-comment"># 预测正确的样本</span><br>    total = Y.size(<span class="hljs-number">0</span>) <span class="hljs-comment"># 全部的样本数量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="批量梯度下降案例代码">4、批量梯度下降案例代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 展示高清图</span><br><span class="hljs-keyword">from</span> matplotlib_inline <span class="hljs-keyword">import</span> backend_inline<br>backend_inline.set_matplotlib_formats(<span class="hljs-string">&#x27;svg&#x27;</span>)<br><br><span class="hljs-comment"># 准备数据集</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;Data.csv&#x27;</span>, index_col=<span class="hljs-number">0</span>) <span class="hljs-comment"># 导入数据</span><br>arr = df.values <span class="hljs-comment"># Pandas 对象退化为NumPy 数组</span><br>arr = arr.astype(np.float32) <span class="hljs-comment"># 转为float32 类型数组</span><br>ts = torch.tensor(arr) <span class="hljs-comment"># 数组转为张量</span><br>ts = ts.to(<span class="hljs-string">&#x27;cuda&#x27;</span>) <span class="hljs-comment"># 把训练集搬到cuda 上</span><br><br><span class="hljs-comment"># 划分训练集与测试集</span><br>train_size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(ts) * <span class="hljs-number">0.7</span>) <span class="hljs-comment"># 训练集的样本数量</span><br>test_size = <span class="hljs-built_in">len</span>(ts) - train_size <span class="hljs-comment"># 测试集的样本数量</span><br>ts = ts[ torch.randperm( ts.size(<span class="hljs-number">0</span>) ) , : ] <span class="hljs-comment"># 打乱样本的顺序</span><br>train_Data = ts[ : train_size , : ] <span class="hljs-comment"># 训练集样本</span><br>test_Data = ts[ train_size : , : ] <span class="hljs-comment"># 测试集样本</span><br><br><span class="hljs-comment"># 创建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">32</span>), nn.Sigmoid(), <span class="hljs-comment"># 第1 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">32</span>, <span class="hljs-number">8</span>), nn.Sigmoid(), <span class="hljs-comment"># 第2 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>), nn.Sigmoid(), <span class="hljs-comment"># 第3 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), nn.Sigmoid() <span class="hljs-comment"># 第4 层：全连接层</span><br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br><br>model = DNN().to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 创建子类的实例，并搬到GPU 上</span><br><br><span class="hljs-comment"># 损失函数的选择</span><br>loss_fn = nn.BCELoss(reduction=<span class="hljs-string">&#x27;mean&#x27;</span>)<br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.005</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">5000</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-comment"># 给训练集划分输入与输出</span><br>X = train_Data[ : , : -<span class="hljs-number">1</span> ] <span class="hljs-comment"># 前8 列为输入特征</span><br>Y = train_Data[ : , -<span class="hljs-number">1</span> ].reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment"># 后1 列为输出特征</span><br><span class="hljs-comment"># 此处的.reshape((-1,1))将一阶张量升级为二阶张量</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    loss = loss_fn(Pred, Y) <span class="hljs-comment"># 计算损失函数</span><br>    losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>    optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>    loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>    optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(epochs), losses)<br>plt.ylabel(<span class="hljs-string">&#x27;loss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;epoch&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 测试网络</span><br><span class="hljs-comment"># 给测试集划分输入与输出</span><br>X = test_Data[ : , : -<span class="hljs-number">1</span> ] <span class="hljs-comment"># 前8 列为输入特征</span><br>Y = test_Data[ : , -<span class="hljs-number">1</span> ].reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment"># 后1 列为输出特征</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    Pred = model(X) <span class="hljs-comment"># 一次前向传播（批量）</span><br>    Pred[Pred&gt;=<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>    Pred[Pred&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>    correct = torch.<span class="hljs-built_in">sum</span>( (Pred == Y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) ) <span class="hljs-comment"># 预测正确的样本</span><br>    total = Y.size(<span class="hljs-number">0</span>) <span class="hljs-comment"># 全部的样本数量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="小批量梯度下降">5、小批量梯度下降</h1><p>在使用小批量梯度下降时，必须使用 3 个 PyTorch内置的实用工具（utils）：</p><ul><li>DataSet 用于封装数据集；</li><li>DataLoader 用于加载数据不同的批次；</li><li>random_split 用于划分训练集与测试集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> random_split<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>%matplotlib inline<br><br><span class="hljs-comment"># 展示高清图</span><br><span class="hljs-keyword">from</span> matplotlib_inline <span class="hljs-keyword">import</span> backend_inline<br>backend_inline.set_matplotlib_formats(<span class="hljs-string">&#x27;svg&#x27;</span>)<br><br><span class="hljs-comment"># 制作数据集</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>): <span class="hljs-comment"># 继承Dataset 类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filepath</span>):<br>        df = pd.read_csv(filepath, index_col=<span class="hljs-number">0</span>) <span class="hljs-comment"># 导入数据</span><br>        arr = df.values <span class="hljs-comment"># 对象退化为数组</span><br>        arr = arr.astype(np.float32) <span class="hljs-comment"># 转为float32 类型数组</span><br>        ts = torch.tensor(arr) <span class="hljs-comment"># 数组转为张量</span><br>        ts = ts.to(<span class="hljs-string">&#x27;cuda&#x27;</span>) <span class="hljs-comment"># 把训练集搬到cuda 上</span><br>        self.X = ts[ : , : -<span class="hljs-number">1</span> ] <span class="hljs-comment"># 前8 列为输入特征</span><br>        self.Y = ts[ : , -<span class="hljs-number">1</span> ].reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment"># 后1 列为输出特征</span><br>        self.<span class="hljs-built_in">len</span> = ts.shape[<span class="hljs-number">0</span>] <span class="hljs-comment"># 样本的总数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">return</span> self.X[index], self.Y[index]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br><br><span class="hljs-comment"># 划分训练集与测试集</span><br>Data = MyData(<span class="hljs-string">&#x27;Data.csv&#x27;</span>)<br>train_size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(Data) * <span class="hljs-number">0.7</span>) <span class="hljs-comment"># 训练集的样本数量</span><br>test_size = <span class="hljs-built_in">len</span>(Data) - train_size <span class="hljs-comment"># 测试集的样本数量</span><br>train_Data, test_Data = random_split(Data, [train_size, test_size])<br><br><span class="hljs-comment"># 批次加载器</span><br>train_loader = DataLoader(dataset=train_Data, shuffle=<span class="hljs-literal">True</span>, batch_size=<span class="hljs-number">128</span>) <span class="hljs-comment"># shuffle洗牌</span><br>test_loader = DataLoader(dataset=test_Data, shuffle=<span class="hljs-literal">False</span>, batch_size=<span class="hljs-number">64</span>) <span class="hljs-comment"># 测试集就不需要洗牌了</span><br><br><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">32</span>), nn.Sigmoid(), <span class="hljs-comment"># 第1 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">32</span>, <span class="hljs-number">8</span>), nn.Sigmoid(), <span class="hljs-comment"># 第2 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>), nn.Sigmoid(), <span class="hljs-comment"># 第3 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), nn.Sigmoid() <span class="hljs-comment"># 第4 层：全连接层</span><br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br><br>model = DNN().to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 创建子类的实例，并搬到GPU 上</span><br>model <span class="hljs-comment"># 查看该实例的各层</span><br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.005</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">500</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> train_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        loss = loss_fn(Pred, y) <span class="hljs-comment"># 计算损失函数</span><br>        losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>        loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>        optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(losses)), losses)<br>plt.show()<br><br><span class="hljs-comment"># 测试网络</span><br>correct = <span class="hljs-number">0</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> test_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        Pred[Pred&gt;=<span class="hljs-number">0.5</span>] = <span class="hljs-number">1</span><br>        Pred[Pred&lt;<span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>        correct += torch.<span class="hljs-built_in">sum</span>( (Pred == y).<span class="hljs-built_in">all</span>(<span class="hljs-number">1</span>) )<br>        total += y.size(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><p>小批量时针对局部进行向前向后，所以出来的损失函数不是梯度下降的。</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302207424.png" /></p><h1 id="手写数字识别">6、手写数字识别</h1><p>手写数字识别数据集（MNIST）是机器学习领域的标准数据集</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302208601.png" /></p><ul><li>输入：一副图像</li><li>输出：一个与图像中对应的数字（0 至 9之间的一个整数，不是独热编码）</li></ul><blockquote><p>我们不用手动将输出转换为独热编码，PyTorch会在整个过程中自动将数据集的输出转换为独热编码.只有在最后测试网络时，我们对比测试集的预测输出与真实输出时，才需要注意一下。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms <span class="hljs-comment"># 需要使用pip install安装一下</span><br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>%matplotlib inline<br></code></pre></td></tr></table></figure><p>下载时需要开启全局代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 制作数据集</span><br><span class="hljs-comment"># 数据集转换参数</span><br>transform = transforms.Compose([<br>    transforms.ToTensor(),<br>    transforms.Normalize(<span class="hljs-number">0.1307</span>, <span class="hljs-number">0.3081</span>)<br>])<br><br><span class="hljs-comment"># 下载训练集与测试集</span><br>train_Data = datasets.MNIST(<br>    root = <span class="hljs-string">&#x27;F:\Jupyter\pytorch\dataset\mnist&#x27;</span>, <span class="hljs-comment"># 下载路径</span><br>    train = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 是train 集</span><br>    download = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 如果该路径没有该数据集，就下载</span><br>    transform = transform <span class="hljs-comment"># 数据集转换参数</span><br>)<br><br>test_Data = datasets.MNIST(<br>    root = <span class="hljs-string">&#x27;F:\Jupyter\pytorch\dataset\mnist&#x27;</span>, <span class="hljs-comment"># 下载路径</span><br>    train = <span class="hljs-literal">False</span>, <span class="hljs-comment"># 是test 集</span><br>    download = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 如果该路径没有该数据集，就下载</span><br>    transform = transform <span class="hljs-comment"># 数据集转换参数</span><br>)<br><br><span class="hljs-comment"># 批次加载器</span><br>train_loader = DataLoader(train_Data, shuffle=<span class="hljs-literal">True</span>, batch_size=<span class="hljs-number">64</span>)<br>test_loader = DataLoader(test_Data, shuffle=<span class="hljs-literal">False</span>, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">每个样本的输入都是形状为2828的二维数组，那么对于 DNN 来说，输入层的神经元节点就要有28x28 = 784个；输出层使用独热编码，需要 10 个节点。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 搭建神经网络各层 &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>(DNN,self).__init__()<br>        self.net = nn.Sequential( <span class="hljs-comment"># 按顺序搭建各层</span><br>        nn.Flatten(), <span class="hljs-comment"># 把图像铺平成一维</span><br>        nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">512</span>), nn.ReLU(), <span class="hljs-comment"># 第1 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">256</span>), nn.ReLU(), <span class="hljs-comment"># 第2 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">128</span>), nn.ReLU(), <span class="hljs-comment"># 第3 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>), nn.ReLU(), <span class="hljs-comment"># 第4 层：全连接层</span><br>        nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>) <span class="hljs-comment"># 第5 层：全连接层</span><br>    )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27; 前向传播 &#x27;&#x27;&#x27;</span><br>        y = self.net(x) <span class="hljs-comment"># x 即输入数据</span><br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y 即输出数据</span><br><br>model = DNN().to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-comment"># 创建子类的实例，并搬到GPU 上</span><br>model <span class="hljs-comment"># 查看该实例的各层</span><br><br><span class="hljs-comment"># 损失函数的选择</span><br>loss_fn = nn.CrossEntropyLoss() <span class="hljs-comment"># 自带softmax 激活函数</span><br><br><span class="hljs-comment"># 优化算法的选择</span><br>learning_rate = <span class="hljs-number">0.01</span> <span class="hljs-comment"># 设置学习率</span><br>optimizer = torch.optim.SGD(<br>    model.parameters(),<br>    lr = learning_rate,<br>    momentum = <span class="hljs-number">0.5</span><br>)<br><br><span class="hljs-comment"># 训练网络</span><br>epochs = <span class="hljs-number">5</span><br>losses = [] <span class="hljs-comment"># 记录损失函数变化的列表</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> train_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        x, y = x.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>), y.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        loss = loss_fn(Pred, y) <span class="hljs-comment"># 计算损失函数</span><br>        losses.append(loss.item()) <span class="hljs-comment"># 记录损失函数的变化</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 清理上一轮滞留的梯度</span><br>        loss.backward() <span class="hljs-comment"># 一次反向传播</span><br>        optimizer.step() <span class="hljs-comment"># 优化内部参数</span><br>Fig = plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(losses)), losses)<br>plt.show()<br><br><span class="hljs-comment"># 测试网络</span><br>correct = <span class="hljs-number">0</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 该局部关闭梯度计算功能</span><br>    <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> test_loader: <span class="hljs-comment"># 获取小批次的x 与y</span><br>        x, y = x.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>), y.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br>        Pred = model(x) <span class="hljs-comment"># 一次前向传播（小批量）</span><br>        _, predicted = torch.<span class="hljs-built_in">max</span>(Pred.data, dim=<span class="hljs-number">1</span>)<br>        correct += torch.<span class="hljs-built_in">sum</span>( (predicted == y) )<br>        total += y.size(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试集精准度: <span class="hljs-subst">&#123;<span class="hljs-number">100</span>*correct/total&#125;</span> %&#x27;</span>)<br></code></pre></td></tr></table></figure><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202406302232034.png" /></p><p>测试集精准度: 97.06999969482422 %</p>]]></content>
    
    
    <summary type="html">基于pytorch的深度学习笔记，包括环境配置、DNN的实现原理以及批量梯度下降案例、小批量梯度下降案例和手写数字识别案例</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="大模型" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="pytorch" scheme="http://example.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Nest学习笔记</title>
    <link href="http://example.com/2024/06/29/024%20Nest%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/06/29/024%20Nest%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-29T12:40:00.000Z</published>
    <updated>2025-02-08T06:47:20.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一起步">一、起步</h1><h2 id="项目创建">1.1 项目创建</h2><p>安装脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm i -g @nestjs/cli<br></code></pre></td></tr></table></figure><p>创建新项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest new project-name<br></code></pre></td></tr></table></figure><h2 id="项目文件">1.2 项目文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">src<br> ├── app.controller.spec.ts<br> ├── app.controller.ts<br> ├── app.module.ts<br> ├── app.service.ts<br> └── main.ts<br></code></pre></td></tr></table></figure><p>含义</p><table><thead><tr><th>文件名</th><th>含义</th></tr></thead><tbody><tr><td>app.controller.ts</td><td>带有单个路由的基本控制器示例。</td></tr><tr><td>app.controller.spec.ts</td><td>对于基本控制器的单元测试样例</td></tr><tr><td>app.module.ts</td><td>应用程序的根模块。</td></tr><tr><td>app.service.ts</td><td>带有单个方法的基本服务</td></tr><tr><td>main.ts</td><td>应用程序入口文件。它使用 <code>NestFactory</code> 用来创建 Nest应用实例。</td></tr></tbody></table><h2 id="启动项目">1.3 启动项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> demo1<br>yarn run start<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113144220518.png"alt="image-20230113144220518" /><figcaption aria-hidden="true">image-20230113144220518</figcaption></figure><p>热启动项目（实时更新）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn start:dev<br></code></pre></td></tr></table></figure><h2 id="主文件">1.4 主文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/core&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.module&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><p>要创建一个 Nest 应用实例，我们使用了 <code>NestFactory</code>核心类。<code>NestFactory</code>暴露了一些静态方法用于创建应用实例。</p><p><code>create()</code> 方法返回一个实现 <code>INestApplication</code>接口的对象。该对象提供了一组可用的方法，我们会在后面的章节中对这些方法进行详细描述。在上面的 <code>main.ts</code> 示例中，我们只是启动 HTTP服务，让应用程序等待 HTTP 请求。</p><h2 id="创建-moudle">1.5 创建 Moudle</h2><h3 id="手动创建">1.5.1 手动创建</h3><p>src/auth/auth.moudle.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>导入到 app 中</p><p>src/app.module.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth/auth.module&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">AuthModule</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="命令行创建">1.5.2 命令行创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">nest g module user<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113165522565.png"alt="image-20230113165522565" /><figcaption aria-hidden="true">image-20230113165522565</figcaption></figure><h2 id="创建完整模块">1.6 创建完整模块</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113170716951.png"alt="image-20230113170716951" /><figcaption aria-hidden="true">image-20230113170716951</figcaption></figure><p>controller 关注于请求的逻辑</p><p>service 关注具体实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/auth/auth.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthContriller</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.controller&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.service&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthContriller</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/auth/auth.controller.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.service&quot;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&quot;auth&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthContriller</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> authService: AuthService</span>) &#123;&#125;<br><br>  <span class="hljs-comment">// Post auth/signup</span><br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&quot;signup&quot;</span>)<br>  <span class="hljs-title function_">signup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">signup</span>();<br>  &#125;<br><br>  <span class="hljs-comment">// Post auth/signin</span><br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&quot;signin&quot;</span>)<br>  <span class="hljs-title function_">signin</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">signin</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/auth/auth.service.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>  <span class="hljs-title function_">signup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;This is a signup page!&quot;</span> &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">signin</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;This is a signin page!&quot;</span> &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二基本概念">二、基本概念</h1><h2 id="控制器">2.1 控制器</h2><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113144733598.png"alt="image-20230113144733598" /><figcaption aria-hidden="true">image-20230113144733598</figcaption></figure><p>目的：接受应用的特定请求；</p><p>控制器与路由：通常一个控制器含多个请求，不同的路由执行不同的操纵；</p><p>创建控制器：使用类和<code>装饰器</code>；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest g controller cats<br></code></pre></td></tr></table></figure><h3 id="路由">2.1.1 路由</h3><p>在下面的例子中，我们使用 <code>@Controller()</code>装饰器定义一个基本的控制器。</p><p>可选 路由路径前缀设置为 <code>custom</code>。在<code>@Controller()</code>装饰器中使用路径前缀可以使我们轻松地对一组相关的路由进行分组，并最大程度地减少重复代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// app.controller.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.service&quot;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&quot;/custom&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> appService: AppService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&quot;/eye&quot;</span>)<br>  <span class="hljs-title function_">getEye</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是眼睛&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&quot;/mouse&quot;</span>)<br>  <span class="hljs-title function_">getMouse</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是嘴巴&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113145438467.png"alt="image-20230113145438467" /><figcaption aria-hidden="true">image-20230113145438467</figcaption></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113145600949.png"alt="image-20230113145600949" /><figcaption aria-hidden="true">image-20230113145600949</figcaption></figure><blockquote><p>这里案例来说应该返回状态码加数据，而网页中直接显示了数据，原因是 nest有两种操作响应。</p><p>标准：使用这个内置方法，当请求处理程序返回一个<code>JavaScript</code> 对象或数组时，它将自动序列化为<code>JSON</code>。但是，当它返回一个 <code>JavaScript</code>基本类型（例如<code>string、number、boolean</code>）时， Nest将只发送值，而不尝试序列化它。这使响应处理变得简单：只需要返回值，其余的由Nest 负责。</p><p>类库特有：我们可以在函数签名处通过 <code>@Res()</code>注入类库特定的响应对象（例如，<code>Express</code>）。使用此方法，你就能使用由该响应对象暴露的原生响应处理函数。例如，使用<code>Express</code>，您可以使用<code>response.status(200).send()</code> 构建响应</p></blockquote><p>类库特有</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;head&#x27;</span>)<br><span class="hljs-title function_">getHead</span>(<span class="hljs-params"><span class="hljs-meta">@Res</span>() res</span>) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">OK</span>).<span class="hljs-title function_">send</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>而且，在上面的示例中，你失去与依赖于 Nest 标准响应处理的 Nest功能（例如，拦截器（Interceptors） 和<code>@HttpCode()</code>/<code>@Header()</code>装饰器）的兼容性。要解决此问题，可以将 <code>passthrough</code>选项设置为 <code>true</code>，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;head&#x27;</span>)<br><span class="hljs-title function_">getHead</span>(<span class="hljs-params"><span class="hljs-meta">@Res</span>(&#123;passthrough:<span class="hljs-literal">true</span>&#125;) res</span>) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">OK</span>)<br>    <span class="hljs-keyword">return</span> []<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="request">2.1.2 <ahref="https://docs.nestjs.cn/9/controllers?id=request">Request</a></h3><p>访问请求细节。</p><p>需要引入<code>Req</code>和<code>import &#123;Request&#125; from 'express';</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Req</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.service&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;express&quot;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&quot;/custom&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> appService: AppService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&quot;/eye&quot;</span>)<br>  <span class="hljs-title function_">getEye</span>(<span class="hljs-meta">@Req</span>() <span class="hljs-attr">request</span>: <span class="hljs-title class_">Request</span>): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-comment">// 这里的Request表示类型</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是眼睛&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>Request</code> 对象代表 <code>HTTP</code>请求，并具有查询字符串，请求参数参数，HTTP 标头（HTTP header） 和正文（HTTP body）的属性（在<ahref="https://expressjs.com/en/api.html#req">这里</a>阅读更多）。在多数情况下，不必手动获取它们。我们可以使用专用的装饰器，比如开箱即用的 <code>@Body()</code> 或<code>@Query()</code> 。 下面是 Nest提供的装饰器及其代表的底层平台特定对象的对照列表。</p></blockquote><p>多个装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/eye&#x27;</span>)<br><span class="hljs-title function_">getEye</span>(<span class="hljs-meta">@Req</span>() <span class="hljs-attr">request</span>:<span class="hljs-title class_">Request</span>,<span class="hljs-meta">@Ip</span>() ip,<span class="hljs-meta">@HostParam</span>() host): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">ip</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ip);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(host);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是眼睛&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="post">2.1.3 Post</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;/foot&#x27;</span>)<br><span class="hljs-title function_">getFoot</span>():<span class="hljs-built_in">string</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是脚&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113153133595.png"alt="image-20230113153133595" /><figcaption aria-hidden="true">image-20230113153133595</figcaption></figure><blockquote><p>Nest 为所有标准的 HTTP方法提供了相应的装饰器：<code>@Put()</code>、<code>@Delete()</code>、<code>@Patch()</code>、<code>@Options()</code>、以及<code>@Head()</code>。此外，<code>@All()</code>则用于定义一个用于处理所有 HTTP 请求方法的处理程序。</p></blockquote><h3 id="路由通配符">2.1.4 路由通配符</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;hand*s&#x27;</span>)<br><span class="hljs-title function_">getHead</span>():<span class="hljs-built_in">string</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是手&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113154504739.png"alt="image-20230113154504739" /><figcaption aria-hidden="true">image-20230113154504739</figcaption></figure><blockquote><p>路由路径 <code>'ab*cd'</code> 将匹配 <code>abcd</code>、<code>ab_cd</code> 、<code>abecd</code> 等。字符 <code>?</code>、<code>+</code> 、 <code>*</code> 以及 <code>()</code>是它们的正则表达式对应项的子集。连字符（<code>-</code>）和点（<code>.</code>）按字符串路径逐字解析。</p></blockquote><h3 id="状态码">2.1.5 状态码</h3><p>状态码默认是 200（post 为201），可通过<code>@HttpCode()</code>更改状态码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;foot&#x27;</span>)<br><span class="hljs-meta">@HttpCode</span>(<span class="hljs-number">204</span>)<br><span class="hljs-title function_">getFoot</span>():<span class="hljs-built_in">string</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是脚&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="headers">2.1.6 <ahref="https://docs.nestjs.cn/9/controllers?id=headers">Headers</a></h3><p>指定自定义响应头，可以使用 <code>@header()</code>装饰器或类库特有的响应对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Post</span>()<br><span class="hljs-meta">@Header</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>)<br><span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;This action adds a new cat&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重定向">2.1.7 重定向</h3><p>要将响应重定向到特定的 <code>URL</code>，可以使用<code>@Redirect()</code> 装饰器或特定于库的响应对象</p><p><code>@Redirect()</code>装饰器有两个可选参数，<code>url</code>和<code>statusCode</code>。 如果省略，则 <code>statusCode</code> 默认为<code>302</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>()<br><span class="hljs-meta">@Redirect</span>(<span class="hljs-string">&#x27;https://nestjs.com&#x27;</span>, <span class="hljs-number">301</span>)<br></code></pre></td></tr></table></figure><h3 id="路由参数">2.1.8 路由参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;mouse/:id&#x27;</span>)<br><span class="hljs-title function_">getMouseId</span>(<span class="hljs-meta">@Param</span>() params): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`我是嘴巴<span class="hljs-subst">$&#123;params.id&#125;</span>`</span><br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113155638965.png"alt="image-20230113155638965" /><figcaption aria-hidden="true">image-20230113155638965</figcaption></figure><p>或者写成</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;mouse/:id&#x27;</span>)<br><span class="hljs-title function_">getMouseId</span>(<span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) id): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`我是嘴巴<span class="hljs-subst">$&#123;id&#125;</span>`</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子域路由">2.1.9 <ahref="https://docs.nestjs.cn/9/controllers?id=子域路由">子域路由</a></h3><p><code>@Controller</code> 装饰器可以接受一个 <code>host</code>选项，以要求传入请求的 <code>HTTP</code> 主机匹配某个特定值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span>(&#123; <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;admin.example.com&quot;</span> &#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminController</span> &#123;<br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-title function_">index</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Admin page&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步性">2.1.10 异步性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* cats.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>()<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>[]&gt; &#123;<br>  <span class="hljs-keyword">return</span> [];<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="请求负载">2.1.11 请求负载</h3><p>首先（如果您使用 TypeScript），我们需要确定<code>DTO</code>（数据传输对象）模式。<code>DTO</code>是一个对象，它定义了如何通过网络发送数据。我们可以通过使用<strong>TypeScript</strong> 接口（Interface）或简单的类（Class）来定义DTO 模式。有趣的是，我们在这里推荐使用<strong>类</strong>。</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113193701850.png"alt="image-20230113193701850" /><figcaption aria-hidden="true">image-20230113193701850</figcaption></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  create-auto.dto.ts</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateAuthDto</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auto.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;getUser/:id&#x27;</span>)<br><span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@Body</span>() body:CreateAuthDto,</span><br><span class="hljs-params">    <span class="hljs-meta">@Param</span>() params:&#123;id:<span class="hljs-built_in">number</span>&#125;</span><br><span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">getUser</span>(body,params);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auto.service.ts */</span><br><br><span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span><br><span class="hljs-params">    body:CreateAuthDto,</span><br><span class="hljs-params">    params:&#123;id:<span class="hljs-built_in">number</span>&#125;</span><br><span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:body,params&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六管道">六、管道</h1><h2 id="应用场景">6.1 应用场景</h2><p>管道有两个典型的应用场景:</p><ul><li><strong>转换</strong>：管道将输入数据转换为所需的数据输出(例如，将字符串转换为整数)</li><li><strong>验证</strong>：对输入数据进行验证，如果验证成功继续传递;验证失败则抛出异常</li></ul><h2 id="内置管道">6.2 内置管道</h2><p><code>Nest</code> 自带九个开箱即用的管道，即</p><ul><li><code>ValidationPipe</code></li><li><code>ParseIntPipe</code></li><li><code>ParseFloatPipe</code></li><li><code>ParseBoolPipe</code></li><li><code>ParseArrayPipe</code></li><li><code>ParseUUIDPipe</code></li><li><code>ParseEnumPipe</code></li><li><code>DefaultValuePipe</code></li><li><code>ParseFilePipe</code></li></ul><p>他们从 <code>@nestjs/common</code> 包中导出。</p><h2 id="绑定管道">6.3 绑定管道</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;searchUser/:useId&#x27;</span>)<br><span class="hljs-title function_">searchUser</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;useId&#x27;</span>,ParseIntPipe) id:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">searchUser</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.service.ts */</span><br><br><span class="hljs-title function_">searchUser</span>(<span class="hljs-params">id:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:id&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里绑定的管道是一个类而不是一个实例对象，如果要改变内置管道的行为，在绑定时通过new 新建一个实例对象并绑定</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;searchUser/:useId&#x27;</span>)<br><span class="hljs-title function_">searchUser</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;useId&#x27;</span>,<span class="hljs-keyword">new</span> ParseIntPipe(&#123; errorHttpStatusCode: HttpStatus.NOT_ACCEPTABLE &#125;)) id:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">searchUser</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>且会将 string 转换为 int</p></blockquote><p>成功</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113195136018.png"alt="image-20230113195136018" /><figcaption aria-hidden="true">image-20230113195136018</figcaption></figure><p>失败</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113195219407.png"alt="image-20230113195219407" /><figcaption aria-hidden="true">image-20230113195219407</figcaption></figure><h1 id="七技术">七、技术</h1><h2 id="验证">7.1<ahref="https://docs.nestjs.cn/9/techniques?id=%e9%aa%8c%e8%af%81">验证</a></h2><h3 id="全局使用">7.1.1 全局使用</h3><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm i --save class-validator class-transformer<br></code></pre></td></tr></table></figure><p>注入全局验证管道</p><p><code>app.useGlobalPipes(new ValidationPipe())</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* main.ts */</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestApplication</span>, <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/core&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app.module&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>());<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><p>Dto</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsEmail</span>, <span class="hljs-title class_">IsNotEmpty</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;class-validator&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateAuthDto</span> &#123;<br>  <span class="hljs-meta">@IsEmail</span>()<br>  <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// email验证</span><br><br>  <span class="hljs-meta">@IsNotEmpty</span>()<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 不为空验证</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用验证</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.controller.ts */</span><br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;updateUser&#x27;</span>)<br><span class="hljs-title function_">updateUser</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() body:UpdateAuthDto</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">updateUser</span>(body);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.service.ts */</span><br><br><span class="hljs-title function_">updateUser</span>(<span class="hljs-params">body:UpdateAuthDto</span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:body&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>失败</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113211331532.png"alt="image-20230113211331532" /><figcaption aria-hidden="true">image-20230113211331532</figcaption></figure><p>成功</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113211258694.png"alt="image-20230113211258694" /><figcaption aria-hidden="true">image-20230113211258694</figcaption></figure><h3 id="剥离属性">7.1.2 剥离属性</h3><blockquote><p>有时我们不处理 token这个字段，而前端在请求时发送了这个字段，这是可以使用剥离属性，将不接受用不到的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">app.<span class="hljs-title function_">useGlobalPipes</span>(<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>(&#123;<br>    <span class="hljs-attr">whitelist</span>: <span class="hljs-literal">true</span>,<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><p>使用后</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230113212050272.png"alt="image-20230113212050272" /><figcaption aria-hidden="true">image-20230113212050272</figcaption></figure><h3 id="使用管道转换">7.1.3 使用管道转换</h3><p>如我们在发送 get 请求时，携带 body 中有 age，但是发送到后端 age 变成string，我们需要将 string 变成 int，只需要使用 6.3 即可。</p><h2 id="使用-mongo-数据库">7.2 使用 Mongo 数据库</h2><h3 id="基本步骤">7.2.1 基本步骤</h3><p>安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add --save @nestjs/mongoose mongoose<br></code></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* app.module.ts */</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongooseModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/mongoose&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth/auth.module&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">AuthModule</span>,<br>    <span class="hljs-title class_">MongooseModule</span>.<span class="hljs-title function_">forRoot</span>(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017/musicians&quot;</span>),<br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>表示连接 musicians 数据库</p></blockquote><p>创建一个模型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* src/auth/schema/users.schema.ts */</span><br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> mongoose <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mongoose&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Schema</span> = mongoose.<span class="hljs-property">Schema</span>;<br><span class="hljs-keyword">const</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">UserSchema</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">username</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">password</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">mobile</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">email</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">status</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">role_id</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>  <span class="hljs-attr">add_time</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: d.<span class="hljs-title function_">getTime</span>() &#125;,<br>  <span class="hljs-attr">is_supper</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span> &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>引入模型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthContriller</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.controller&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./auth.service&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongooseModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/mongoose&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserSchema</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./schema/users.schema&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">MongooseModule</span>.<span class="hljs-title function_">forFeature</span>([<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;User&quot;</span>,<br>        <span class="hljs-attr">schema</span>: <span class="hljs-title class_">UserSchema</span>,<br>        <span class="hljs-attr">collection</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>      &#125;,<br>    ]),<br>  ],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthContriller</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>模型的名称为 User，集合 test</p><p>使用模型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectModel</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/mongoose&quot;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@InjectModel</span>(<span class="hljs-string">&quot;User&quot;</span>) <span class="hljs-keyword">private</span> userModel</span>) &#123;&#125;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">signup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">exec</span>();<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">msg</span>: result &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>依赖注入创建 userModel 属性</p></blockquote><p>创建成功</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230114213520674.png"alt="image-20230114213520674" /><figcaption aria-hidden="true">image-20230114213520674</figcaption></figure><h3 id="crud">7.2.2 CRUD</h3><p>创建用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* auth.controller.ts */</span><br><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;addUser&#x27;</span>)<br><span class="hljs-title function_">addUser</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() body:<span class="hljs-built_in">any</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">addUser</span>(body);<br>&#125;<br><br><br><span class="hljs-comment">/* auth.service.ts */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params">body:<span class="hljs-built_in">any</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">create</span>(body);<br>    <span class="hljs-keyword">return</span> body;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230114214717752.png"alt="image-20230114214717752" /><figcaption aria-hidden="true">image-20230114214717752</figcaption></figure><p>查询所有用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">exec</span>();<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">msg</span>:result&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找单个用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">findOne</span>(<span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">User</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">findById</span>(_id);<br>&#125;<br></code></pre></td></tr></table></figure><p>编辑单个用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">editOne</span>(<span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">body</span>: <span class="hljs-title class_">EditUserDTO</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">findByIdAndUpdate</span>(_id, body);<br>&#125;<br></code></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">deleteOne</span>(<span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userModel</span>.<span class="hljs-title function_">findByIdAndDelete</span>(_id);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="附件">附件</h1><h2 id="装饰器">装饰器</h2><table><thead><tr><th>装饰器</th><th>含义</th></tr></thead><tbody><tr><td><span class="citation"data-cites="Controller">@Controller</span>()</td><td>定义一个基本控制器</td></tr><tr><td><span class="citation" data-cites="Get">@Get</span>()</td><td>定义一个 get 接口</td></tr><tr><td><span class="citation" data-cites="Post">@Post</span>()</td><td>定义一个 post 接口</td></tr><tr><td><span class="citation" data-cites="Put">@Put</span>()</td><td>定义一个 put 接口</td></tr><tr><td><span class="citation" data-cites="Delete">@Delete</span>()</td><td>定义一个 delete 接口</td></tr><tr><td><span class="citation" data-cites="Patch">@Patch</span>()</td><td>定义一个 patch 接口</td></tr><tr><td><span class="citation" data-cites="Options">@Options</span>()</td><td>定义一个 option 接口</td></tr><tr><td><span class="citation" data-cites="All">@All</span>()</td><td>定义一个处理所有 HTTP 请求的接口</td></tr><tr><td><span class="citation" data-cites="Request">@Request</span>()，<spanclass="citation" data-cites="Req">@Req</span>()</td><td>对应 req，Nest 将请求对象注入处理到</td></tr><tr><td><span class="citation"data-cites="Response">@Response</span>()，<span class="citation"data-cites="Res">@Res</span>()*</td><td>对应 res</td></tr><tr><td><span class="citation" data-cites="Next">@Next</span>()</td><td>对应 next</td></tr><tr><td><span class="citation" data-cites="Session">@Session</span>()</td><td>对应 req.session</td></tr><tr><td><span class="citation" data-cites="Param">@Param</span>(key?:string)</td><td>对应 req.params<code>/</code>req.params[key] get</td></tr><tr><td><span class="citation" data-cites="Body">@Body</span>(key?:string)</td><td>对应 req.body<code>/</code>req.body[key] post</td></tr><tr><td><span class="citation" data-cites="Query">@Query</span>(key?:string)</td><td>对应 req.query<code>/</code>req.query[key]</td></tr><tr><td><span class="citation" data-cites="Headers">@Headers</span>(name?:string)</td><td>对应 req.headers<code>/</code>req.headers[name]</td></tr><tr><td><span class="citation" data-cites="Ip">@Ip</span>()</td><td>对应 req.ip</td></tr><tr><td><span class="citation"data-cites="HostParam">@HostParam</span>()</td><td>对应 req.hosts</td></tr><tr><td><span class="citation" data-cites="HttpCode">@HttpCode</span>()</td><td>更改状态码</td></tr><tr><td><span class="citation" data-cites="Header">@Header</span>()</td><td>更改请求头</td></tr><tr><td><span class="citation" data-cites="Module">@Module</span>()</td><td>定义模块</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Nest学习笔记，包括基本概念、控制器、管道等</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="后端" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Nest" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%90%8E%E7%AB%AF/Nest/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Nest" scheme="http://example.com/tags/Nest/"/>
    
  </entry>
  
  <entry>
    <title>ICEM常遇问题</title>
    <link href="http://example.com/2024/06/29/025%20ICEM%E5%B8%B8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/06/29/025%20ICEM%E5%B8%B8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/</id>
    <published>2024-06-29T12:40:00.000Z</published>
    <updated>2025-02-08T06:47:20.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="d-网格不闭合">2D 网格不闭合</h2><blockquote><p>Mesh has uncovered edges. ANSYS Fluent needs a complete boundary(lines in 2D) or it will give a variety of errors and not read in themesh! If this was 2D Hexa, perhaps your edges are not associated withperimeter curves</p></blockquote><p>原因是线和线之间可能没有关联</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202302161539612.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure>]]></content>
    
    
    <summary type="html">在使用ICEM划分网格时常遇到的问题</summary>
    
    
    
    <category term="模拟" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="ICEM" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/ICEM/"/>
    
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="ICEM" scheme="http://example.com/tags/ICEM/"/>
    
  </entry>
  
  <entry>
    <title>Python调用REFPROP</title>
    <link href="http://example.com/2024/06/29/023%20Python%E8%B0%83%E7%94%A8REFPROP/"/>
    <id>http://example.com/2024/06/29/023%20Python%E8%B0%83%E7%94%A8REFPROP/</id>
    <published>2024-06-29T12:30:00.000Z</published>
    <updated>2025-02-08T06:47:20.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-调用-refprop">python 调用 REFPROP</h1><h2 id="安装调试">1、安装调试</h2><ol type="1"><li>安装 refprop10</li><li>安装 python 库<code>pip install ctREFPROP</code></li></ol><p>测试使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> ctREFPROP.ctREFPROP <span class="hljs-keyword">import</span> REFPROPFunctionLibrary<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">NBP</span>():<br>    RP = REFPROPFunctionLibrary(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br>    RP.SETPATHdll(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br>    <span class="hljs-built_in">print</span>(RP.RPVersion())<br>    MOLAR_BASE_SI = RP.GETENUMdll(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;MOLAR BASE SI&quot;</span>).iEnum<br><br>    r = RP.REFPROPdll(<span class="hljs-string">&quot;PROPANE&quot;</span>,<span class="hljs-string">&quot;PQ&quot;</span>,<span class="hljs-string">&quot;T&quot;</span>,MOLAR_BASE_SI, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">101325</span>, <span class="hljs-number">0</span>, [<span class="hljs-number">1.0</span>])<br>    <span class="hljs-built_in">print</span>(r.ierr, r.herr, r.Output[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 路径</span><br>    os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>] = <span class="hljs-string">r&#x27;D:/REFPROP10&#x27;</span><br><br>    NBP()<br><br>&gt;&gt;<br><span class="hljs-number">10.0</span><br><span class="hljs-number">0</span>  <span class="hljs-number">231.0362479100902</span><br></code></pre></td></tr></table></figure><h2 id="基本语法">2、基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> ctREFPROP.ctREFPROP <span class="hljs-keyword">import</span> REFPROPFunctionLibrary<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_properties</span>():<br>    <span class="hljs-comment"># 初始化REFPROP</span><br>    RP = REFPROPFunctionLibrary(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br>    RP.SETPATHdll(os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>])<br><br>    <span class="hljs-comment"># 将单位设置为国际单位制（摩尔基准）</span><br>    MOLAR_BASE_SI = RP.GETENUMdll(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;MASS BASE SI&quot;</span>).iEnum<br><br>    <span class="hljs-comment"># 指定物质（氢）、计算类型（H为焓值，D为密度，S为熵值）</span><br>    substance = <span class="hljs-string">&quot;HYDROGEN&quot;</span><br><br>    <span class="hljs-comment"># 指定输入条件（温度、压力）</span><br>    temperature = <span class="hljs-number">298.15</span>  <span class="hljs-comment"># 单位：K</span><br>    pressure = <span class="hljs-number">101325</span>  <span class="hljs-comment"># 单位：Pa</span><br><br>    <span class="hljs-comment"># 调用REFPROPdll计算性质</span><br>    H_result = RP.REFPROPdll(substance, <span class="hljs-string">&quot;PT&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>,  MOLAR_BASE_SI, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pressure, temperature, [<span class="hljs-number">1.0</span>]) <span class="hljs-comment"># J/kg</span><br>    D_result = RP.REFPROPdll(substance, <span class="hljs-string">&quot;PT&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,  MOLAR_BASE_SI, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pressure, temperature, [<span class="hljs-number">1.0</span>]) <span class="hljs-comment"># kg/m3</span><br>    S_result = RP.REFPROPdll(substance, <span class="hljs-string">&quot;PT&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>,  MOLAR_BASE_SI, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pressure, temperature, [<span class="hljs-number">1.0</span>]) <span class="hljs-comment"># J/(kg·K)</span><br>    <span class="hljs-comment"># 检查是否有错误</span><br>    <span class="hljs-keyword">if</span> H_result.ierr == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> D_result.ierr == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> S_result.ierr == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算得到的H=:&quot;</span>,H_result.Output[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算得到的D=:&quot;</span>,D_result.Output[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算得到的S=:&quot;</span>,S_result.Output[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: <span class="hljs-subst">&#123;H_result.herr&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 路径</span><br>    os.environ[<span class="hljs-string">&#x27;RPPREFIX&#x27;</span>] = <span class="hljs-string">r&#x27;D:/REFPROP10&#x27;</span><br><br>    calculate_properties()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将REFPROP封装为python库方便调用物性参数</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="REFPROP" scheme="http://example.com/tags/REFPROP/"/>
    
  </entry>
  
  <entry>
    <title>React Native常遇问题</title>
    <link href="http://example.com/2024/06/29/022%20React%20Native%E5%B8%B8%E9%81%87%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/06/29/022%20React%20Native%E5%B8%B8%E9%81%87%E9%97%AE%E9%A2%98/</id>
    <published>2024-06-29T12:20:00.000Z</published>
    <updated>2025-02-08T06:47:20.941Z</updated>
    
    <content type="html"><![CDATA[<h2id="textinput聚焦弹起键盘">1、<code>TextInput</code>聚焦弹起键盘</h2><p>使用以下方式并不能直接弹起键盘，原因尚不清楚，可能是由于<code>setModalVisible</code>的异步性导致的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleModal</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">setModalVisible</span>(!isModalVisible);<br>  <span class="hljs-keyword">if</span> (!isModalVisible) &#123;<br>    inputRef?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">focus</span>();<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以变化一下思路，聚焦——&gt;失去焦点——&gt;聚焦，聚焦 10ms之后失去焦点，失去焦点触发<code>onBlur</code>函数后再聚焦</p><p>代码如下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleModal</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">setModalVisible</span>(!isModalVisible);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inputRef);<br>  <span class="hljs-keyword">if</span> (!isModalVisible) &#123;<br>    inputRef?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">focus</span>();<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title class_">Keyboard</span>.<span class="hljs-title function_">dismiss</span>();<br>    &#125;, <span class="hljs-number">10</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 输入框</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextInputonBlur</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">    inputRef?.current?.focus();</span><br><span class="language-xml">  &#125;&#125;</span><br><span class="language-xml">/&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>这里一定要使用<code>async</code>和<code>await</code></p></blockquote><h2 id="useref获取组件实例">2、<code>useRef</code>获取组件实例</h2><p>使用钩子<code>useRef</code>获取组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 创建useRef实例</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">textInput</span>: <span class="hljs-built_in">any</span> = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 挂在</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;textInput&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;searchText&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">onChangeText</span>=<span class="hljs-string">&#123;(text)</span> =&gt;</span> setSearchText(text)&#125;</span><br><span class="language-xml">/&gt;</span>;<br><br><span class="hljs-comment">// 获取组件实例</span><br>textInput?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">value</span>();<br></code></pre></td></tr></table></figure><h2 id="父组件调用子组件方法并传值">3、父组件调用子组件方法并传值</h2><ol type="1"><li>父子间挂在子组件</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">notionModalRef</span>:<span class="hljs-built_in">any</span> = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br><br>&lt;<span class="hljs-title class_">CreateNotionModal</span> props=&#123;&#123;toggleModal,isModalVisible,id&#125;&#125; ref=&#123;notionModalRef&#125;/&gt;<br></code></pre></td></tr></table></figure><p>其中<code>props</code>用于传递对象值，<code>ref</code>用于传递组件</p><ol start="2" type="1"><li>获取组件以及数据</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">&#123; props &#125;: <span class="hljs-built_in">any</span>, ref: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; notionModalRef &#125; = ref;<br>  <span class="hljs-keyword">const</span> &#123; toggleModal, isModalVisible, id &#125; = props;<br><br>  <span class="hljs-comment">// 子组件向父组件暴露方法</span><br>  <span class="hljs-title function_">useImperativeHandle</span>(notionModalRef, <span class="hljs-function">() =&gt;</span> (&#123;<br>    inputOnFocus,<br>  &#125;));<br><br>  <span class="hljs-comment">// 切换模态框</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">inputOnFocus</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.centeredView&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.modalView&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">multiline</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.input&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">maxLength</span>=<span class="hljs-string">&#123;1000&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">autoFocus</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;textInput&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            inputRef?.current?.focus();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">          onChangeText=&#123;(text) =&gt; setTextInput(text)&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.modalBtn&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              toggleModal();</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span> <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;&#125; &#125;&gt; */&#125;</span><br><span class="language-xml">            &#123;(&#123; pressed &#125;) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.cancel&#125;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span>&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Pressable</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;async</span> () =&gt;</span> &#123;</span><br><span class="language-xml">              setTextInput(await pasteFromClipboard(textInput));</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            &#123;(&#123; pressed &#125;) =&gt; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Ionicons</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;Colors.light.tint&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;clipboard-outline&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;30&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginRight:</span> <span class="hljs-attr">15</span>, <span class="hljs-attr">opacity:</span> <span class="hljs-attr">pressed</span> ? <span class="hljs-attr">0.5</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            )&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Pressable</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Pressable</span> <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;create&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;(&#123; pressed &#125;) =&gt; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Ionicons</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;Colors.light.tint&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;send-outline&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;30&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginRight:</span> <span class="hljs-attr">15</span>, <span class="hljs-attr">opacity:</span> <span class="hljs-attr">pressed</span> ? <span class="hljs-attr">0.5</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            )&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Pressable</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">  );</span><br><span class="language-xml">&#125;);</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>使用</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">notionModalRef?.<span class="hljs-property">current</span>?.<span class="hljs-title function_">inputOnFocus</span>();<br></code></pre></td></tr></table></figure><blockquote><p>我这里用到了<code>useState</code>的数据，注意状态变化，即组件是否显示与<code>notionModalRef?.current?.inputOnFocus()</code>的关系</p></blockquote><h2 id="expo-抽屉打开与关闭">4、expo 抽屉打开与关闭</h2><p>试了很多种方法，都是显示<code>closeDrawer</code>未定义</p><p>可以使用<code>@react-navigation/native</code>中的<code>DrawerActions</code>和<code>useNavigation</code>组合实现抽屉打开与关闭</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DrawerActions</span>, useNavigation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">CustomDrawer</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigation = <span class="hljs-title function_">useNavigation</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">tagRename</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    navigation.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title class_">DrawerActions</span>.<span class="hljs-title function_">closeDrawer</span>());<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="全局数据储存">5、全局数据储存</h2><p>使用<code>useContext</code>存储全局变量。</p><ol type="1"><li>首先创建<code>context</code>实例，对外暴露一个数据对象，里面可包含数值、函数等</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">SqliteType</span> = &#123;<br>  <span class="hljs-attr">db</span>: <span class="hljs-title class_">SQLite</span>.<span class="hljs-property">SQLiteDatabase</span> | <span class="hljs-literal">null</span> | <span class="hljs-built_in">any</span>;<br>  <span class="hljs-attr">openDb</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  <span class="hljs-attr">getDbFile</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  <span class="hljs-attr">exeSql</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>, data: <span class="hljs-built_in">any</span>[]</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SqliteContext</span> = createContext&lt;<span class="hljs-title class_">SqliteType</span>&gt;(&#123;<br>  <span class="hljs-attr">db</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">openDb</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>  <span class="hljs-attr">getDbFile</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>  <span class="hljs-attr">exeSql</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>创建提供者</li></ol><blockquote><p>这里使用<code>useRef</code>创建数据，使用<code>useState</code>在异步函数中会出现问题</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">SqliteProvider</span> = (<span class="hljs-params">&#123;children&#125;:PropsWithChildren</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> db = useRef&lt;<span class="hljs-literal">null</span>|<span class="hljs-title class_">SQLite</span>.<span class="hljs-property">SQLiteDatabase</span>&gt;(<span class="hljs-literal">null</span>)<br><br>    <span class="hljs-comment">// 打开数据库</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">openDb</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 获取远程db数据</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getDbFile</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 执行语句</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">exeSql</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"><span class="hljs-keyword">type</span>:<span class="hljs-built_in">string</span>,data:<span class="hljs-built_in">any</span>[]</span>) =&gt; &#123;<br><br>      &#125;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>对外暴露的数据</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">SqliteProvider</span> = (<span class="hljs-params">&#123;children&#125;:PropsWithChildren</span>) =&gt; &#123;<br>    ...<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SqliteContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;db,openDb,getDbFile,exeSql&#125;&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;children&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">SqliteContext.Provider</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>导出提供者及<code>useContext(SqliteContext)</code>实例</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">SqliteProvider</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useSqlite</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">SqliteContext</span>);<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>监听组件</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">RootLayoutNav</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SqliteProvider</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Stack</span> <span class="hljs-attr">screenOptions</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">headerShown:</span> <span class="hljs-attr">false</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Stack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;(drawer)&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">headerShown:</span> <span class="hljs-attr">false</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Stack</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">SqliteProvider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6" type="1"><li>使用</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> &#123; exeSql, getDbFile &#125; = <span class="hljs-title function_">useSqlite</span>();<br></code></pre></td></tr></table></figure><h2 id="sqlite实现增删改查">6、<code>sqlite</code>实现增删改查</h2><p>这里使用<code>execAsync</code>异步函数获取数据</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 执行语句</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">exeSql</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>, data: <span class="hljs-built_in">any</span>[]</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span> (db.<span class="hljs-property">current</span> == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库不存在&quot;</span>);<br>      <span class="hljs-title function_">openDb</span>();<br>    &#125;<br>    <span class="hljs-keyword">const</span> readOnly = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> db?.<span class="hljs-property">current</span><br>      ?.<span class="hljs-title function_">execAsync</span>([&#123; <span class="hljs-attr">sql</span>: sqls[<span class="hljs-keyword">type</span>], <span class="hljs-attr">args</span>: data &#125;], readOnly)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> data = result[<span class="hljs-number">0</span>]?.<span class="hljs-property">rows</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行结果&quot;</span>, result[<span class="hljs-number">0</span>]?.<span class="hljs-property">rows</span>);<br>        <span class="hljs-keyword">return</span> data;<br>      &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;An error occurred:&quot;</span>, error);<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllTags&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>这里封装一些<code>sql</code>语句</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">sqls</span>: <span class="hljs-built_in">any</span> = &#123;<br>  <span class="hljs-attr">searchAllNotions</span>: <span class="hljs-string">&quot;SELECT * FROM NOTIONS&quot;</span>,<br>  <span class="hljs-attr">insertNotion</span>:<br>    <span class="hljs-string">&quot;INSERT INTO NOTIONS (id,content,tag,create_time,update_time) VALUES (?, ?, ?, ?,?)&quot;</span>,<br>  <span class="hljs-attr">updateNotionById</span>:<br>    <span class="hljs-string">&quot;UPDATE notions SET content = ?,update_time = ? WHERE id = ?&quot;</span>,<br>  <span class="hljs-attr">searchNotionById</span>: <span class="hljs-string">&quot;SELECT content FROM notions WHERE id = ?&quot;</span>,<br>  <span class="hljs-attr">searchTagNameById</span>: <span class="hljs-string">&quot;SELECT name FROM tags WHERE id = ?&quot;</span>,<br>  <span class="hljs-attr">searchTagIdByName</span>: <span class="hljs-string">&quot;SELECT id FROM tags WHERE name = ?&quot;</span>,<br>  <span class="hljs-attr">searchChildrenTagsById</span>: <span class="hljs-string">&quot;SELECT name FROM tags WHERE father = ?&quot;</span>,<br>  <span class="hljs-attr">searchAllTags</span>: <span class="hljs-string">&quot;SELECT * FROM TAGS&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="dayjs简单使用">7、<code>dayjs</code>简单使用</h2><p>导入库</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br></code></pre></td></tr></table></figure><p>生成时间（毫秒）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">valueOf</span>();<br></code></pre></td></tr></table></figure><p>生成时间</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hour&quot;</span>).<span class="hljs-title function_">toISOString</span>();<br></code></pre></td></tr></table></figure><p>计算开始到现在的天数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><span class="hljs-keyword">import</span> relativeTime <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs/plugin/relativeTime&quot;</span>;<br><br>dayjs.<span class="hljs-title function_">extend</span>(relativeTime);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">dayjs</span>(created_at).<span class="hljs-title function_">fromNow</span>());<br></code></pre></td></tr></table></figure><h2 id="获取页面管线列表">8、获取页面管线列表</h2><p>当前页面处于的管线位置</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> segments = <span class="hljs-title function_">useSegments</span>() &gt; [<span class="hljs-string">&quot;(user)&quot;</span>, <span class="hljs-string">&quot;film&quot;</span>];<br></code></pre></td></tr></table></figure><h2 id="vscode-配置-prettier">9、vscode 配置 prettier</h2><p><ahref="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">prettier</a></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D prettier eslint-config-prettier eslint-plugin-prettier<br></code></pre></td></tr></table></figure><p>修改 vscode 设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;files.autoSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;onFocusChange&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 保存时自动格式化</span><br><span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;[typescript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;prettier.useEditorConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-comment">// 一定要取消，否则会使用vscode工作区设置，而不会使用.prettierrc.js</span><br></code></pre></td></tr></table></figure><p>在页面下新增文件<code>.prettierrc.js</code>，以下是我的默认配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> https://prettier.io/docs/en/options.html#print-width</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">lcm</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 换行宽度，当代码宽度达到多少时换行</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">printWidth</span>: <span class="hljs-number">80</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 缩进的空格数量</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> 2</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">tabWidth</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否使用制表符代替空格</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">useTabs</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否在代码块结尾加上分号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">true</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">semi</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否使用单引号替代双引号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 对象属性的引号处理</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;as-needed&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;as-needed&quot;|&quot;consistent&quot;|&quot;preserve&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">quoteProps</span>: <span class="hljs-string">&quot;as-needed&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * jsx中是否使用单引号替代双引号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">jsxSingleQuote</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 末尾是否加上逗号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;es5&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;es5&quot;|&quot;none&quot;|&quot;all&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">true</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">bracketSpacing</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 把多行HTML (HTML, JSX, Vue, Angular)元素的&gt;放在最后一行的末尾，而不是单独放在下一行(不适用于自关闭元素)。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">false</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">bracketSameLine</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当箭头函数只有一个参数是否加括号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;always&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;always&quot;|&quot;avoid&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">arrowParens</span>: <span class="hljs-string">&quot;avoid&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 为HTML、Vue、Angular和Handlebars指定全局空格敏感性</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;css&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;css&quot;|&quot;strict&quot;|&quot;ignore&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">htmlWhitespaceSensitivity</span>: <span class="hljs-string">&quot;ignore&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否缩进Vue文件中的&lt;script&gt;和&lt;style&gt;标记内的代码。有些人(比如Vue的创建者)不使用缩进来保存缩进级别，但这可能会破坏编辑器中的代码折叠。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;always&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;always&quot;|&quot;avoid&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">vueIndentScriptAndStyle</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 文件结束符</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> &quot;lf&quot;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">&quot;lf&quot;|&quot;crlf&quot;|&quot;cr&quot;|&quot;auto&quot;</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">endOfLine</span>: <span class="hljs-string">&quot;crlf&quot;</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">proseWrap</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>  <span class="hljs-comment">// 是否使用根目录下的EditorConfig配置文件</span><br>  <span class="hljs-attr">useEditorConfig</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * HTML\VUE\JSX每行只有单个属性</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@default</span> <span class="hljs-variable">true</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">singleAttributePerLine</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">disableLanguages</span>: [<span class="hljs-string">&quot;html&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>每次修改<code>.prettierrc.js</code>重启才能生效</p></blockquote><h2 id="解决异步获取数据组件不刷新">10、解决异步获取数据组件不刷新</h2><p>可以新增一个状态，数据加载时为<code>false</code>，加载成功后变为<code>true</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">setIsLodingData</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 设置加载状态为 true</span><br>  <span class="hljs-keyword">const</span> notionsPromise = <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllNotions&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> (res) =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchTagNameById&quot;</span>, [res[i].<span class="hljs-property">tag</span>]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res2</span>) =&gt;</span> &#123;<br>        res[i].<span class="hljs-property">tag</span> = res2[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> tagsPromise = <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllTags&quot;</span>, []);<br><br>  <span class="hljs-keyword">const</span> [notions, tags] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([notionsPromise, tagsPromise]);<br><br>  <span class="hljs-title function_">setAllNotions</span>(notions);<br>  <span class="hljs-title function_">setTags</span>(tags);<br>  <span class="hljs-title function_">setIsLodingData</span>(<span class="hljs-literal">false</span>);<br>&#125;;<br><br>&#123;<br>  <span class="hljs-comment">/* 数据展示卡片 */</span><br>&#125;<br>&#123;<br>  isLodingData ? (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ActivityIndicator</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">animating</span>=<span class="hljs-string">&#123;isLodingData&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;Colors.light.tint&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  ) : (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FlatList</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;notions.current&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">renderItem</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">item</span> &#125;) =&gt;</span> (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CartItem</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">cartType</span>=<span class="hljs-string">&#x27;show&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">notion</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">func</span>=<span class="hljs-string">&#123;getData&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      contentContainerStyle=&#123;&#123;</span><br><span class="language-xml">        gap: defalutSize,</span><br><span class="language-xml">        padding: defalutSize * 0.5,</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>getData</code>函数中有两个异步加载函数，为了提高获取数据的效率，可以同时异步加载数据，加载完成后再赋值</p></blockquote><p>之前的代码为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllNotions&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> res =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchTagNameById&quot;</span>,[res[i].<span class="hljs-property">tag</span>]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res2</span>)=&gt;</span>&#123;<br>        res[i].<span class="hljs-property">tag</span> = res2[<span class="hljs-number">0</span>].<span class="hljs-property">name</span><br>      &#125;)<br>    &#125;<br>    <span class="hljs-title function_">setAllNotions</span>(res);<br>  &#125;)<br><br>  &#125;);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchAllTags&quot;</span>, []).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> res =&gt; &#123;<br>    <span class="hljs-title function_">setTags</span>(res);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="useeffect-和-useref-区别">11、useEffect 和 useRef 区别</h2><h3 id="定义">11.1 定义</h3><ol type="1"><li><code>useEffect</code>：管理状态。管理函数组件的状态和更新状态，变化后重新渲染徐建。</li><li><code>useRef</code>：操作 DOM元素。用于函数式组件中访问的全局变量，而不必渲染组件。</li></ol><h2 id="返回页面刷新">12、返回页面刷新</h2><p>使用页面监听事件，监听<code>navigate</code>的值，一旦返回页面，<code>navigate</code>的值就会发生改变，从而触发刷新函数。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useNavigation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;expo-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> navigation = <span class="hljs-title function_">useNavigation</span>();<br><br><span class="hljs-comment">// 返回页面刷新</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> unsubscribe = navigation.<span class="hljs-title function_">addListener</span>(<span class="hljs-string">&quot;focus&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">onRefresh</span>();<br>  &#125;);<br>  <span class="hljs-keyword">return</span> unsubscribe;<br>&#125;, [navigation]);<br></code></pre></td></tr></table></figure><h2 id="provider-顺序问题">13、Provider 顺序问题</h2><p>在写简记软件时，将数据库操作和灵感都封装成了全局<code>provider</code>，在灵感里使用到数据库的相关操作。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// DataProvider</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateNotion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">textInput: <span class="hljs-built_in">string</span>, id: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;searchNotionById&quot;</span>, [id]).<span class="hljs-title function_">then</span>(<br>    <span class="hljs-keyword">async</span> (<span class="hljs-attr">searchNotionByIdRes</span>: <span class="hljs-built_in">any</span>) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (searchNotionByIdRes[<span class="hljs-number">0</span>]?.<span class="hljs-property">rows</span>[<span class="hljs-number">0</span>]?.<span class="hljs-property">content</span> === textInput) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">const</span> updata_time = <span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">valueOf</span>();<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">exeSql</span>(<span class="hljs-string">&quot;updateNotionById&quot;</span>, [textInput, updata_time, id]).<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>      );<br>    &#125;<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>在封装时需要将<code>DataProvider</code>放在<code>SqliteProvider</code>里面，不然在使用<code>DataProvider</code>时会找不到数据库，因为先加载的<code>DataProvider</code>时<code>SqliteProvider</code>还未加载。</p>]]></content>
    
    
    <summary type="html">在使用expo开发过程中经常会遇到一些问题，这里记录一下</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="前端" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ReactNative" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/ReactNative/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="React Native" scheme="http://example.com/tags/React-Native/"/>
    
    <category term="问题" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="软件开发" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="http://example.com/2024/06/29/021%20React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/06/29/021%20React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-29T12:10:00.000Z</published>
    <updated>2025-02-08T06:47:20.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装与使用">1、安装与使用</h2><ol type="1"><li>安装</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g create-react-app<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>创建项目</li></ol><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">myapp</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>开始运行 进入到根目录里，输入</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure><h2 id="初始-react">2、初始 React</h2><h3 id="基本流程">2.1 基本流程</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><br><span class="hljs-comment">// 渲染dom</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="基本-jsx-语法">2.2 基本 JSX 语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;app&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;appRoot&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个构建页面 UI 的库<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><blockquote><p>双音节要使用驼峰命名，如 className fontSize</p></blockquote><h3 id="class-组件">2.3 class 组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  a = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.ceshi(this.a)&#125;&gt;Click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  ceshi = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>函数的写法推荐箭头函数</p></blockquote><h3 id="函数组件">2.4 函数组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我来了<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>简写</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我来了<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><blockquote><p>组件名称一定要大写</p></blockquote><h3 id="组件样式">2.5 组件样式</h3><ol type="1"><li>行内样式</li></ol><ul><li>第一个括号表示里面写 js 表达式，第二个代表一个对象</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;p style=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;14px&quot;</span> &#125;&#125;&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>class 样式</li></ol><ul><li>要写成 className</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;p className=<span class="hljs-string">&#x27;hello&#x27;</span>&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><h3 id="事件处理">2.6 事件处理</h3><ol type="1"><li>绑定事件 onclick</li><li>推荐这种函数写法</li><li>event 事件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  a = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.ceshi(this.a)&#125;&gt;Click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  ceshi = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background-color:yellow"><strong>event事件</strong></span></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    a = &#123;<br>        <span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span><br>    &#125;;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;//这里箭头函数要传递参数，才能捕获到&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span>=&gt;</span>&#123;this.ceshi(e)&#125;&#125;&gt;Click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>    ceshi = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220515142102870.png"alt="image-20220515142102870" /><figcaption aria-hidden="true">image-20220515142102870</figcaption></figure><h3 id="ref-使用">2.7 Ref 使用</h3><ol type="1"><li>创建<code>myref = React.createRef()</code></li><li>绑定标签<code>ref=&#123;this.myref&#125;</code></li><li>使用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  a = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  &#125;;<br>  myref = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myref&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.ceshi(this.myref.current.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          click</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  ceshi = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>获取当前标签使用<code>this.myref.current</code></p></blockquote><h2 id="组件的数据挂载">3、组件的数据挂载</h2><h3 id="状态">3.1 状态</h3><p>状态就是组件描述某种显示情况的数据，由组件自己设置和更改，也就是说由组件自己维护，使用状态的目的就是为了在不同的状态下使组件的显示不同(自己管理)</p><ol type="1"><li>定义 state</li></ol><blockquote><p>直接定义，与 render()同一级</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 类组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;this.state.isLiked ? &quot;取消&quot; : &quot;收藏&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><blockquote><p>通过 constructor 初始化</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 类组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>      <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;this.state.isLiked ? &quot;取消&quot; : &quot;收藏&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改状态">3.2 修改状态</h3><ol type="1"><li>只能使用 setState 重新赋值</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>      <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ceshi</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>      &#125;);<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.ceshi();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;this.state.isLiked ? &quot;取消&quot; : &quot;收藏&quot;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>setState 是异步的，所以想要获取到最新的state，没有办法获取，就有了第二个参数，这是一个可选的回调函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">prevState, props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isLiked</span>: !prevState.<span class="hljs-property">isLiked</span><br>    &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;回调里的&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>)<br>    &#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setState外部的&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>)<br></code></pre></td></tr></table></figure><h3 id="列表渲染">3.3 列表渲染</h3><ol type="1"><li>使用 map 循环</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">lists</span>: [<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.lists.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以往的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-string">`&lt;li&gt;&#123;$item&#125;&lt;/li&gt;`</span>);<br></code></pre></td></tr></table></figure><blockquote><p>这里是 react 的 jsx 语法，所以不用加引号</p></blockquote><h3 id="todolist">3.4 TodoList</h3><p>添加</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">add = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(value);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-attr">lists</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>不能写成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">add = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-attr">lists</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(value),<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>因为 push 方法改变的是原数组，而没有返回值</p><p>代码</p><ol type="1"><li>使用 push 方法追加，改变原数组</li><li>使用 splice 删除，改变原数组</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  myref = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  state = &#123;<br>    <span class="hljs-attr">lists</span>: [<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>],<br>  &#125;;<br>  add = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">push</span>(value);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>      &#123;<br>        <span class="hljs-attr">lists</span>: newList,<br>      &#125;,<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">myref</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 置空</span><br>      &#125;<br>    );<br>  &#125;;<br>  <span class="hljs-keyword">delete</span> = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>      &#123;<br>        <span class="hljs-attr">lists</span>: newList,<br>      &#125;,<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>      &#125;<br>    );<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myref&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.add(this.myref.current.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          Add</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.lists.map((item, index) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">              &#123;item&#125;&#123;&quot; &quot;&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                  this.delete(index);</span><br><span class="language-xml">                &#125;&#125;</span><br><span class="language-xml">              &gt;</span><br><span class="language-xml">                delete</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="条件渲染">3.5 条件渲染</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>暂无待办事项<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> : <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>暂无待办事项<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">.<span class="hljs-property">active</span>&#123;<br>    <span class="hljs-attr">display</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div className=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>.<span class="hljs-property">length</span> != <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-string">&quot;active&quot;</span>&#125;&gt;暂无带吧&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="状态再体验">3.6 状态再体验</h3><ol type="1"><li>setState 函数异步</li></ol><p>在异步逻辑中，是同步更新状态，更新真实 dom</p><p>在同步逻辑中，是异步更新状态，更新真实 dom</p><ol start="2" type="1"><li>setState 回调函数</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>  &#123;<br>    <span class="hljs-attr">lists</span>: newList,<br>  &#125;,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myref</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="属性初试">3.7 属性初试</h3><ol type="1"><li>在组件上写<code>key=‘value’</code>形式，在组件内部用<code>this.props</code>接收;</li><li>属性是描述性质、特点的，组件自己不能随意更改；</li></ol><p><span style="background-color:yellow"><strong>1</strong></span></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;// 传入&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">NavaBar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;导航栏&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NavaBar</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavaBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 接受</span><br>    <span class="hljs-keyword">let</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavaBar - &#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性验证">3.8 属性验证</h3><p>在组件内部</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavaBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">title</span>: kerwinPropTypes.<span class="hljs-property">string</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavaBar - &#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="默认属性">3.9 默认属性</h3><p>在组件内部</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavaBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-keyword">static</span> defaultProps = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;我是&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavaBar - &#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2id="表单中的受控组件与非受控组件">4、表单中的受控组件与非受控组件</h2><h3 id="非受控组件">4.1 非受控组件</h3><ol type="1"><li>React 要编写一个非受控组件，可以 使用 ref 来从 DOM节点中获取表单数据，就是非受控组件。</li><li>比如在使用 input 输入框获取输入框内容时，是通过操作原生 DOM节点来获取的，不受控制；</li></ol><figure><imgsrc="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220515182305778.png"alt="image-20220515182305778" /><figcaption aria-hidden="true">image-20220515182305778</figcaption></figure><p>只能使用<code>defaultValue</code></p><h3 id="受控">4.2 受控</h3><ol type="1"><li>通过 value 动态绑定状态，这里可以把 input 标签看成一个组件；</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">usename</span>: <span class="hljs-string">&quot;我是大傻逼&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.usename&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              usename: e.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(this.state.usename);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          登录</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              usename: &quot;&quot;,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h3 id="受控应用-1">4.3 受控应用 1</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">inputValue</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">cinma</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;c&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;d&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.inputValue&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              inputValue: e.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        &#123;this.getList().map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">cinma</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>      item.<span class="hljs-property">name</span><br>        .<span class="hljs-title function_">toUpperCase</span>()<br>        .<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">inputValue</span>.<span class="hljs-title function_">toLocaleUpperCase</span>())<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h3 id="todolist-受控">4.4 todoList 受控</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">inputValue</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">lists</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>        <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>        <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;c&quot;</span>,<br>        <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100000</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">inputValue</span>,<br>      <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span>,<br>    &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">lists</span>: newList,<br>      <span class="hljs-attr">inputValue</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">delete</span> = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> newList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>;<br>    newList.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">lists</span>: newList,<br>    &#125;);<br>  &#125;;<br>  handchange = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);<br>    <span class="hljs-keyword">let</span> newList = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">lists</span>];<br>    newList[index].<span class="hljs-property">isChecked</span> = !newList[index].<span class="hljs-property">isChecked</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">lists</span>: newList,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.inputValue&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              inputValue: e.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.add();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          Add</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.lists.map((item, index) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;checkbox&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;item.isChecked&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                  this.handchange(index);</span><br><span class="language-xml">                &#125;&#125;</span><br><span class="language-xml">              &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textDecoration:</span> <span class="hljs-attr">item.isChecked</span> ? &quot;<span class="hljs-attr">line-through</span>&quot; <span class="hljs-attr">:</span> &quot;&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              &gt;</span></span><br><span class="language-xml">                &#123;item.name&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                  this.delete(index);</span><br><span class="language-xml">                &#125;&#125;</span><br><span class="language-xml">              &gt;</span><br><span class="language-xml">                delete</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.lists.length == 0 &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>暂无待办事项<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组件通信方式">5、组件通信方式</h2><h3 id="子传父">5.1 子传父</h3><ol type="1"><li>子组件不能直接访问父组件的状态，但是可以通过回调函数通知父组件改变状态；</li><li>孩子不能动父亲手里的钱，但是孩子可以打电话给父亲，让父亲发钱；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br><br>class NavBar extends Component&#123;<br>    render()&#123;<br>        return(<br>            &lt;div&gt;我是导航栏<br>                &lt;button onClick=&#123;()=&gt;&#123;<br>                    this.props.isShowList();<br>                &#125;&#125;&gt;点我&lt;/button&gt;<br><br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><br>class ListBar extends Component&#123;<br>    render()&#123;<br>        return(<br>            &lt;div&gt;<br>                &lt;ul style=&#123;&#123;backgroundColor:&#x27;yellow&#x27;,width:&#x27;200px&#x27;&#125;&#125;&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                    &lt;li&gt;1&lt;/li&gt;<br>                &lt;/ul&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><br><br><br>export default class App extends Component &#123;<br>  state = &#123;<br>    isShow:true<br>  &#125;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>          &lt;NavBar isShowList=&#123;()=&gt;&#123;<br>              this.setState(&#123;<br>                  isShow:!this.state.isShow<br>              &#125;)<br>          &#125;&#125;&gt;&lt;/NavBar&gt;<br>          &#123;this.state.isShow &amp;&amp; &lt;ListBar&gt;&lt;/ListBar&gt;&#125;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="中间人">5.2 中间人</h3><figure><imgsrc="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220517230844506.png"alt="image-20220517230844506" /><figcaption aria-hidden="true">image-20220517230844506</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br>import axios from &#x27;axios&#x27;<br>import &#x27;./06-index.css&#x27;<br><br>export default class App extends Component &#123;<br>    constructor()&#123;<br>        super()<br>        this.state=&#123;<br>            filmList:[],<br>            detail:&quot;&quot;<br>        &#125;<br>        axios.get(`../text.json`).then(res=&gt;&#123;<br>            console.log(res.data.data)<br>            this.setState(&#123;<br>                filmList:res.data.data<br>            &#125;)<br>        &#125;)<br>    &#125;<br><br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>          &#123;<br>              this.state.filmList.map(item=&gt;&lt;Film key=&#123;item.id&#125; &#123;...item&#125; onEvent=&#123;(value)=&gt;&#123;<br>                this.setState(&#123;<br>                    detail:value<br>                &#125;)<br>              &#125;&#125;&gt;&lt;/Film&gt;)<br>          &#125;<br>          &lt;FilmDetial detail=&#123;this.state.detail&#125;&gt;&lt;/FilmDetial&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><br>class Film extends Component&#123;<br>    render()&#123;<br><br>        let &#123;name,src,detail&#125; = this.props<br>        return &lt;div className=&#x27;filmitem&#x27; onClick=&#123;()=&gt;&#123;<br>            this.props.onEvent(detail)<br>        &#125;&#125;&gt;<br>            &lt;img src=&#123;src&#125; alt=&#123;name&#125;&gt;&lt;/img&gt;<br>            &#123;this.props.name&#125;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br><br><br>class FilmDetial extends Component&#123;<br>    render()&#123;<br>        return &lt;div className=&#x27;filmdetail&#x27;&gt;<br>            &#123;this.props.detail&#125;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子传父表单">5.3 子传父表单</h3><ol type="1"><li>子组件输入框动态绑定父组件上的状态值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br><br>export default class App extends Component &#123;<br>    state = &#123;<br>        name:&#x27;小明&#x27;,<br>        password:&#x27;123456&#x27;<br>    &#125;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;h2&gt;登录页面&lt;/h2&gt;<br>        &lt;Filed lable = &quot;用户名&quot; type = &quot;text&quot; value = &#123;this.state.name&#125; onEvent=&#123;(value)=&gt;&#123;<br>            this.setState(&#123;<br>                name:value<br>            &#125;)<br>        &#125;&#125;/&gt;<br>        &lt;Filed lable = &quot;密码&quot; type = &quot;password&quot; value = &#123;this.state.password&#125; onEvent=&#123;(value)=&gt;&#123;<br>            this.setState(&#123;<br>                password:value<br>            &#125;)<br>        &#125;&#125;/&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            console.log(this.state.name,this.state.password);<br>        &#125;&#125;&gt;登录&lt;/button&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            this.setState(&#123;<br>                name:&#x27;&#x27;,<br>                password:&#x27;&#x27;<br>            &#125;)<br>        &#125;&#125;&gt;取消&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>class Filed extends Component&#123;<br>    render()&#123;<br>        let &#123;lable,type,onEvent,value&#125; = this.props<br>        return(<br>        &lt;div&gt;<br>            &lt;span&gt;&#123;lable&#125;&lt;/span&gt;<br>            &lt;input type=&#123;type&#125; value=&#123;value&#125; onChange=&#123;(e)=&gt;&#123;<br>                onEvent(e.target.value)<br>            &#125;&#125;&gt;&lt;/input&gt;<br>        &lt;/div&gt;<br>    )&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="ref-表单">5.4 ref 表单</h3><ol type="1"><li>在组件上挂载 ref 可以获得组件；</li><li>父组件给子组件挂载 ref 可以拿到子组件的<code>dom</code>；</li><li>子组件内部自己设置状态和绑定 value 值；</li><li>通过点击按钮<code>this.username.current</code>获取组件标签；</li><li>就可以拿到子组件内的状态和函数（清空函数在子组件自己内部）；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123; Component &#125; from &#x27;react&#x27;<br><br>export default class App extends Component &#123;<br>    username = React.createRef();<br>    password = React.createRef();<br><br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;h2&gt;登录页面&lt;/h2&gt;<br>        &#123;/* 这里使用ref能拿到组件标签 */&#125;<br>        &lt;Filed lable = &quot;用户s名&quot; type = &quot;text&quot; ref=&#123;this.username&#125;/&gt;<br>        &lt;Filed lable = &quot;密码&quot; type = &quot;password&quot; ref=&#123;this.password&#125;/&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            console.log(this.username.current.state.value);<br>            console.log(this.password.current.state.value);<br>        &#125;&#125;&gt;登录&lt;/button&gt;<br>        &lt;button onClick=&#123;()=&gt;&#123;<br>            this.username.current.clear()<br>            this.password.current.clear()<br>        &#125;&#125;&gt;取消&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>class Filed extends Component&#123;<br>    state = &#123;<br>        value:&quot;&quot;<br>    &#125;<br>    clear()&#123;<br>        // 虽然这个函数能执行，但是并没有使render重新执行<br>        // 需要加将input输入框绑定value<br>        this.setState(&#123;<br>            value:&quot;&quot;<br>        &#125;)<br>    &#125;<br>    render()&#123;<br>        let &#123;lable,type&#125; = this.props<br>        return(<br>        &lt;div&gt;<br>            &lt;span&gt;&#123;lable&#125;&lt;/span&gt;<br>            &lt;input type=&#123;type&#125; value=&#123;this.state.value&#125; onChange=&#123;(e)=&gt;&#123;<br>                console.log(e.target.value);<br>                this.setState(&#123;<br>                    value:e.target.value<br>                &#125;)<br>            &#125;&#125;&gt;&lt;/input&gt;<br>        &lt;/div&gt;<br>    )&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>子组件内的输入框要与自己的状态 value 绑定，否则执行 clear函数不会触发 render()</p></blockquote><h2 id="hooks">6、Hooks</h2><ol type="1"><li>高阶组件为了复用，导致代码层级复杂</li><li>生命周期的复杂</li><li>写成 functional 组件,无状态组件 ，因为需要状态，又改成了class,成本高</li></ol><h3 id="usestate">6.1 <code>useState</code></h3><ol type="1"><li><code>[a,b] = arr;</code>此时 arr 是一个数组，解构赋值；</li><li>使用<code>useState</code>会返回一个数组，里面有一个值和函数；</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [username, setusername] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;mtl&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setusername(&quot;大白&quot;);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;username&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>重写 todolist</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">APP</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>([<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]); <span class="hljs-comment">//初始列表值</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 结构列表并添加新值</span><br>    <span class="hljs-title function_">setList</span>([...list, text]);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">del</span> = (<span class="hljs-params">index</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);<br>    <span class="hljs-comment">// 不要直接更改原数组，创建一个新数组</span><br>    <span class="hljs-keyword">const</span> newlist = [...list];<br>    <span class="hljs-comment">// 删除索引位置1个元素</span><br>    newlist.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">setList</span>(newlist);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setText(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          add();</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        add</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;list.map((item, index) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                del(index);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              del</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">React学习笔记，包含基本概念、组件（受控组件和非受控组件），组件通信等</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="前端" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Google搜索技巧</title>
    <link href="http://example.com/2024/06/28/026%20Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2024/06/28/026%20Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</id>
    <published>2024-06-28T12:42:00.000Z</published>
    <updated>2025-02-08T06:50:21.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谷歌搜索关键词">1、谷歌搜索关键词</h2><ol type="1"><li>限定关键词 ""</li><li>限定标题 inltitle:</li><li>限定内容 intext</li><li>限定网址 inurl</li><li>限定网站 site</li><li>限定图片大小 imagesize</li><li>限定文件类型 filetype</li></ol><h2 id="下载油管视频">2、下载油管视频</h2><p>在视频网址前加上 9x</p>]]></content>
    
    
    <summary type="html">Google搜索技巧</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="搜索技巧" scheme="http://example.com/tags/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    
    <category term="google" scheme="http://example.com/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>Fluent中的浮力模型</title>
    <link href="http://example.com/2024/06/25/019%20Fluent%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%9B%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2024/06/25/019%20Fluent%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%9B%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-06-25T02:23:00.000Z</published>
    <updated>2025-02-08T06:47:20.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fluent-中的浮力模型">Fluent 中的浮力模型</h1><h2 id="基本概念">1、基本概念</h2><p>当计算域开启重力场和能量场时，可在<code>ke</code>模型中考虑浮力的产生。</p><p>由于浮力而产生的湍流公式：</p><p><span class="math display">\[G_b=\betag_i\frac{\mu_t}{\mathrm{Pr}_t}\frac{\partial T}{\partialx_i}\]</span></p><p>其中<spanclass="math inline">\(Pr_{t}\)</span>是能量的湍流普朗特数，<spanclass="math inline">\(g_{i}\)</span>是重力矢量在<spanclass="math inline">\(i\)</span>方向上的分量。对于标准和可实现<code>ke</code>模型，<spanclass="math inline">\(Pr_{t}=0.85\)</span>。在<code>RNG ke</code>模型，$Pr_{t}=<span class="math inline">\(。其中\)</span>$由以下公式计算：</p><p><spanclass="math display">\[\left|\frac{\alpha-1.3929}{\alpha_0-1.3929}\right|^{0.6321}\left|\frac{\alpha+2.3929}{\alpha_0+2.3929}\right|^{0.3679}=\frac{\mu_{\mathrm{mol}}}{\mu_{\mathrm{eff}}}\]</span></p><p>其中<spanclass="math inline">\(\alpha_{0}=1.0\)</span>，在高雷诺数限制下，<spanclass="math inline">\(\mu_{\mathrm{mol}}/\mu_{\mathrm{eff}}\ll1\)</span>，<spanclass="math inline">\(\alpha_{k}=\alpha_{\epsilon}\approx1.393\)</span></p><p>系数$$定义为</p><p><spanclass="math display">\[\beta=-\frac1\rho\left(\frac{\partial\rho}{\partialT}\right)_p\]</span></p><p>对于理想气体状态方程：</p><p><spanclass="math display">\[G_b=-g_i\frac{\mu_t}{\rho\mathrm{Pr}_t}\frac{\partial\rho}{\partialx_i}\]</span></p><blockquote><p>在不稳定分层中，湍动能趋于增大。对于不稳定的分层，浮力会抑制湍流。</p></blockquote><p>受浮力影响程度由常数<span class="math inline">\(C_{3\epsilon}\)</span>决定，在 Fluent 中可通过以下公式计算</p><p><spanclass="math display">\[C_{3\epsilon}=\tanh\left|\frac{v}{u}\right|\]</span></p><p><spanclass="math inline">\(v\)</span>是平行于重力矢量的流速分量，<spanclass="math inline">\(u\)</span>是垂直于重力矢量的流速分量。对于主流方向与重力方向一致的浮力剪切层，该常数为1。对于垂直于重力矢量的浮力剪切层，该值为 0。</p><h2 id="如何操作">2、如何操作</h2><p>开启重力加速度和能量方程，即可在<code>ke</code>模型中设置全浮力模型。</p><p><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240625092823.png" /></p>]]></content>
    
    
    <summary type="html">Fluent中的浮力模型</summary>
    
    
    
    <category term="模拟" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="Fluent" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F/Fluent/"/>
    
    
    <category term="Fluent" scheme="http://example.com/tags/Fluent/"/>
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器</title>
    <link href="http://example.com/2024/04/25/018%20Python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2024/04/25/018%20Python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2024-04-25T08:41:00.000Z</published>
    <updated>2025-02-08T06:47:20.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器定义">1、装饰器定义</h1><p>函数本身也是对象，能赋值给变量，通过变量名称可以调用函数的功能。此外能通过<code>__name__</code>属性拿到函数的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br><br>f1 = fun1<br>f1.__name__<br><span class="hljs-comment"># &#x27;fun1&#x27;</span><br></code></pre></td></tr></table></figure><p>装饰器是在不改变原函数条件下，为原函数调用前增加新的功能。装饰器其实是一个高阶函数，高阶函数<code>hightfunc</code>接受一个函数对象<code>func</code>，在高阶函数内部定义一个新的函数<code>wrapper</code>，新的函数<code>wrapper</code>在调用<code>func</code>函数对象前后执行一定的操作，之后返回<code>func</code>，整个告诫高阶函数再返回<code>wrapper</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;call <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> func<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br><br>log(fun1)()<br></code></pre></td></tr></table></figure><p>写成语法糖的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;call <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> func<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@log</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br><br>fun1()<br></code></pre></td></tr></table></figure><h1 id="装饰器有参函数无参">2、装饰器有参函数无参</h1><p>使用装饰器时，传入变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">level=<span class="hljs-string">&#x27;debug&#x27;</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>            func()<br>            <span class="hljs-keyword">if</span> level == <span class="hljs-string">&#x27;warning&#x27;</span>:<br>                logging.warning(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">else</span>:<br>                logging.debug(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">return</span> func<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@log(<span class="hljs-params">level=<span class="hljs-string">&quot;warning&quot;</span></span>) </span><span class="hljs-comment"># 添加带参数的装饰器 log()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func()调用了&quot;</span>)<br><br>func()<br><br><span class="hljs-comment"># WARNING:root:func is called</span><br><span class="hljs-comment"># func()调用了</span><br></code></pre></td></tr></table></figure><h1 id="装饰器和函数均有参">3、装饰器和函数均有参</h1><p>需要使用<code>*args, **kwargs</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">level=<span class="hljs-string">&#x27;debug&#x27;</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            ret = func(*args, **kwargs)<br>            <span class="hljs-keyword">if</span> level == <span class="hljs-string">&#x27;warning&#x27;</span>:<br>                logging.warning(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">else</span>:<br>                logging.debug(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">return</span> ret<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@log(<span class="hljs-params">level=<span class="hljs-string">&quot;warning&quot;</span></span>) </span><span class="hljs-comment"># 添加带参数的装饰器 log()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n,m</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;from func(), n=<span class="hljs-subst">&#123;n&#125;</span>,m=<span class="hljs-subst">&#123;m&#125;</span>&quot;</span>)<br><br>func(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>对于<code>*args, **kwargs</code>我了解的还不多，这里不做过多介绍。</p><ul><li><code>*args (Non-Keyword Arguments)</code>相当于列表<code>['Hello'``, ``'Welcome'``, ``'to'``, ``'GeeksforGeeks']</code></li><li><code>**kwargs (Keyword Arguments)</code>相当于字典<code>&#123;first='Geeks', mid='for', last='Geeks'&#125;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># *args</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;Pomelo&quot;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*argv</span>):<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> argv:<br>        <span class="hljs-built_in">print</span>(arg+<span class="hljs-string">&quot; &quot;</span>)<br>func(*<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># apple</span><br><span class="hljs-comment"># banana</span><br><span class="hljs-comment"># Pomelo</span><br><br><span class="hljs-comment"># **kwargs</span><br>dic = &#123;<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;Pomelo&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(key+<span class="hljs-string">&quot;=&quot;</span>+value)<br>func(**dic)<br><span class="hljs-comment"># 1=apple</span><br><span class="hljs-comment"># 2=banana</span><br><span class="hljs-comment"># 3=Pomelo</span><br><br><br><span class="hljs-comment"># *args,**kwargs</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;Pomelo&quot;</span>]<br>dic = &#123;<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;Pomelo&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*argv,**kwargs</span>):<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> argv:<br>        <span class="hljs-built_in">print</span>(arg+<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(key+<span class="hljs-string">&quot;=&quot;</span>+value)<br>func(*<span class="hljs-built_in">list</span>,**dic)<br><span class="hljs-comment"># apple</span><br><span class="hljs-comment"># banana</span><br><span class="hljs-comment"># Pomelo</span><br><span class="hljs-comment"># 1=apple</span><br><span class="hljs-comment"># 2=banana</span><br><span class="hljs-comment"># 3=Pomelo</span><br></code></pre></td></tr></table></figure><h1 id="类方法装饰器">4、类方法装饰器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        start_time = time.time()<br>        ret = func(self, *args, **kwargs)<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s.%s() cost %f second!&quot;</span> % (self.__class__,<br>              func.__name__, end_time - start_time))<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDecorator</span>():<br><span class="hljs-meta">    @decorator</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mysleep</span>(<span class="hljs-params">self, n</span>):<br>        time.sleep(n)<br><br>obj = TestDecorator()<br>obj.mysleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="装饰器类">5、装饰器类</h1><p>会调用<code>__init__</code>和<code>__call__</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tracer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        self.func = func<br>        self.calls = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        self.calls += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call %s() %d times&quot;</span> % (self.func.__name__, self.calls))<br>        <span class="hljs-keyword">return</span> self.func(*args, **kwargs)<br><br><span class="hljs-meta">@Tracer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tracer</span>(<span class="hljs-params">val, name=<span class="hljs-string">&quot;default&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func() name:%s, val: %d&quot;</span> % (name, val))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    test_tracer(i, name=(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-built_in">str</span>(i)))<br><br>&gt;&gt;&gt;<br>call test_tracer() <span class="hljs-number">1</span> times<br>func() name:name0, val: <span class="hljs-number">0</span><br>call test_tracer() <span class="hljs-number">2</span> times<br>func() name:name1, val: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="带参数装饰器类">6、 带参数装饰器类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tracer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, arg0</span>): <span class="hljs-comment"># 可支持任意参数</span><br>        self.arg0 = arg0<br>        self.calls = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            self.calls += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arg0:%d call %s() %d times&quot;</span> % (self.arg0, func.__name__, self.calls))<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@Tracer(<span class="hljs-params">arg0=<span class="hljs-number">0</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tracer</span>(<span class="hljs-params">val, name=<span class="hljs-string">&quot;default&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func() name:%s, val: %d&quot;</span> % (name, val))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    test_tracer(i, name=(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-built_in">str</span>(i)))<br><br>&gt;&gt;&gt;<br>arg0:<span class="hljs-number">0</span> call test_tracer() <span class="hljs-number">1</span> times<br>func() name:name0, val: <span class="hljs-number">0</span><br>arg0:<span class="hljs-number">0</span> call test_tracer() <span class="hljs-number">2</span> times<br>func() name:name1, val: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="内置装饰器">7、内置装饰器</h1><h2 id="staticmethod">7.1 staticmethod</h2><p>类的静态函数装饰器，可通过类名直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>():<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">static_method</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a static method!&quot;</span>)<br><br>C.static_method()     <span class="hljs-comment"># 类名直接调用</span><br><br>c = C()<br>c.static_method()     <span class="hljs-comment"># 类对象调用</span><br><br>&gt;&gt;&gt;<br>This <span class="hljs-keyword">is</span> a static method!<br>This <span class="hljs-keyword">is</span> a static method!<br></code></pre></td></tr></table></figure><h2 id="classmethod">7.2 classmethod</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>():<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">class_method</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is &quot;</span>, cls)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">C</span>):<br>  <span class="hljs-keyword">pass</span><br><br>C.class_method()  <span class="hljs-comment"># 类名直接调用</span><br>c = C()<br>c.class_method()  <span class="hljs-comment"># 类对象调用</span><br><br>B.class_method()  <span class="hljs-comment"># 继承类调用</span><br><br>&gt;&gt;&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.C&#x27;</span>&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.C&#x27;</span>&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.B&#x27;</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">python装饰器使用</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="装饰器" scheme="http://example.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python常用技巧</title>
    <link href="http://example.com/2024/04/24/017%20Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/"/>
    <id>http://example.com/2024/04/24/017%20Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/</id>
    <published>2024-04-24T15:28:00.000Z</published>
    <updated>2025-02-08T06:47:20.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推导式">1、推导式</h1><p>推导式又叫做解析式，是简化冗余代码实质有效的方法，<code>Python</code>中实用的语法糖，可以分为以下几类：</p><ol type="1"><li>列表推导式（⭐）</li><li>字典推导式（⭐）</li><li>集合推导式</li><li>元祖推导式</li></ol><p>下面只介绍常用的列表推导式和字典推导式。</p><h2 id="列表推导式">1.1 列表推导式</h2><p>对列表中每个元素进行一定操作。</p><p>基本使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br>list1 = [x+<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>]<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment"># [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span><br></code></pre></td></tr></table></figure><p>条件表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>list1 = [name+<span class="hljs-string">&quot;666&quot;</span> <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) &gt; <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment"># [&#x27;Jason666&#x27;, &#x27;Peter666&#x27;, &#x27;Jani666&#x27;]</span><br></code></pre></td></tr></table></figure><p>多个 for 循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">time = [<span class="hljs-string">&#x27;%.2d:%.2d&#x27;</span>%(h,m )<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>) <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">5</span>) ]<br><span class="hljs-built_in">print</span>(time)<br><span class="hljs-comment"># [&#x27;00:00&#x27;, &#x27;00:05&#x27;, &#x27;00:10&#x27;, &#x27;00:15&#x27;, &#x27;00:20&#x27;, &#x27;00:25&#x27;, &#x27;00:30&#x27;, &#x27;00:35&#x27;, &#x27;00:40&#x27;, &#x27;00:45&#x27;, &#x27;00:50&#x27;, &#x27;00:55&#x27;, &#x27;01:00&#x27;, &#x27;01:05&#x27;, &#x27;01:10&#x27;, &#x27;01:15&#x27;, &#x27;01:20&#x27;, &#x27;01:25&#x27;, &#x27;01:30&#x27;, &#x27;01:35&#x27;, &#x27;01:40&#x27;, &#x27;01:45&#x27;, &#x27;01:50&#x27;, &#x27;01:55&#x27;, &#x27;02:00&#x27;, &#x27;02:05&#x27;, &#x27;02:10&#x27;, &#x27;02:15&#x27;, &#x27;02:20&#x27;, &#x27;02:25&#x27;, &#x27;02:30&#x27;, &#x27;02:35&#x27;, &#x27;02:40&#x27;, &#x27;02:45&#x27;, &#x27;02:50&#x27;, &#x27;02:55&#x27;, &#x27;03:00&#x27;, &#x27;03:05&#x27;, &#x27;03:10&#x27;, &#x27;03:15&#x27;, &#x27;03:20&#x27;, &#x27;03:25&#x27;, &#x27;03:30&#x27;, &#x27;03:35&#x27;, &#x27;03:40&#x27;, &#x27;03:45&#x27;, &#x27;03:50&#x27;, &#x27;03:55&#x27;, &#x27;04:00&#x27;, &#x27;04:05&#x27;, &#x27;04:10&#x27;, &#x27;04:15&#x27;, &#x27;04:20&#x27;, &#x27;04:25&#x27;, &#x27;04:30&#x27;, &#x27;04:35&#x27;, &#x27;04:40&#x27;, &#x27;04:45&#x27;, &#x27;04:50&#x27;, &#x27;04:55&#x27;, &#x27;05:00&#x27;, &#x27;05:05&#x27;, &#x27;05:10&#x27;, &#x27;05:15&#x27;, &#x27;05:20&#x27;, &#x27;05:25&#x27;, &#x27;05:30&#x27;, &#x27;05:35&#x27;, &#x27;05:40&#x27;, &#x27;05:45&#x27;, &#x27;05:50&#x27;, &#x27;05:55&#x27;, &#x27;06:00&#x27;, &#x27;06:05&#x27;, &#x27;06:10&#x27;, &#x27;06:15&#x27;, &#x27;06:20&#x27;, &#x27;06:25&#x27;, &#x27;06:30&#x27;, &#x27;06:35&#x27;, &#x27;06:40&#x27;, &#x27;06:45&#x27;, &#x27;06:50&#x27;, &#x27;06:55&#x27;, &#x27;07:00&#x27;, &#x27;07:05&#x27;, &#x27;07:10&#x27;, &#x27;07:15&#x27;, &#x27;07:20&#x27;, &#x27;07:25&#x27;, &#x27;07:30&#x27;, &#x27;07:35&#x27;, &#x27;07:40&#x27;, &#x27;07:45&#x27;, &#x27;07:50&#x27;, &#x27;07:55&#x27;, &#x27;08:00&#x27;, &#x27;08:05&#x27;, &#x27;08:10&#x27;, &#x27;08:15&#x27;, &#x27;08:20&#x27;, &#x27;08:25&#x27;, &#x27;08:30&#x27;, &#x27;08:35&#x27;, &#x27;08:40&#x27;, &#x27;08:45&#x27;, &#x27;08:50&#x27;, &#x27;08:55&#x27;, &#x27;09:00&#x27;, &#x27;09:05&#x27;, &#x27;09:10&#x27;, &#x27;09:15&#x27;, &#x27;09:20&#x27;, &#x27;09:25&#x27;, &#x27;09:30&#x27;, &#x27;09:35&#x27;, &#x27;09:40&#x27;, &#x27;09:45&#x27;, &#x27;09:50&#x27;, &#x27;09:55&#x27;, &#x27;10:00&#x27;, &#x27;10:05&#x27;, &#x27;10:10&#x27;, &#x27;10:15&#x27;, &#x27;10:20&#x27;, &#x27;10:25&#x27;, &#x27;10:30&#x27;, &#x27;10:35&#x27;, &#x27;10:40&#x27;, &#x27;10:45&#x27;, &#x27;10:50&#x27;, &#x27;10:55&#x27;, &#x27;11:00&#x27;, &#x27;11:05&#x27;, &#x27;11:10&#x27;, &#x27;11:15&#x27;, &#x27;11:20&#x27;, &#x27;11:25&#x27;, &#x27;11:30&#x27;, &#x27;11:35&#x27;, &#x27;11:40&#x27;, &#x27;11:45&#x27;, &#x27;11:50&#x27;, &#x27;11:55&#x27;, &#x27;12:00&#x27;, &#x27;12:05&#x27;, &#x27;12:10&#x27;, &#x27;12:15&#x27;, &#x27;12:20&#x27;, &#x27;12:25&#x27;, &#x27;12:30&#x27;, &#x27;12:35&#x27;, &#x27;12:40&#x27;, &#x27;12:45&#x27;, &#x27;12:50&#x27;, &#x27;12:55&#x27;, &#x27;13:00&#x27;, &#x27;13:05&#x27;, &#x27;13:10&#x27;, &#x27;13:15&#x27;, &#x27;13:20&#x27;, &#x27;13:25&#x27;, &#x27;13:30&#x27;, &#x27;13:35&#x27;, &#x27;13:40&#x27;, &#x27;13:45&#x27;, &#x27;13:50&#x27;, &#x27;13:55&#x27;, &#x27;14:00&#x27;, &#x27;14:05&#x27;, &#x27;14:10&#x27;, &#x27;14:15&#x27;, &#x27;14:20&#x27;, &#x27;14:25&#x27;, &#x27;14:30&#x27;, &#x27;14:35&#x27;, &#x27;14:40&#x27;, &#x27;14:45&#x27;, &#x27;14:50&#x27;, &#x27;14:55&#x27;, &#x27;15:00&#x27;, &#x27;15:05&#x27;, &#x27;15:10&#x27;, &#x27;15:15&#x27;, &#x27;15:20&#x27;, &#x27;15:25&#x27;, &#x27;15:30&#x27;, &#x27;15:35&#x27;, &#x27;15:40&#x27;, &#x27;15:45&#x27;, &#x27;15:50&#x27;, &#x27;15:55&#x27;, &#x27;16:00&#x27;, &#x27;16:05&#x27;, &#x27;16:10&#x27;, &#x27;16:15&#x27;, &#x27;16:20&#x27;, &#x27;16:25&#x27;, &#x27;16:30&#x27;, &#x27;16:35&#x27;, &#x27;16:40&#x27;, &#x27;16:45&#x27;, &#x27;16:50&#x27;, &#x27;16:55&#x27;, &#x27;17:00&#x27;, &#x27;17:05&#x27;, &#x27;17:10&#x27;, &#x27;17:15&#x27;, &#x27;17:20&#x27;, &#x27;17:25&#x27;, &#x27;17:30&#x27;, &#x27;17:35&#x27;, &#x27;17:40&#x27;, &#x27;17:45&#x27;, &#x27;17:50&#x27;, &#x27;17:55&#x27;, &#x27;18:00&#x27;, &#x27;18:05&#x27;, &#x27;18:10&#x27;, &#x27;18:15&#x27;, &#x27;18:20&#x27;, &#x27;18:25&#x27;, &#x27;18:30&#x27;, &#x27;18:35&#x27;, &#x27;18:40&#x27;, &#x27;18:45&#x27;, &#x27;18:50&#x27;, &#x27;18:55&#x27;, &#x27;19:00&#x27;, &#x27;19:05&#x27;, &#x27;19:10&#x27;, &#x27;19:15&#x27;, &#x27;19:20&#x27;, &#x27;19:25&#x27;, &#x27;19:30&#x27;, &#x27;19:35&#x27;, &#x27;19:40&#x27;, &#x27;19:45&#x27;, &#x27;19:50&#x27;, &#x27;19:55&#x27;, &#x27;20:00&#x27;, &#x27;20:05&#x27;, &#x27;20:10&#x27;, &#x27;20:15&#x27;, &#x27;20:20&#x27;, &#x27;20:25&#x27;, &#x27;20:30&#x27;, &#x27;20:35&#x27;, &#x27;20:40&#x27;, &#x27;20:45&#x27;, &#x27;20:50&#x27;, &#x27;20:55&#x27;, &#x27;21:00&#x27;, &#x27;21:05&#x27;, &#x27;21:10&#x27;, &#x27;21:15&#x27;, &#x27;21:20&#x27;, &#x27;21:25&#x27;, &#x27;21:30&#x27;, &#x27;21:35&#x27;, &#x27;21:40&#x27;, &#x27;21:45&#x27;, &#x27;21:50&#x27;, &#x27;21:55&#x27;, &#x27;22:00&#x27;, &#x27;22:05&#x27;, &#x27;22:10&#x27;, &#x27;22:15&#x27;, &#x27;22:20&#x27;, &#x27;22:25&#x27;, &#x27;22:30&#x27;, &#x27;22:35&#x27;, &#x27;22:40&#x27;, &#x27;22:45&#x27;, &#x27;22:50&#x27;, &#x27;22:55&#x27;, &#x27;23:00&#x27;, &#x27;23:05&#x27;, &#x27;23:10&#x27;, &#x27;23:15&#x27;, &#x27;23:20&#x27;, &#x27;23:25&#x27;, &#x27;23:30&#x27;, &#x27;23:35&#x27;, &#x27;23:40&#x27;, &#x27;23:45&#x27;, &#x27;23:50&#x27;, &#x27;23:55&#x27;]</span><br></code></pre></td></tr></table></figure><p>多个 for 循环+条件表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>] <span class="hljs-keyword">if</span> x != y]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span><br></code></pre></td></tr></table></figure><h2 id="字典推导式">1.2 字典推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>newdict = &#123;key:<span class="hljs-built_in">len</span>(key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> listdemo&#125;<br><span class="hljs-built_in">print</span>(newdict)<br><span class="hljs-comment"># &#123;&#x27;Bob&#x27;: 3, &#x27;Jason&#x27;: 5, &#x27;Peter&#x27;: 5, &#x27;Jani&#x27;: 4, &#x27;Tom&#x27;: 3&#125;</span><br></code></pre></td></tr></table></figure><p>互换 key 和 value 的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;角色名&#x27;</span>:<span class="hljs-string">&#x27;宫本武藏&#x27;</span>,<span class="hljs-string">&#x27;定位&#x27;</span>:<span class="hljs-string">&#x27;刺客&#x27;</span>&#125;<br>person_reverse = &#123;k:v <span class="hljs-keyword">for</span> v,k <span class="hljs-keyword">in</span> person.items()&#125;<br><span class="hljs-built_in">print</span>(person_reverse)<br><span class="hljs-comment"># &#123;&#x27;宫本武藏&#x27;: &#x27;角色名&#x27;, &#x27;刺客&#x27;: &#x27;定位&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="字典遍历">2、字典遍历</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;角色名&#x27;</span>:<span class="hljs-string">&#x27;宫本武藏&#x27;</span>,<span class="hljs-string">&#x27;定位&#x27;</span>:<span class="hljs-string">&#x27;刺客&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> person.items():<br>    <span class="hljs-built_in">print</span>(key,value)<br></code></pre></td></tr></table></figure><h1 id="判断元素是否在列表中">3、判断元素是否在列表中</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Peter&quot;</span> <span class="hljs-keyword">in</span> listdemo:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br><span class="hljs-comment"># Yes</span><br></code></pre></td></tr></table></figure><h1 id="反转字符串">4、反转字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Tom&quot;</span><br>reverse_name = name[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(reverse_name)<br><span class="hljs-comment"># moT</span><br></code></pre></td></tr></table></figure><h1 id="反转列表">5、反转列表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>reverse_name_list = name_list[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(reverse_name_list)<br><span class="hljs-comment"># [&#x27;Tom&#x27;, &#x27;Jani&#x27;, &#x27;Peter&#x27;, &#x27;Jason&#x27;, &#x27;Bob&#x27;]</span><br></code></pre></td></tr></table></figure><h1 id="获取时间">6、获取时间</h1><p>获取当前时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>current_time = datetime.datetime.now()<br><span class="hljs-built_in">print</span>(current_time)<br><span class="hljs-comment"># 2024-04-24 23:59:57.567560</span><br></code></pre></td></tr></table></figure><p>获取当前日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>current_date = datetime.date.today()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前日期:&quot;</span>, current_date)<br><span class="hljs-comment"># 当前日期: 2024-04-25</span><br></code></pre></td></tr></table></figure><p>获取毫秒级时间（程序执行时间）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start_time = time.time()<br>numbers = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>)]<br>end_time = time.time()<br>time_ = end_time - start_time<br><span class="hljs-built_in">print</span>(time_)<br><span class="hljs-comment"># 0.03652048110961914</span><br></code></pre></td></tr></table></figure><h1 id="三元运算符">7、三元运算符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">max</span> = a <span class="hljs-keyword">if</span> a&gt;b <span class="hljs-keyword">else</span> b<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>)<br><span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><h1 id="枚举循环">8、枚举循环</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>]<br><span class="hljs-keyword">for</span> index,fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(index,fruit)<br><span class="hljs-comment"># 0 apple</span><br><span class="hljs-comment"># 1 banana</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">python实用小技巧，加快代码开发、简化代码结构，持续更新中......</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="技巧" scheme="http://example.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>解决matplotlib绘图中英文混用问题</title>
    <link href="http://example.com/2024/04/17/016%20matplotlib%E7%BB%98%E5%9B%BE%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%B7%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2024/04/17/016%20matplotlib%E7%BB%98%E5%9B%BE%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%B7%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2024-04-16T16:28:00.000Z</published>
    <updated>2025-02-08T06:47:20.940Z</updated>
    
    <content type="html"><![CDATA[<p>最近在处理实验数据，因为有 c++基础，尝试使用 python 进行绘图。</p><blockquote><p>目前遇到一个问题：想要在一张图中中文使用宋体，英文使用新罗马字体该如何解决？</p></blockquote><p>在网上查阅了大量的资料，找到了几种解决办法，总结起来就 3 种：</p><ol type="1"><li>全局使用中文，在需要使用英文的地方使用 latex 公式书写；</li><li>使用外部</li><li>合并宋体和新罗马字体为新字体<code>timessimsun</code>，重新导入matplotlib</li></ol><h2 id="第一种方案全局宋体latex-新罗马">第一种方案：全局宋体+latex新罗马</h2><p>比如在绘制 text 时，英文使用 latex公式进行书写，可将英文显示为新罗马字体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>rc = &#123;<span class="hljs-string">&quot;font.family&quot;</span> : <span class="hljs-string">&quot;Times New Roman&quot;</span>,<br>      <span class="hljs-string">&quot;mathtext.fontset&quot;</span> : <span class="hljs-string">&quot;stix&quot;</span>,<br>      &#125;<br>plt.rcParams.update(rc)<br>fig,ax = plt.subplots(dpi = <span class="hljs-number">300</span>)<br>ax.set_xlabel(<span class="hljs-string">r&#x27;密度$\mathrm&#123;kg/m&#125;^3$&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.8</span>,<span class="hljs-string">r&#x27;宋体 $\mathrm&#123;Times New Roman&#125;$(正体)&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.6</span>,<span class="hljs-string">r&#x27;宋体 $Times New Roman$(斜体)&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-string">r&#x27;$\mathrm&#123;m^3&#125;\ m^3$&#x27;</span>,fontsize = <span class="hljs-number">30</span>)<br>fig.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417004233122.png"alt="image-20240417004233122" /><figcaption aria-hidden="true">image-20240417004233122</figcaption></figure><p>这时可能还是不行，原因是<code>matplotlib</code>没有找到宋体</p><p><strong>修改配置文件</strong></p><p><code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code>，也就是<code>Python</code>目录下的<code>Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code></p><p>修改字体类型为<code>serif</code>，并添加宋体</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417010437557.png"alt="image-20240417010437557" /><figcaption aria-hidden="true">image-20240417010437557</figcaption></figure><p><strong>更改缓存文件</strong></p><p><code>C:\Users\23984\.matplotlib\fontlist-v330.json</code></p><p>在 ttflist中重新新增一份<code>simsun</code>字体，定位到字体存放的位置</p><blockquote><p>这个字体可在电脑默认字体库中找到，在<code>C:\Windows\Fonts</code>目录下</p></blockquote><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417010608917.png"alt="image-20240417010608917" /><figcaption aria-hidden="true">image-20240417010608917</figcaption></figure><p>完成</p><blockquote><p>但是这个方法有个很明显的局限性，就是需要手动在英文的地方输入 latex公式，其一对不熟悉 latex的伙伴不友好，其二若数字是存储在一个变量中如何在 latex获取变量的值。比如在绘制 lengend 时，1000g/m3 中的 1000是存储在动态变量中的，这时就不能通过第一种方法显示更改为新罗马字体。</p></blockquote><h2 id="第二种方案latex-包">第二种方案：latex 包</h2><p>这种方案需要使用第三方 LaTex 包 ，xeCJK是一个提供中文、日文和韩文支持的软件包。输入以下代码老是报错，目前我没有成功，所以此方案不做详细介绍，如果有小伙伴通过这种方法成功了，还请一起交流学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib<br>mpl.use(<span class="hljs-string">&#x27;pgf&#x27;</span>) <span class="hljs-comment"># stwich backend to pgf</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>    plt.rcParams.update(&#123;<br>    <span class="hljs-string">&quot;text.usetex&quot;</span>: <span class="hljs-literal">True</span>,<span class="hljs-comment"># use default xelatex</span><br>    <span class="hljs-string">&quot;pgf.rcfonts&quot;</span>: <span class="hljs-literal">False</span>,<span class="hljs-comment"># turn off default matplotlib fonts properties</span><br>    <span class="hljs-string">&quot;pgf.preamble&quot;</span>: [<br>         <span class="hljs-string">r&#x27;\usepackage&#123;fontspec&#125;&#x27;</span>,<br>         <span class="hljs-string">r&#x27;\setmainfont&#123;Times New Roman&#125;&#x27;</span>,<span class="hljs-comment"># EN fonts Romans</span><br>         <span class="hljs-string">r&#x27;\usepackage&#123;xeCJK&#125;&#x27;</span>,<span class="hljs-comment"># import xeCJK</span><br>         <span class="hljs-string">r&#x27;\setCJKmainfont&#123;SimSun&#125;&#x27;</span>,<span class="hljs-comment"># set CJK fonts as SimSun</span><br>         <span class="hljs-string">r&#x27;\xeCJKsetup&#123;CJKecglue=&#125;&#x27;</span>,<span class="hljs-comment"># turn off one space between CJK and EN fonts</span><br>         ]<br>&#125;)<br>plt.rcParams[<span class="hljs-string">&#x27;savefig.dpi&#x27;</span>]=<span class="hljs-number">300</span><br>plt.figure(figsize=(<span class="hljs-number">4.5</span>, <span class="hljs-number">2.5</span>))<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br>plt.text(<span class="hljs-number">2.5</span>, <span class="hljs-number">2.</span>, <span class="hljs-string">&quot;\CJKfontspec&#123;SimHei&#125;&#123;黑体标注&#125;&quot;</span>)<span class="hljs-comment"># Annotation by SimHei</span><br>plt.xlabel(<span class="hljs-string">&quot;宋体坐标标签(units)&quot;</span>)<span class="hljs-comment"># CJK&amp;EN fonts mixed</span><br>plt.tight_layout(<span class="hljs-number">.5</span>)<br>plt.savefig(<span class="hljs-string">&#x27;examples.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三种方法合并新字体">第三种方法：合并新字体</h2><p>这是比较推荐的一种方法，就是将新罗马和宋体两种字体合并为一种字体使用，需要使用字体合并工具，这里我直接在网上找到了别人合并好的，<ahref="https://pan.baidu.com/s/1Dis12wv7cbDE-l61oGcnWQ?pwd=t036">点击下载</a>。</p><p>将合并好的字体放在<code>matplotlib</code>包目录下，我这里使用的是<code>anaconda</code>字体文件夹是<code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\fonts\ttf</code>，在<code>Python</code>环境下的<code>Lib\site-packages\matplotlib\mpl-data\fonts\ttf</code></p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005515518.png"alt="image-20240417005515518" /><figcaption aria-hidden="true">image-20240417005515518</figcaption></figure><p><strong>修改配置文件</strong></p><p><code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code>，也就是<code>Python</code>目录下的<code>Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code></p><p>修改字体类型为<code>serif</code>，并添加新和成的字体</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005737211.png"alt="image-20240417005737211" /><figcaption aria-hidden="true">image-20240417005737211</figcaption></figure><p><strong>更改缓存文件</strong></p><p><code>C:\Users\23984\.matplotlib\fontlist-v330.json</code></p><p>在 ttflist中重新新增一份<code>timessimsun</code>字体，定位到字体存放的位置</p><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005920759.png"alt="image-20240417005920759" /><figcaption aria-hidden="true">image-20240417005920759</figcaption></figure><p><strong>测试代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> rcParams<br><br><br>config = &#123;<br>      <span class="hljs-string">&quot;font.family&quot;</span>:<span class="hljs-string">&#x27;serif&#x27;</span>,<br>      <span class="hljs-string">&quot;mathtext.fontset&quot;</span>:<span class="hljs-string">&#x27;stix&#x27;</span>,<br>      <span class="hljs-string">&quot;font.serif&quot;</span>: <span class="hljs-string">&#x27;timessimsun&#x27;</span>,<br>&#125;<br>rcParams.update(config)<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>    <span class="hljs-comment"># 解决负号显示为方块的问题</span><br><br>fig,ax = plt.subplots(dpi = <span class="hljs-number">300</span>)<br>ax.set_xlabel(<span class="hljs-string">r&#x27;密度$\mathrm&#123;kg/m&#125;^3$&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.05</span>,<span class="hljs-number">0.6</span>,<span class="hljs-string">r&#x27;matplotlib中文使用宋体英文使用新罗马&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>fig.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><figure><imgsrc="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417011423583.png"alt="image-20240417011423583" /><figcaption aria-hidden="true">image-20240417011423583</figcaption></figure><p>完成</p><blockquote><p>参考链接:https://stackoverflow.com/questions/44008032/how-to-mix-chinese-and-english-with-matplotlib</p></blockquote>]]></content>
    
    
    <summary type="html">使用python绘图时，想要在一张图中中文使用宋体，英文使用新罗马字体该如何解决？</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="matplotlib" scheme="http://example.com/tags/matplotlib/"/>
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
</feed>
